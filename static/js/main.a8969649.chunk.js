(this.webpackJsonpfrontend=this.webpackJsonpfrontend||[]).push([[0],{142:function(e){e.exports=JSON.parse('{"address":"0x8Cfd9a706507c62FFcf89e87bb0654697843aFC3","abi":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint256","name":"initSupply","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"blockNumber","type":"uint64"},{"indexed":false,"internalType":"uint256","name":"challenge","type":"uint256"},{"indexed":false,"internalType":"bool","name":"premium","type":"bool"},{"indexed":false,"internalType":"uint16","name":"rewardsCnt","type":"uint16"},{"indexed":false,"internalType":"uint16","name":"tokens","type":"uint16"}],"name":"AddChallenge","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"blockNumber","type":"uint64"},{"indexed":true,"internalType":"address","name":"miner","type":"address"},{"indexed":false,"internalType":"uint256","name":"solution","type":"uint256"},{"indexed":false,"internalType":"uint16","name":"claimNo","type":"uint16"},{"indexed":false,"internalType":"uint8","name":"generalDifficulty","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"adjustedDifficulty","type":"uint8"},{"indexed":false,"internalType":"uint16","name":"solvedDifficulty","type":"uint16"}],"name":"Claim","type":"event"},{"anonymous":false,"inputs":[],"name":"Lock","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"lockedUntil","type":"uint256"}],"name":"TimeLock","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[],"name":"Unlock","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"BALANCE_RECORDS_CNT","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_DIFFICULTY_STEP","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_NULL","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LUCKY_NUMBER","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAXIMUM_DELAY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_CNT","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINIMUM_DELAY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint8","name":"limit","type":"uint8"}],"name":"addChallenges","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"uint256","name":"solution","type":"uint256"}],"name":"claimReward","outputs":[{"internalType":"uint256","name":"reward","type":"uint256"},{"internalType":"uint8","name":"reason","type":"uint8"},{"internalType":"bool","name":"premium","type":"bool"},{"internalType":"uint16","name":"claimNo","type":"uint16"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"walletAddress","type":"address"},{"internalType":"uint64","name":"startingBlockNumber","type":"uint64"},{"internalType":"uint64","name":"nextChallengeBlockNumber","type":"uint64"},{"internalType":"uint64","name":"minedChallenges","type":"uint64"},{"internalType":"uint8","name":"blocksPerChallenge","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"lock","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"lockStatus","outputs":[{"internalType":"bool","name":"locked","type":"bool"},{"internalType":"uint256","name":"lockedUntil","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minedChallenges","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nextChallengeBlockNumber","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"readBasicChallenges","outputs":[{"internalType":"uint8","name":"cnt","type":"uint8"},{"internalType":"uint8[]","name":"indexes","type":"uint8[]"},{"internalType":"uint64[]","name":"blockNumbers","type":"uint64[]"},{"internalType":"bytes32[]","name":"blockHashes","type":"bytes32[]"},{"internalType":"uint8[]","name":"nexts","type":"uint8[]"},{"internalType":"uint16[]","name":"claimsCnt","type":"uint16[]"},{"internalType":"bool[]","name":"claimed","type":"bool[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"readPremiumChallenges","outputs":[{"internalType":"uint8","name":"cnt","type":"uint8"},{"internalType":"uint8[]","name":"indexes","type":"uint8[]"},{"internalType":"uint64[]","name":"blockNumbers","type":"uint64[]"},{"internalType":"bytes32[]","name":"blockHashes","type":"bytes32[]"},{"internalType":"uint8[]","name":"nexts","type":"uint8[]"},{"internalType":"uint16[]","name":"claimsCnt","type":"uint16[]"},{"internalType":"bool[]","name":"claimed","type":"bool[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"readRegisteredBalances","outputs":[{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"uint8","name":"cnt","type":"uint8"},{"internalType":"uint256[]","name":"balances","type":"uint256[]"},{"internalType":"uint64[]","name":"blockNumbers","type":"uint64[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"registerBalance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"startingBlockNumber","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"delay_","type":"uint256"}],"name":"timeLock","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unlock","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"uint256","name":"solution","type":"uint256"}],"name":"verifyClaim","outputs":[{"internalType":"uint256","name":"reward","type":"uint256"},{"internalType":"uint8","name":"reason","type":"uint8"},{"internalType":"bool","name":"premium","type":"bool"},{"internalType":"uint16","name":"rewardsCnt","type":"uint16"},{"internalType":"uint8","name":"generalDifficulty","type":"uint8"},{"internalType":"uint8","name":"adjustedDifficulty","type":"uint8"},{"internalType":"uint16","name":"solvedDifficulty","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"uint256","name":"solution","type":"uint256"}],"name":"verifySolution","outputs":[{"internalType":"uint16","name":"solvedDifficulty","type":"uint16"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x2a6fc04011658eb5c0c40ba0c25c751efdf318e265d07f3d13dc0c2e16bc0fcc","receipt":{"to":null,"from":"0x112e782aeeef52a166f6E8Cc86F6D17e37A515AC","contractAddress":"0x8Cfd9a706507c62FFcf89e87bb0654697843aFC3","transactionIndex":51,"gasUsed":"8909976","logsBloom":"0xblockHash":"0x675f866b99623ddc3831fd5359cde743bb57d85090f77275465a85c10fdd9d4f","transactionHash":"0x2a6fc04011658eb5c0c40ba0c25c751efdf318e265d07f3d13dc0c2e16bc0fcc","logs":[{"transactionIndex":51,"blockNumber":19054789,"transactionHash":"0x2a6fc04011658eb5c0c40ba0c25c751efdf318e265d07f3d13dc0c2e16bc0fcc","address":"0x8Cfd9a706507c62FFcf89e87bb0654697843aFC3","topics":["0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000112e782aeeef52a166f6e8cc86f6d17e37a515ac"],"data":"0x","logIndex":346,"blockHash":"0x675f866b99623ddc3831fd5359cde743bb57d85090f77275465a85c10fdd9d4f"},{"transactionIndex":51,"blockNumber":19054789,"transactionHash":"0x2a6fc04011658eb5c0c40ba0c25c751efdf318e265d07f3d13dc0c2e16bc0fcc","address":"0x8Cfd9a706507c62FFcf89e87bb0654697843aFC3","topics":["0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258"],"data":"0x000000000000000000000000112e782aeeef52a166f6e8cc86f6d17e37a515ac","logIndex":347,"blockHash":"0x675f866b99623ddc3831fd5359cde743bb57d85090f77275465a85c10fdd9d4f"},{"transactionIndex":51,"blockNumber":19054789,"transactionHash":"0x2a6fc04011658eb5c0c40ba0c25c751efdf318e265d07f3d13dc0c2e16bc0fcc","address":"0x8Cfd9a706507c62FFcf89e87bb0654697843aFC3","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000112e782aeeef52a166f6e8cc86f6d17e37a515ac"],"data":"0x0000000000000000000000000000000000000000000000000000000000000000","logIndex":348,"blockHash":"0x675f866b99623ddc3831fd5359cde743bb57d85090f77275465a85c10fdd9d4f"},{"transactionIndex":51,"blockNumber":19054789,"transactionHash":"0x2a6fc04011658eb5c0c40ba0c25c751efdf318e265d07f3d13dc0c2e16bc0fcc","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000112e782aeeef52a166f6e8cc86f6d17e37a515ac","0x000000000000000000000000b79fad4ca981472442f53d16365fdf0305ffd8e9"],"data":"0x000000000000000000000000000000000000000000000000003f4f26e4dfe000000000000000000000000000000000000000000000000005b12aefafa80400000000000000000000000000000000000000000000000042eebe236472ec447335000000000000000000000000000000000000000000000005b0eba088c32420000000000000000000000000000000000000000000000042eebe62b399d1245335","logIndex":349,"blockHash":"0x675f866b99623ddc3831fd5359cde743bb57d85090f77275465a85c10fdd9d4f"}],"blockNumber":19054789,"cumulativeGasUsed":"21097678","status":1,"byzantium":true},"args":["BEER Coin","BEER",0],"solcInputHash":"1fa7b16864ef466afb18ae7ae39d7aa2","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.3+commit.9bfce1f6\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"symbol\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"initSupply\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"challenge\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":false,\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint16\\",\\"name\\":\\"rewardsCnt\\",\\"type\\":\\"uint16\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint16\\",\\"name\\":\\"tokens\\",\\"type\\":\\"uint16\\"}],\\"name\\":\\"AddChallenge\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Approval\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"miner\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"solution\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint16\\",\\"name\\":\\"claimNo\\",\\"type\\":\\"uint16\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint8\\",\\"name\\":\\"generalDifficulty\\",\\"type\\":\\"uint8\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint8\\",\\"name\\":\\"adjustedDifficulty\\",\\"type\\":\\"uint8\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint16\\",\\"name\\":\\"solvedDifficulty\\",\\"type\\":\\"uint16\\"}],\\"name\\":\\"Claim\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[],\\"name\\":\\"Lock\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"previousOwner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"OwnershipTransferred\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Paused\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"lockedUntil\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"TimeLock\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Transfer\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[],\\"name\\":\\"Unlock\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Unpaused\\",\\"type\\":\\"event\\"},{\\"inputs\\":[],\\"name\\":\\"BALANCE_RECORDS_CNT\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_DIFFICULTY_STEP\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_NULL\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"LUCKY_NUMBER\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAXIMUM_DELAY\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_CNT\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MINIMUM_DELAY\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MIN_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"limit\\",\\"type\\":\\"uint8\\"}],\\"name\\":\\"addChallenges\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"}],\\"name\\":\\"allowance\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"approve\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"balanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"solution\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"claimReward\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"reward\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"reason\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"uint16\\",\\"name\\":\\"claimNo\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"decimals\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"subtractedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"decreaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getStatus\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"walletAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint64\\",\\"name\\":\\"startingBlockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"uint64\\",\\"name\\":\\"nextChallengeBlockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"uint64\\",\\"name\\":\\"minedChallenges\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"blocksPerChallenge\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"addedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"increaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"lock\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"lockStatus\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"locked\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"lockedUntil\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"minedChallenges\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"nextChallengeBlockNumber\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"owner\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"pause\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"paused\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"readBasicChallenges\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"cnt\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"uint8[]\\",\\"name\\":\\"indexes\\",\\"type\\":\\"uint8[]\\"},{\\"internalType\\":\\"uint64[]\\",\\"name\\":\\"blockNumbers\\",\\"type\\":\\"uint64[]\\"},{\\"internalType\\":\\"bytes32[]\\",\\"name\\":\\"blockHashes\\",\\"type\\":\\"bytes32[]\\"},{\\"internalType\\":\\"uint8[]\\",\\"name\\":\\"nexts\\",\\"type\\":\\"uint8[]\\"},{\\"internalType\\":\\"uint16[]\\",\\"name\\":\\"claimsCnt\\",\\"type\\":\\"uint16[]\\"},{\\"internalType\\":\\"bool[]\\",\\"name\\":\\"claimed\\",\\"type\\":\\"bool[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"readPremiumChallenges\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"cnt\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"uint8[]\\",\\"name\\":\\"indexes\\",\\"type\\":\\"uint8[]\\"},{\\"internalType\\":\\"uint64[]\\",\\"name\\":\\"blockNumbers\\",\\"type\\":\\"uint64[]\\"},{\\"internalType\\":\\"bytes32[]\\",\\"name\\":\\"blockHashes\\",\\"type\\":\\"bytes32[]\\"},{\\"internalType\\":\\"uint8[]\\",\\"name\\":\\"nexts\\",\\"type\\":\\"uint8[]\\"},{\\"internalType\\":\\"uint16[]\\",\\"name\\":\\"claimsCnt\\",\\"type\\":\\"uint16[]\\"},{\\"internalType\\":\\"bool[]\\",\\"name\\":\\"claimed\\",\\"type\\":\\"bool[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"readRegisteredBalances\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"decimals\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"cnt\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint64[]\\",\\"name\\":\\"blockNumbers\\",\\"type\\":\\"uint64[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"registerBalance\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"renounceOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"startingBlockNumber\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"symbol\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"delay_\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"timeLock\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"totalSupply\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transfer\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"sender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transferFrom\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"transferOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"unlock\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"unpause\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"solution\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"verifyClaim\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"reward\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"reason\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"uint16\\",\\"name\\":\\"rewardsCnt\\",\\"type\\":\\"uint16\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"generalDifficulty\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"adjustedDifficulty\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"uint16\\",\\"name\\":\\"solvedDifficulty\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"solution\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"verifySolution\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"solvedDifficulty\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"allowance(address,address)\\":{\\"details\\":\\"See {IERC20-allowance}.\\"},\\"approve(address,uint256)\\":{\\"details\\":\\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\\"},\\"balanceOf(address)\\":{\\"details\\":\\"See {IERC20-balanceOf}.\\"},\\"decimals()\\":{\\"details\\":\\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\\"},\\"decreaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\\"},\\"increaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\\"},\\"lock()\\":{\\"details\\":\\"Activates the manual lock, that can only be unlocked manually\\"},\\"lockStatus()\\":{\\"details\\":\\"Returns the status of both manual and time locks.\\"},\\"name()\\":{\\"details\\":\\"Returns the name of the token.\\"},\\"owner()\\":{\\"details\\":\\"Returns the address of the current owner.\\"},\\"paused()\\":{\\"details\\":\\"Returns true if the contract is paused, and false otherwise.\\"},\\"renounceOwnership()\\":{\\"details\\":\\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\\"},\\"symbol()\\":{\\"details\\":\\"Returns the symbol of the token, usually a shorter version of the name.\\"},\\"timeLock(uint256)\\":{\\"details\\":\\"Activates the time lock, that will automatically expire after delay\\"},\\"totalSupply()\\":{\\"details\\":\\"See {IERC20-totalSupply}.\\"},\\"transfer(address,uint256)\\":{\\"details\\":\\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\\"},\\"transferFrom(address,address,uint256)\\":{\\"details\\":\\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`.\\"},\\"transferOwnership(address)\\":{\\"details\\":\\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\\"},\\"unlock()\\":{\\"details\\":\\"Deactivates the manual lock\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/RareToken.sol\\":\\"RareToken\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":50},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/access/Ownable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity >=0.6.0 <0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * By default, the owner account will be the one that deploys the contract. This\\\\n * can later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\nabstract contract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\\\n     */\\\\n    constructor () internal {\\\\n        address msgSender = _msgSender();\\\\n        _owner = msgSender;\\\\n        emit OwnershipTransferred(address(0), msgSender);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view virtual returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        require(owner() == _msgSender(), \\\\\\"Ownable: caller is not the owner\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby removing any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        emit OwnershipTransferred(_owner, address(0));\\\\n        _owner = address(0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        require(newOwner != address(0), \\\\\\"Ownable: new owner is the zero address\\\\\\");\\\\n        emit OwnershipTransferred(_owner, newOwner);\\\\n        _owner = newOwner;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity >=0.6.0 <0.8.0;\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations with added overflow\\\\n * checks.\\\\n *\\\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\\\n * in bugs, because programmers usually assume that an overflow raises an\\\\n * error, which is the standard behavior in high level programming languages.\\\\n * `SafeMath` restores this intuition by reverting the transaction when an\\\\n * operation overflows.\\\\n *\\\\n * Using this library instead of the unchecked operations eliminates an entire\\\\n * class of bugs, so it\'s recommended to use it always.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        uint256 c = a + b;\\\\n        if (c < a) return (false, 0);\\\\n        return (true, c);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        if (b > a) return (false, 0);\\\\n        return (true, a - b);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n        // benefit is lost if \'b\' is also tested.\\\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n        if (a == 0) return (true, 0);\\\\n        uint256 c = a * b;\\\\n        if (c / a != b) return (false, 0);\\\\n        return (true, c);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        if (b == 0) return (false, 0);\\\\n        return (true, a / b);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        if (b == 0) return (false, 0);\\\\n        return (true, a % b);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        uint256 c = a + b;\\\\n        require(c >= a, \\\\\\"SafeMath: addition overflow\\\\\\");\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        require(b <= a, \\\\\\"SafeMath: subtraction overflow\\\\\\");\\\\n        return a - b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        if (a == 0) return 0;\\\\n        uint256 c = a * b;\\\\n        require(c / a == b, \\\\\\"SafeMath: multiplication overflow\\\\\\");\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        require(b > 0, \\\\\\"SafeMath: division by zero\\\\\\");\\\\n        return a / b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        require(b > 0, \\\\\\"SafeMath: modulo by zero\\\\\\");\\\\n        return a % b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b <= a, errorMessage);\\\\n        return a - b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b > 0, errorMessage);\\\\n        return a / b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting with custom message when dividing by zero.\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b > 0, errorMessage);\\\\n        return a % b;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity >=0.6.0 <0.8.0;\\\\n\\\\nimport \\\\\\"../../utils/Context.sol\\\\\\";\\\\nimport \\\\\\"./IERC20.sol\\\\\\";\\\\nimport \\\\\\"../../math/SafeMath.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC20} interface.\\\\n *\\\\n * This implementation is agnostic to the way tokens are created. This means\\\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\\\n *\\\\n * TIP: For a detailed writeup see our guide\\\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\\\n * to implement supply mechanisms].\\\\n *\\\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\\\n * of returning `false` on failure. This behavior is nonetheless conventional\\\\n * and does not conflict with the expectations of ERC20 applications.\\\\n *\\\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\\\n * This allows applications to reconstruct the allowance for all accounts just\\\\n * by listening to said events. Other implementations of the EIP may not emit\\\\n * these events, as it isn\'t required by the specification.\\\\n *\\\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\\\n * functions have been added to mitigate the well-known issues around setting\\\\n * allowances. See {IERC20-approve}.\\\\n */\\\\ncontract ERC20 is Context, IERC20 {\\\\n    using SafeMath for uint256;\\\\n\\\\n    mapping (address => uint256) private _balances;\\\\n\\\\n    mapping (address => mapping (address => uint256)) private _allowances;\\\\n\\\\n    uint256 private _totalSupply;\\\\n\\\\n    string private _name;\\\\n    string private _symbol;\\\\n    uint8 private _decimals;\\\\n\\\\n    /**\\\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\\\n     * a default value of 18.\\\\n     *\\\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\\\n     *\\\\n     * All three of these values are immutable: they can only be set once during\\\\n     * construction.\\\\n     */\\\\n    constructor (string memory name_, string memory symbol_) public {\\\\n        _name = name_;\\\\n        _symbol = symbol_;\\\\n        _decimals = 18;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() public view virtual returns (string memory) {\\\\n        return _name;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\\\n     * name.\\\\n     */\\\\n    function symbol() public view virtual returns (string memory) {\\\\n        return _symbol;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of decimals used to get its user representation.\\\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\\\n     *\\\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\\\n     * called.\\\\n     *\\\\n     * NOTE: This information is only used for _display_ purposes: it in\\\\n     * no way affects any of the arithmetic of the contract, including\\\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\\\n     */\\\\n    function decimals() public view virtual returns (uint8) {\\\\n        return _decimals;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-totalSupply}.\\\\n     */\\\\n    function totalSupply() public view virtual override returns (uint256) {\\\\n        return _totalSupply;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-balanceOf}.\\\\n     */\\\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\\\n        return _balances[account];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transfer}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - the caller must have a balance of at least `amount`.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(_msgSender(), recipient, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-allowance}.\\\\n     */\\\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\\\n        return _allowances[owner][spender];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-approve}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\\\n        _approve(_msgSender(), spender, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transferFrom}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` and `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     * - the caller must have allowance for ``sender``\'s tokens of at least\\\\n     * `amount`.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(sender, recipient, amount);\\\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\\\\"ERC20: transfer amount exceeds allowance\\\\\\"));\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     * - `spender` must have allowance for the caller of at least\\\\n     * `subtractedValue`.\\\\n     */\\\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\\\\"ERC20: decreased allowance below zero\\\\\\"));\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\\\n     *\\\\n     * This is internal function is equivalent to {transfer}, and can be used to\\\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` cannot be the zero address.\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     */\\\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\\\n        require(sender != address(0), \\\\\\"ERC20: transfer from the zero address\\\\\\");\\\\n        require(recipient != address(0), \\\\\\"ERC20: transfer to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(sender, recipient, amount);\\\\n\\\\n        _balances[sender] = _balances[sender].sub(amount, \\\\\\"ERC20: transfer amount exceeds balance\\\\\\");\\\\n        _balances[recipient] = _balances[recipient].add(amount);\\\\n        emit Transfer(sender, recipient, amount);\\\\n    }\\\\n\\\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\\\n     * the total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `from` set to the zero address.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `to` cannot be the zero address.\\\\n     */\\\\n    function _mint(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: mint to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(address(0), account, amount);\\\\n\\\\n        _totalSupply = _totalSupply.add(amount);\\\\n        _balances[account] = _balances[account].add(amount);\\\\n        emit Transfer(address(0), account, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\\\n     * total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `to` set to the zero address.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     * - `account` must have at least `amount` tokens.\\\\n     */\\\\n    function _burn(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: burn from the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(account, address(0), amount);\\\\n\\\\n        _balances[account] = _balances[account].sub(amount, \\\\\\"ERC20: burn amount exceeds balance\\\\\\");\\\\n        _totalSupply = _totalSupply.sub(amount);\\\\n        emit Transfer(account, address(0), amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\\\n     *\\\\n     * This internal function is equivalent to `approve`, and can be used to\\\\n     * e.g. set automatic allowances for certain subsystems, etc.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `owner` cannot be the zero address.\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\\\n        require(owner != address(0), \\\\\\"ERC20: approve from the zero address\\\\\\");\\\\n        require(spender != address(0), \\\\\\"ERC20: approve to the zero address\\\\\\");\\\\n\\\\n        _allowances[owner][spender] = amount;\\\\n        emit Approval(owner, spender, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\\\n     *\\\\n     * WARNING: This function should only be called from the constructor. Most\\\\n     * applications that interact with token contracts will not expect\\\\n     * {decimals} to ever change, and may work incorrectly if it does.\\\\n     */\\\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\\\n        _decimals = decimals_;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Hook that is called before any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * will be to transferred to `to`.\\\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens will be burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity >=0.6.0 <0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity >=0.6.0 <0.8.0;\\\\n\\\\n/*\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with GSN meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address payable) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes memory) {\\\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Pausable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity >=0.6.0 <0.8.0;\\\\n\\\\nimport \\\\\\"./Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which allows children to implement an emergency stop\\\\n * mechanism that can be triggered by an authorized account.\\\\n *\\\\n * This module is used through inheritance. It will make available the\\\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\\\n * the functions of your contract. Note that they will not be pausable by\\\\n * simply including this module, only once the modifiers are put in place.\\\\n */\\\\nabstract contract Pausable is Context {\\\\n    /**\\\\n     * @dev Emitted when the pause is triggered by `account`.\\\\n     */\\\\n    event Paused(address account);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the pause is lifted by `account`.\\\\n     */\\\\n    event Unpaused(address account);\\\\n\\\\n    bool private _paused;\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract in unpaused state.\\\\n     */\\\\n    constructor () internal {\\\\n        _paused = false;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns true if the contract is paused, and false otherwise.\\\\n     */\\\\n    function paused() public view virtual returns (bool) {\\\\n        return _paused;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must not be paused.\\\\n     */\\\\n    modifier whenNotPaused() {\\\\n        require(!paused(), \\\\\\"Pausable: paused\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to make a function callable only when the contract is paused.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must be paused.\\\\n     */\\\\n    modifier whenPaused() {\\\\n        require(paused(), \\\\\\"Pausable: not paused\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Triggers stopped state.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must not be paused.\\\\n     */\\\\n    function _pause() internal virtual whenNotPaused {\\\\n        _paused = true;\\\\n        emit Paused(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns to normal state.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must be paused.\\\\n     */\\\\n    function _unpause() internal virtual whenPaused {\\\\n        _paused = false;\\\\n        emit Unpaused(_msgSender());\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\\",\\"license\\":\\"MIT\\"},\\"contracts/Balances.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.7.0;\\\\n\\\\ncontract Balances {\\\\n\\\\n    uint8 public constant BALANCE_RECORDS_CNT = 4;\\\\n\\\\n    struct BalanceRecord {\\\\n        uint256 balance;\\\\n        uint64 blockNumber;\\\\n    }\\\\n\\\\n    struct BalanceRecords {\\\\n        BalanceRecord[BALANCE_RECORDS_CNT] records;\\\\n        uint8 recordsCnt;\\\\n    }\\\\n\\\\n    mapping (address => BalanceRecords) private _balanceRecords;\\\\n\\\\n    function _balanceGetAll(uint8 pdecimals) internal view returns (uint8 decimals, uint8 cnt, uint256[] memory balances, uint64[] memory blockNumbers) {\\\\n        BalanceRecords memory brs = _balanceRecords[msg.sender];\\\\n        cnt = brs.recordsCnt;\\\\n        decimals = pdecimals;\\\\n        balances = new uint256[](cnt);\\\\n        blockNumbers = new uint64[](cnt);\\\\n        for(uint8 i = 0; i < brs.recordsCnt; i++) {\\\\n            balances[i] = brs.records[i].balance;\\\\n            blockNumbers[i] = brs.records[i].blockNumber;\\\\n        }\\\\n    }\\\\n\\\\n    function _balanceFind(uint64 blockNumber) internal view returns (uint256 balance) {\\\\n        balance = 0;\\\\n\\\\n        BalanceRecords memory brs = _balanceRecords[msg.sender];\\\\n        for(uint8 i = 0; i < brs.recordsCnt; i++) {\\\\n            if(blockNumber >= brs.records[i].blockNumber) {\\\\n                balance = brs.records[i].balance;\\\\n                require(balance > 0, \\\\\\"_balanceFind: corrupt balance\\\\\\");\\\\n                return (balance);\\\\n            }\\\\n        }\\\\n\\\\n        require(balance == 0, \\\\\\"_balanceFind: corrupt balance\\\\\\");\\\\n        return (balance);\\\\n    }\\\\n\\\\n    function _balanceRegister(uint256 balance) internal {\\\\n        uint64 blockNumber = uint64(block.number);\\\\n        BalanceRecords storage brs = _balanceRecords[msg.sender];\\\\n        if(brs.recordsCnt > 0 && balance <= brs.records[0].balance) {\\\\n            return;\\\\n        }\\\\n        for(uint8 i = BALANCE_RECORDS_CNT-1; i > 0; i--) {\\\\n            brs.records[i] = brs.records[i-1];\\\\n        }\\\\n        brs.records[0].balance = balance;\\\\n        brs.records[0].blockNumber = blockNumber;\\\\n        if(brs.recordsCnt < BALANCE_RECORDS_CNT) {\\\\n            brs.recordsCnt++;\\\\n        }\\\\n    }\\\\n\\\\n    function _balanceUpdate(address sender, uint256 balance) internal {\\\\n        BalanceRecords storage brs = _balanceRecords[sender];\\\\n        if(brs.recordsCnt == 0) {\\\\n            _balanceRegister(balance);\\\\n        } else if(brs.records[0].balance > balance) {\\\\n            brs.records[0].balance = balance;\\\\n        }\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x13e7bcb736cd20724cb7c4db9b59b177739db6f1fdb3d1e354c9e53206a6a899\\",\\"license\\":\\"MIT\\"},\\"contracts/Challenges.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.7.0;\\\\n\\\\nimport \\\\\\"./Utils.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/math/SafeMath.sol\\\\\\";\\\\n\\\\ncontract Challenges is Utils {\\\\n    using SafeMath for uint256;\\\\n\\\\n    uint8 public constant CHALLENGE_NULL = 255;\\\\n\\\\n    uint8 public constant BLOCKS_PER_CHALLENGE = 2;\\\\n    uint8 public constant MAX_CHALLENGE_CNT = 100;\\\\n    uint8 public constant MIN_CHALLENGE_DIFFICULTY = 20;\\\\n    uint8 public constant MAX_CHALLENGE_DIFFICULTY = 218;\\\\n    uint8 public constant CHALLENGE_DIFFICULTY_STEP = 2;\\\\n\\\\n    // uint8 public constant BLOCKS_PER_CHALLENGE = 2;\\\\n    // uint8 public constant MAX_CHALLENGE_CNT = 30;\\\\n    // uint8 public constant MIN_CHALLENGE_DIFFICULTY = 20;\\\\n    // uint8 public constant MAX_CHALLENGE_DIFFICULTY = 78;\\\\n    // uint8 public constant CHALLENGE_DIFFICULTY_STEP = 2;\\\\n\\\\n    struct Challenge {\\\\n        bytes32 blockHash;\\\\n        uint64 blockNumber;\\\\n        uint8 index;\\\\n        bool valid;\\\\n        uint8 prev;\\\\n        uint8 next;\\\\n    }\\\\n\\\\n    struct ChallengeSet {\\\\n        Challenge[MAX_CHALLENGE_CNT] ch;\\\\n        uint8 cnt;\\\\n        uint8 freeIndex;\\\\n        uint8 head;\\\\n        uint8 tail;\\\\n    }\\\\n\\\\n    function _challengeSetInit(ChallengeSet storage chs) internal returns (uint8) {\\\\n\\\\n        require(CHALLENGE_NULL < 256, \\\\\\"Challenges: Invalid configuration: CHALLENGE_NULL\\\\\\");\\\\n        require(MAX_CHALLENGE_CNT <= CHALLENGE_NULL, \\\\\\"Challenges: Invalid configuration: MAX_CHALLENGE_CNT\\\\\\");\\\\n\\\\n        for(uint8 i = 0; i < MAX_CHALLENGE_CNT; i++) {\\\\n            Challenge storage ch = chs.ch[i];\\\\n            ch.blockHash = 0;\\\\n            ch.blockNumber = 0;\\\\n            ch.valid = false;\\\\n            ch.prev = CHALLENGE_NULL;\\\\n            ch.next = i+1 < MAX_CHALLENGE_CNT ? i+1 : CHALLENGE_NULL;\\\\n            ch.index = i;\\\\n        }\\\\n\\\\n        chs.cnt = 0;\\\\n        chs.freeIndex = 0;\\\\n        chs.head = CHALLENGE_NULL;\\\\n        chs.tail = CHALLENGE_NULL;\\\\n    }\\\\n\\\\n    // Returns CHALLENGE_NULL  if not found\\\\n    function _challengeFind(ChallengeSet storage chs, uint64 blockNumber) internal view returns (uint8 index, uint8 generalDifficulty) {\\\\n        uint8 cnt = chs.cnt;\\\\n        require(cnt <= MAX_CHALLENGE_CNT, \\\\\\"Challenges: Invalid configuration: cnt <= MAX_CHALLENGE_CNT failed\\\\\\");\\\\n        index = chs.head;\\\\n        generalDifficulty = 0;\\\\n        for(uint8 i = 0; i < cnt; i++) {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n\\\\n            if(ch.blockNumber == blockNumber) {\\\\n                require(index == ch.index, \\\\\\"Challenges._challengeFind(): corrupt list\\\\\\");\\\\n                generalDifficulty = MAX_CHALLENGE_DIFFICULTY - CHALLENGE_DIFFICULTY_STEP * (cnt - i - 1);\\\\n                require(MIN_CHALLENGE_DIFFICULTY <= generalDifficulty && generalDifficulty <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"Challenges._challengeFind(): generalDifficulty out of range\\\\\\");\\\\n                return (index, generalDifficulty);\\\\n            }\\\\n\\\\n            index = ch.next;\\\\n        }\\\\n        require(index == CHALLENGE_NULL, \\\\\\"Challenges._challengeFind(): corrupt list\\\\\\");\\\\n    }\\\\n\\\\n    function _challengeGet(ChallengeSet storage chs, uint8 index) internal view returns (Challenge storage) {\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"Challenges._challengeGet(): index is out of range\\\\\\");\\\\n\\\\n        Challenge storage ch = chs.ch[index];\\\\n        require(ch.index == index, \\\\\\"Challenges: corrupt challenge index\\\\\\");\\\\n\\\\n        return ch;\\\\n    }\\\\n\\\\n    function _challengeGetAll(ChallengeSet storage chs, mapping (uint64 => uint16) storage rewardsClaimed, mapping (uint64 => mapping (address => bool)) storage claims)\\\\n    internal view returns (uint8 cnt, uint8[] memory indexes, uint64[] memory blockNumbers, bytes32[] memory blockHashes, uint8[] memory nexts, uint16[] memory claimsCnt, bool[] memory claimed) {\\\\n        cnt = chs.cnt;\\\\n        indexes = new uint8[](cnt);\\\\n        blockNumbers = new uint64[](cnt);\\\\n        blockHashes = new bytes32[](cnt);\\\\n        nexts = new uint8[](cnt);\\\\n        claimsCnt = new uint16[](cnt);\\\\n        claimed = new bool[](cnt);\\\\n        uint8 index = chs.head;\\\\n        for(uint8 i = 0; i < cnt; i++) {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n            indexes[i] = ch.index;\\\\n            blockNumbers[i] = ch.blockNumber;\\\\n            blockHashes[i] = ch.blockHash;\\\\n            nexts[i] = ch.next;\\\\n            claimsCnt[i] = rewardsClaimed[ch.blockNumber];\\\\n            claimed[i] = claims[ch.blockNumber][msg.sender];\\\\n            index = ch.next;\\\\n        }\\\\n        require(index == CHALLENGE_NULL, \\\\\\"Challenges._challengeGetAll(): corrupt list\\\\\\");\\\\n    }\\\\n\\\\n    function _challengeSetIsFull(ChallengeSet storage chs) internal view returns (bool) {\\\\n        return chs.cnt >= MAX_CHALLENGE_CNT;\\\\n    }\\\\n\\\\n    function _challengeSetIsEmpty(ChallengeSet storage chs) internal view returns (bool) {\\\\n        return chs.cnt == 0;\\\\n    }\\\\n\\\\n    // Returns internal index (actual index into the array)\\\\n    function _challengeInsertHead(ChallengeSet storage chs, uint64 blockNumber, bytes32 blockHash) internal returns (uint8) {\\\\n        require(!_challengeSetIsFull(chs), \\\\\\"Challenges: Challenge set is full\\\\\\");\\\\n\\\\n        uint8 index = chs.freeIndex;\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"Challenges: corrupt freeIndex\\\\\\");\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(!ch.valid, \\\\\\"Challenges: corrupt challenge item in freeList\\\\\\");\\\\n        chs.freeIndex = ch.next;\\\\n    \\\\n        ch.blockHash = blockHash;\\\\n        ch.blockNumber = blockNumber;\\\\n        ch.valid = true;\\\\n        ch.prev = CHALLENGE_NULL;\\\\n        ch.next = chs.head;\\\\n        if(chs.head != CHALLENGE_NULL) {\\\\n            Challenge storage head = _challengeGet(chs, chs.head);\\\\n            head.prev = index;\\\\n        }\\\\n        chs.head = index;\\\\n        if(chs.tail == CHALLENGE_NULL) {\\\\n            chs.tail = index;\\\\n        }\\\\n        chs.cnt++;\\\\n    }\\\\n\\\\n    // Returns internal index (actual index into the array)\\\\n    function _challengeInsertTail(ChallengeSet storage chs, uint64 blockNumber, bytes32 blockHash) internal returns (uint8) {\\\\n        require(!_challengeSetIsFull(chs), \\\\\\"Challenges: Challenge set is full\\\\\\");\\\\n\\\\n        uint8 index = chs.freeIndex;\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"Challenges: corrupt freeIndex\\\\\\");\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(!ch.valid, \\\\\\"Challenges: corrupt challenge item in freeList\\\\\\");\\\\n        chs.freeIndex = ch.next;\\\\n    \\\\n        ch.blockHash = blockHash;\\\\n        ch.blockNumber = blockNumber;\\\\n        ch.valid = true;\\\\n        ch.prev = chs.tail;\\\\n        ch.next = CHALLENGE_NULL;\\\\n        if(chs.tail != CHALLENGE_NULL) {\\\\n            Challenge storage tail = _challengeGet(chs, chs.tail);\\\\n            tail.next = index;\\\\n        }\\\\n        chs.tail = index;\\\\n        if(chs.head == CHALLENGE_NULL) {\\\\n            chs.head = index;\\\\n        }\\\\n        chs.cnt++;\\\\n    }\\\\n\\\\n    function _challengeRemove(ChallengeSet storage chs, uint8 index) internal {\\\\n        require(!_challengeSetIsEmpty(chs), \\\\\\"Challenges: Challenge set is empty\\\\\\");\\\\n\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(ch.valid, \\\\\\"Challenges: removing invalid item\\\\\\");\\\\n\\\\n        // Reconnect the double linked list\\\\n        if(ch.prev != CHALLENGE_NULL) {\\\\n            Challenge storage prev = _challengeGet(chs, ch.prev);\\\\n            prev.next = ch.next;\\\\n        }\\\\n        if(ch.next != CHALLENGE_NULL) {\\\\n            Challenge storage next = _challengeGet(chs, ch.next);\\\\n            next.prev = ch.prev;\\\\n        }\\\\n\\\\n        if(index == chs.head) {\\\\n            chs.head = ch.next;\\\\n        }\\\\n\\\\n        if(index == chs.tail) {\\\\n            chs.tail = ch.prev;\\\\n        }\\\\n\\\\n        // Put the removed item back into the free list\\\\n        uint8 freeIndex = chs.freeIndex;\\\\n        require(freeIndex < MAX_CHALLENGE_CNT || freeIndex == CHALLENGE_NULL, \\\\\\"Challenges: corrupt freeIndex\\\\\\");\\\\n        ch.blockHash = 0;\\\\n        ch.blockNumber = 0;\\\\n        ch.valid = false;\\\\n        ch.prev = CHALLENGE_NULL;\\\\n        ch.next = freeIndex;\\\\n        chs.freeIndex = index;\\\\n        chs.cnt--;\\\\n    }\\\\n\\\\n    function _getWalletDifficultyDiscount(bytes32 blockHash, address addr, uint256 balance, uint8 decimals) internal pure returns (uint8) {\\\\n        uint256 h1 = uint256(blockHash);\\\\n        uint256 h2 = uint256(addr);\\\\n\\\\n        uint256 o = h1 ^ h2;\\\\n        uint16 lsb = _findLsb(o);\\\\n        if(lsb == 0) {\\\\n            lsb = 256;\\\\n        } else {\\\\n            lsb--;\\\\n        }\\\\n\\\\n        uint256 ten = 10;\\\\n        uint256 b1 = balance.div(ten ** decimals);\\\\n        uint8 n = 0;\\\\n        if(b1 >= 1) {\\\\n            if(lsb >= 20) {\\\\n                n = 30;\\\\n            } else if(lsb >= 10) {\\\\n                n = 20 + (uint8(lsb) - 10);\\\\n            } else {\\\\n                n = 2 * uint8(lsb);\\\\n            }\\\\n        } else {\\\\n            if(lsb > 10) {\\\\n                n = 10;\\\\n            } else {\\\\n                n = uint8(lsb);\\\\n            }\\\\n        }\\\\n\\\\n        return n;\\\\n    }\\\\n\\\\n   function _getBalanceDifficultyDiscount(uint256 balance, uint8 decimals) internal pure returns (uint8) {\\\\n        uint256 b1 = balance.div(10 ** decimals);\\\\n        require(decimals >= 3, \\\\\\"Unexpected token configuration: decimals less than 3\\\\\\");\\\\n        uint256 b2 = balance.mod(10 ** decimals).div(10 ** (decimals-3));\\\\n\\\\n        uint8 discount;\\\\n        if(b1 >= 1) {\\\\n            if(b1 >= 1000) {\\\\n                discount = 2 * 10 + 10;\\\\n            } else if(b1 >= 500) {\\\\n                discount = 2 * 9 + 10;\\\\n            } else if(b1 >= 200) {\\\\n                discount = 2 * 8 + 10;\\\\n            } else if(b1 >= 100) {\\\\n                discount = 2 * 7 + 10;\\\\n            } else if(b1 >= 50) {\\\\n                discount = 2 * 6 + 10;\\\\n            } else if(b1 >= 20) {\\\\n                discount = 2 * 5 + 10;\\\\n            } else if(b1 >= 10) {\\\\n                discount = 2 * 4 + 10;\\\\n            } else if(b1 >= 5) {\\\\n                discount = 2 * 3 + 10;\\\\n            } else if(b1 >= 3) {\\\\n                discount = 2 * 2 + 10;\\\\n            } else if(b1 >= 2) {\\\\n                discount = 2 * 1 + 10;\\\\n            } else {\\\\n                discount = 2 * 0 + 10;\\\\n            }\\\\n        } else {\\\\n            if(b2 >= 500) {\\\\n                discount = 9;\\\\n            } else if(b2 >= 200) {\\\\n                discount = 8;\\\\n            } else if(b2 >= 100) {\\\\n                discount = 7;\\\\n            } else if(b2 >= 50) {\\\\n                discount = 6;\\\\n            } else if(b2 >= 20) {\\\\n                discount = 5;\\\\n            } else if(b2 >= 10) {\\\\n                discount = 4;\\\\n            } else if(b2 >= 5) {\\\\n                discount = 3;\\\\n            } else if(b2 >= 2) {\\\\n                discount = 2;\\\\n            } else if(b2 >= 1) {\\\\n                discount = 1;\\\\n            } else {\\\\n                discount = 0;\\\\n            }\\\\n        }\\\\n        return discount;\\\\n    }\\\\n\\\\n    function _getRewardTokens(bytes32 blockHash) internal pure returns (uint16 rewardsCnt, uint16 tokens) {\\\\n        uint256 h = uint256(blockHash);\\\\n\\\\n        if(((h >> (256-20)) & 0xFFFFF) == 0x88888) {\\\\n            return (500, 2000);\\\\n        } else if(((h >> (256-16)) & 0xFFFF) == 0x8888) {\\\\n            return (200, 500);\\\\n        } else if(((h >> (256-12)) & 0xFFF) == 0x888) {\\\\n            return (100, 100);\\\\n        } else if(((h >> (256-8)) & 0xFF) == 0x88) {\\\\n            return (50, 20);\\\\n        } else if(((h >> (256-4)) & 0xF) == 0x8) {\\\\n            return (20, 5);\\\\n        } else {\\\\n            return (10, 1);\\\\n        }\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x82a41d4c5e12e35a72cf07a707a904fa0249cb5759cbd6eb44d1fb1d6502e994\\",\\"license\\":\\"MIT\\"},\\"contracts/Lockable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/math/SafeMath.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which provides an ability to locked some functionality for a specified period of time.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `lockable`, which can be applied to your functions to restrict their use to\\\\n * only when the contract is not locked.\\\\n *\\\\n * There are two locking mechanisms available: the manual lock, which needs to be manually unlocked by the owner,\\\\n * and the time lock, which unlocks automatically after the locking period expires.\\\\n */\\\\nabstract contract Lockable is Ownable {\\\\n    using SafeMath for uint;\\\\n\\\\n    bool private _locked;       // manual lock\\\\n    uint private _lockedUntil;  // time lock\\\\n\\\\n    uint public constant MINIMUM_DELAY = 1 hours;\\\\n    uint public constant MAXIMUM_DELAY = 1*365 days;\\\\n\\\\n    event TimeLock(uint lockedUntil);\\\\n    event Lock();\\\\n    event Unlock();\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract to unlocked.\\\\n     */\\\\n    constructor () internal {\\\\n        _locked = false;\\\\n        _lockedUntil = 0;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called while locked.\\\\n     */\\\\n    modifier whenNotLocked() {\\\\n        require(!_locked, \\\\\\"the contract is locked manually\\\\\\");\\\\n        require(getBlockTimestamp() >= _lockedUntil, \\\\\\"contract is locked by a time lock\\\\\\");\\\\n\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called while unlocked.\\\\n     */\\\\n    modifier whenLocked() {\\\\n        require(_locked, \\\\\\"the contract is not locked manually\\\\\\");\\\\n        require(getBlockTimestamp() < _lockedUntil, \\\\\\"contract is lnot ocked by a time lock\\\\\\");\\\\n\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Activates the manual lock, that can only be unlocked manually\\\\n     */\\\\n    function lock() public onlyOwner {\\\\n        _locked = true;\\\\n\\\\n        emit Lock();\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Deactivates the manual lock\\\\n     */\\\\n    function unlock() public onlyOwner {\\\\n        _locked = false;\\\\n\\\\n        emit Unlock();\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Activates the time lock, that will automatically expire after delay\\\\n     */\\\\n    function timeLock(uint delay_) public onlyOwner {\\\\n        require(delay_ >= MINIMUM_DELAY, \\\\\\"lock: Delay must exceed minimum delay.\\\\\\");\\\\n        require(delay_ <= MAXIMUM_DELAY, \\\\\\"lock: Delay must not exceed maximum delay.\\\\\\");\\\\n        uint lockedUntil = getBlockTimestamp().add(delay_);\\\\n        require(lockedUntil >= _lockedUntil + MINIMUM_DELAY, \\\\\\"lock: Delay must extend the current time lock at least by 1 hour.\\\\\\");\\\\n        _lockedUntil = lockedUntil;\\\\n\\\\n        emit TimeLock(_lockedUntil);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the status of both manual and time locks.\\\\n     */\\\\n    function lockStatus() public view returns (bool locked, uint lockedUntil) {\\\\n        lockedUntil = _lockedUntil > getBlockTimestamp() ? _lockedUntil : 0;\\\\n        locked = _locked;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the timestamp of the currect block.\\\\n     */\\\\n    function getBlockTimestamp() internal view returns (uint) {\\\\n        // solium-disable-next-line security/no-block-members\\\\n        return block.timestamp;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x57e9a894580e5356a9aef6e077b7a30bf7792ab2ad926831e2221c6edd1cac25\\",\\"license\\":\\"MIT\\"},\\"contracts/RareToken.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.7.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Pausable.sol\\\\\\";\\\\nimport \\\\\\"./Lockable.sol\\\\\\";\\\\nimport \\\\\\"./Challenges.sol\\\\\\";\\\\nimport \\\\\\"./Balances.sol\\\\\\";\\\\n\\\\nimport \\\\\\"hardhat/console.sol\\\\\\";\\\\n\\\\ncontract RareToken is ERC20, Pausable, Lockable, Challenges, Balances {\\\\n\\\\n    // The lucky number determines the premium challenges\\\\n    uint8 public constant LUCKY_NUMBER = 8;\\\\n\\\\n    uint64 public startingBlockNumber;\\\\n    uint64 public nextChallengeBlockNumber;\\\\n    uint64 public minedChallenges;\\\\n    ChallengeSet private basicChallenges;\\\\n    ChallengeSet private premiumChallenges;\\\\n\\\\n    // Mapping blockNumber to rewardsClaimed\\\\n    mapping (uint64 => uint16) private _rewardsClaimed;\\\\n\\\\n    // Mapping blockNumber to address to claimNo\\\\n    mapping (uint64 => mapping (address => bool)) private _claims;\\\\n\\\\n    event AddChallenge(uint64 indexed blockNumber, uint256 challenge, bool premium, uint16 rewardsCnt, uint16 tokens);\\\\n    event Claim(uint64 indexed blockNumber, address indexed miner, uint256 solution, uint16 claimNo, uint8 generalDifficulty, uint8 adjustedDifficulty, uint16 solvedDifficulty);\\\\n\\\\n    constructor(string memory name, string memory symbol, uint initSupply) ERC20(name, symbol) {\\\\n        pause();\\\\n\\\\n        // Mint initial supply to msg.sender\\\\n        _mint(msg.sender, initSupply * 10**uint(decimals()));\\\\n\\\\n        _challengeSetInit(basicChallenges);\\\\n        _challengeSetInit(premiumChallenges);\\\\n\\\\n        // startingBlockNumber = uint64(block.number);\\\\n        // startingBlockNumber = uint64(block.number) > MAX_CHALLENGE_CNT ? uint64(block.number) - MAX_CHALLENGE_CNT : 0;\\\\n        startingBlockNumber = uint64(block.number) > 200 ? uint64(block.number) - 200 : 0;\\\\n        nextChallengeBlockNumber = startingBlockNumber;\\\\n    }\\\\n\\\\n    function pause() public onlyOwner whenNotLocked {\\\\n        super._pause();\\\\n    }\\\\n\\\\n    function unpause() public onlyOwner whenNotLocked {\\\\n        super._unpause();\\\\n    }\\\\n\\\\n    function renounceOwnership() public virtual override whenNotLocked {\\\\n        super.renounceOwnership();\\\\n    }\\\\n\\\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override whenNotPaused {\\\\n        super._transfer(sender, recipient, amount);\\\\n        _balanceUpdate(sender, balanceOf(sender));\\\\n    }\\\\n\\\\n    function _getNextChallengeBlockNumber() private returns (uint64) {\\\\n        uint64 blockNumber = uint64(block.number);\\\\n        if(blockNumber > MAX_CHALLENGE_CNT && nextChallengeBlockNumber < blockNumber - MAX_CHALLENGE_CNT) {\\\\n            nextChallengeBlockNumber = blockNumber - MAX_CHALLENGE_CNT;\\\\n        }\\\\n        return nextChallengeBlockNumber;\\\\n    }\\\\n\\\\n    function _getMineableChallenges() private view returns (uint64) {\\\\n        uint64 blockNumber = uint64(block.number);\\\\n\\\\n        require(blockNumber >= startingBlockNumber, \\\\\\"Corrupt block number\\\\\\");\\\\n\\\\n        uint64 cnt = (blockNumber - startingBlockNumber + 1) / BLOCKS_PER_CHALLENGE;\\\\n\\\\n        require(cnt >= minedChallenges, \\\\\\"Corrupt number of mined challenges\\\\\\");\\\\n\\\\n        uint64 n = cnt - minedChallenges;\\\\n        \\\\n        return n;\\\\n    }\\\\n\\\\n    function getStatus() public view returns (uint64 blockNumber, address walletAddress, uint64 startingBlockNumber, uint64 nextChallengeBlockNumber, uint64 minedChallenges, uint8 blocksPerChallenge) {\\\\n        blockNumber = uint64(block.number);\\\\n        walletAddress = msg.sender;\\\\n        startingBlockNumber = this.startingBlockNumber();\\\\n        nextChallengeBlockNumber = this.nextChallengeBlockNumber();\\\\n        minedChallenges = this.minedChallenges();\\\\n        blocksPerChallenge = BLOCKS_PER_CHALLENGE;\\\\n    }\\\\n\\\\n    function readBasicChallenges() public view returns (uint8 cnt, uint8[] memory indexes, uint64[] memory blockNumbers, bytes32[] memory blockHashes, uint8[] memory nexts, uint16[] memory claimsCnt, bool[] memory claimed) {\\\\n        return _challengeGetAll(basicChallenges, _rewardsClaimed, _claims);\\\\n    }\\\\n\\\\n    function readPremiumChallenges() public view returns (uint8 cnt, uint8[] memory indexes, uint64[] memory blockNumbers, bytes32[] memory blockHashes, uint8[] memory nexts, uint16[] memory claimsCnt, bool[] memory claimed) {\\\\n        return _challengeGetAll(premiumChallenges, _rewardsClaimed, _claims);\\\\n    }\\\\n\\\\n    function addChallenges(uint8 limit) public whenNotPaused returns (uint8) {\\\\n        if(!(basicChallenges.cnt < MAX_CHALLENGE_CNT && premiumChallenges.cnt < MAX_CHALLENGE_CNT)) {\\\\n            // No room for more challenges\\\\n            return 0;\\\\n        }\\\\n\\\\n        uint64 blockNumber = uint64(block.number);\\\\n\\\\n        uint64 mineableCnt = _getMineableChallenges();\\\\n\\\\n        uint8 lmt = limit;\\\\n        if(mineableCnt < uint64(lmt)) {\\\\n            lmt = uint8(mineableCnt);\\\\n        }\\\\n\\\\n        uint8 i;\\\\n        uint64 bn = _getNextChallengeBlockNumber();\\\\n        if(bn < blockNumber - mineableCnt) {\\\\n            bn = blockNumber - mineableCnt;\\\\n        }\\\\n        for(i = 0; i < lmt && bn < blockNumber && basicChallenges.cnt < MAX_CHALLENGE_CNT && premiumChallenges.cnt < MAX_CHALLENGE_CNT; i++) {\\\\n\\\\n            bytes32 bh = blockhash(bn + i);\\\\n            require(uint256(bh) != 0, \\\\\\"Missing blockhash number\\\\\\");\\\\n\\\\n            (uint16 rewardsCnt, uint16 tokens) = _getRewardTokens(bh);\\\\n\\\\n            if((uint8(bh[0]) >> 4) == LUCKY_NUMBER) {\\\\n                emit AddChallenge(blockNumber, uint256(bh), true, rewardsCnt, tokens);\\\\n                _challengeInsertTail(premiumChallenges, bn + i, bh);\\\\n            } else {\\\\n                emit AddChallenge(blockNumber, uint256(bh), false, rewardsCnt, tokens);\\\\n                _challengeInsertTail(basicChallenges, bn + i, bh);\\\\n            }\\\\n\\\\n        }\\\\n\\\\n        nextChallengeBlockNumber += i;\\\\n        minedChallenges += i;\\\\n\\\\n        return i;\\\\n    }\\\\n\\\\n    function _retrieveChallenge(uint64 blockNumber) internal view returns (Challenge memory ch, bool premium, uint8 generalDifficulty) {\\\\n        premium = false;\\\\n        uint8 chi;\\\\n        (chi, generalDifficulty) = _challengeFind(basicChallenges, blockNumber);\\\\n        if(chi == CHALLENGE_NULL) {\\\\n            (chi, generalDifficulty) = _challengeFind(premiumChallenges, blockNumber);\\\\n            premium = true;\\\\n        }\\\\n        require(chi != CHALLENGE_NULL, \\\\\\"Challenge with this blockNumber doesn\'t exist or has been claimed already\\\\\\");\\\\n        ch = _challengeGet(premium ? premiumChallenges : basicChallenges, chi);\\\\n\\\\n        require(ch.blockNumber == blockNumber, \\\\\\"Corrupt blockNumber in challenge\\\\\\");\\\\n    }\\\\n\\\\n    function verifySolution(uint64 blockNumber, uint256 solution) public view whenNotPaused returns (uint16 solvedDifficulty) {\\\\n        (Challenge memory ch, bool premium, uint8 generalDifficulty) = _retrieveChallenge(blockNumber);\\\\n\\\\n        bytes32 digest = keccak256(abi.encodePacked(uint256(ch.blockNumber) ^ uint256(ch.blockHash) ^ uint256(msg.sender), solution));\\\\n\\\\n        solvedDifficulty = 256 - _findHsb(uint256(digest));\\\\n    }\\\\n\\\\n    function _getAdjustedDifficulty(uint64 blockNumber, uint8 generalDifficulty, bytes32 blockHash) private view returns (uint8 adjustedDifficulty) {\\\\n        uint256 registeredBalance = _balanceFind(blockNumber);\\\\n\\\\n        uint8 decimals = super.decimals();\\\\n        uint8 walletDiscount = _getWalletDifficultyDiscount(blockHash, msg.sender, registeredBalance, decimals);\\\\n        uint8 balanceDiscount = _getBalanceDifficultyDiscount(registeredBalance, decimals);\\\\n\\\\n        // Calculate Adjusted Difficulty\\\\n        require(MIN_CHALLENGE_DIFFICULTY <= generalDifficulty && generalDifficulty <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"verifyClaim(): generalDifficulty out of range\\\\\\");\\\\n        uint8 totalDiscount = walletDiscount + balanceDiscount;\\\\n        adjustedDifficulty = generalDifficulty >= totalDiscount ? generalDifficulty - totalDiscount : 0;\\\\n        if(adjustedDifficulty < MIN_CHALLENGE_DIFFICULTY) {\\\\n            adjustedDifficulty = MIN_CHALLENGE_DIFFICULTY;\\\\n        }\\\\n        require(MIN_CHALLENGE_DIFFICULTY <= adjustedDifficulty && adjustedDifficulty <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"verifyClaim(): adjustedDifficulty out of range\\\\\\");\\\\n    }\\\\n    \\\\n    function readRegisteredBalances() public view returns (uint8 decimals, uint8 cnt, uint256[] memory balances, uint64[] memory blockNumbers) {\\\\n        decimals = super.decimals();\\\\n        return _balanceGetAll(decimals);\\\\n    }\\\\n\\\\n    function registerBalance() public whenNotPaused {\\\\n        uint256 balance = balanceOf(msg.sender);\\\\n        _balanceRegister(balance);\\\\n    }\\\\n\\\\n    // Reasons\\\\n    // 0 - satisfies all criteria, at this moment, to claim the tokens\\\\n    // 1 - blockNumber does not exist or has no live challenge assigned right now\\\\n    // 2 - solvedDifficulty doesn\'t safisfy the current requirements\\\\n    // 3 - this challenge has already been claimed by this address\\\\n    // 4 - all available rewards have been already claimed\\\\n    function verifyClaim(uint64 blockNumber, uint256 solution) public view whenNotPaused returns (uint256 reward, uint8 reason, bool premium, uint16 rewardsCnt, uint8 generalDifficulty, uint8 adjustedDifficulty, uint16 solvedDifficulty) {\\\\n        Challenge memory ch;\\\\n        \\\\n        // Retrieve the challenge information\\\\n        (ch, premium, generalDifficulty) = _retrieveChallenge(blockNumber);\\\\n\\\\n        require(ch.valid, \\\\\\"Invalid challenge record\\\\\\");\\\\n\\\\n        // Get adjustd difficulty\\\\n        adjustedDifficulty = _getAdjustedDifficulty(blockNumber, generalDifficulty, ch.blockHash);\\\\n\\\\n        // Get actual solved difficulty\\\\n        solvedDifficulty = verifySolution(blockNumber, solution);\\\\n\\\\n        // Calculate Reward Tokens\\\\n        if(solvedDifficulty >= adjustedDifficulty) {\\\\n            if(_claims[blockNumber][msg.sender]) {\\\\n                reward = 0;\\\\n                reason = 3;\\\\n            } else {\\\\n                uint16 tokens;\\\\n                (rewardsCnt, tokens) = _getRewardTokens(ch.blockHash);\\\\n                uint16 claimNo = _rewardsClaimed[blockNumber];\\\\n                if(claimNo < rewardsCnt) {\\\\n                    uint8 decimals = super.decimals();\\\\n                    reward = tokens * (10 ** decimals);\\\\n                    reason = 0;\\\\n                } else {\\\\n                    reward = 0;\\\\n                    reason = 4;\\\\n                }\\\\n            }\\\\n        } else {\\\\n            reward = 0;\\\\n            reason = 2;\\\\n        }\\\\n    }\\\\n\\\\n    function claimReward(uint64 blockNumber, uint256 solution) public whenNotPaused returns (uint256 reward, uint8 reason, bool premium, uint16 claimNo) {\\\\n        uint16 rewardsCnt;\\\\n        uint8 generalDifficulty;\\\\n        uint8 adjustedDifficulty;\\\\n        uint16 solvedDifficulty;\\\\n\\\\n        (reward, reason, premium, rewardsCnt, generalDifficulty, adjustedDifficulty, solvedDifficulty) = verifyClaim(blockNumber, solution);\\\\n\\\\n        require(reason == 0, \\\\\\"The claim verification failed\\\\\\");\\\\n\\\\n        // Mint the reward to msg.sender\\\\n        _mint(msg.sender, reward);\\\\n\\\\n        // Update claims counter\\\\n        claimNo = _rewardsClaimed[blockNumber];\\\\n\\\\n        emit Claim(blockNumber, msg.sender, solution, claimNo, generalDifficulty, adjustedDifficulty, solvedDifficulty);\\\\n\\\\n        // Extra check that we don\'t have some unexpected leak\\\\n        require(claimNo < 500, \\\\\\"claim count is too big\\\\\\");\\\\n        require(claimNo < rewardsCnt, \\\\\\"claim count is too big\\\\\\");\\\\n        uint16 claimsCnt = claimNo + 1;\\\\n        _rewardsClaimed[blockNumber] = claimsCnt;\\\\n\\\\n        // Update claim addresses\\\\n        _claims[blockNumber][msg.sender] = true;\\\\n\\\\n        // Extra check that we don\'t have some unexpected leak\\\\n        require(reward > 0, \\\\\\"Invalid reward amount\\\\\\");\\\\n        require(reward <= 2000 * (10 ** super.decimals()), \\\\\\"Invalid reward amount too big\\\\\\");\\\\n\\\\n        if(claimsCnt >= rewardsCnt) {\\\\n            // All rewards were claimed, remove challenge from the set\\\\n            ChallengeSet storage chs = premium ? premiumChallenges : basicChallenges;\\\\n            (uint8 index, uint8 generalDifficulty2) = _challengeFind(chs, blockNumber);\\\\n            require(index != CHALLENGE_NULL, \\\\\\"Corrupt challenge records\\\\\\");\\\\n            _challengeRemove(chs, index);\\\\n\\\\n            // You are the lucky miner, why not pay for a new challenge\\\\n            addChallenges(1);\\\\n        }\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x03a8f711d4bc31c4690e3697fa1c79843d6badf594aefdc8d9582a811e11618d\\",\\"license\\":\\"MIT\\"},\\"contracts/Utils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.7.0;\\\\n\\\\ncontract Utils {\\\\n\\\\n    // finds the highest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findHsb of 0 returns 0\\\\n    //      findHsb of 1 returns 1\\\\n    //      findHsb of 2 returns 2\\\\n    //      findHsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findHsb(uint256 n) internal pure returns (uint16) {\\\\n        uint16 from = 0;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if(n <= mask) {\\\\n                to = middle;\\\\n            } else {\\\\n                from = middle+1;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n    // finds the lowest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findLsb of 0 returns 0\\\\n    //      findLsb of 1 returns 1\\\\n    //      findLsb of 2 returns 2\\\\n    //      findLsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findLsb(uint256 n) internal pure returns (uint16) {\\\\n        if(n == 0) {\\\\n            return 0;\\\\n        }\\\\n        uint16 from = 1;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if((n & mask) == 0) {\\\\n                from = middle+1;\\\\n            } else {\\\\n                to = middle;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x93e68502ab7c3bee84c9c01ba31bfb5846c7c379d1d1b55e79f20e877ae7e99a\\",\\"license\\":\\"MIT\\"},\\"hardhat/console.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity >= 0.4.22 <0.9.0;\\\\n\\\\nlibrary console {\\\\n\\\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\\\n\\\\n\\\\tfunction _sendLogPayload(bytes memory payload) private view {\\\\n\\\\t\\\\tuint256 payloadLength = payload.length;\\\\n\\\\t\\\\taddress consoleAddress = CONSOLE_ADDRESS;\\\\n\\\\t\\\\tassembly {\\\\n\\\\t\\\\t\\\\tlet payloadStart := add(payload, 32)\\\\n\\\\t\\\\t\\\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\\\n\\\\t\\\\t}\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log() internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log()\\\\\\"));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logInt(int p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(int)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logUint(uint p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logString(string memory p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBool(bool p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logAddress(address p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes(bytes memory p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes1(bytes1 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes1)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes2(bytes2 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes2)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes3(bytes3 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes3)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes4(bytes4 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes4)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes5(bytes5 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes5)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes6(bytes6 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes6)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes7(bytes7 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes7)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes8(bytes8 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes8)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes9(bytes9 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes9)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes10(bytes10 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes10)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes11(bytes11 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes11)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes12(bytes12 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes12)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes13(bytes13 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes13)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes14(bytes14 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes14)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes15(bytes15 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes15)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes16(bytes16 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes16)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes17(bytes17 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes17)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes18(bytes18 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes18)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes19(bytes19 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes19)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes20(bytes20 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes20)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes21(bytes21 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes21)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes22(bytes22 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes22)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes23(bytes23 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes23)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes24(bytes24 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes24)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes25(bytes25 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes25)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes26(bytes26 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes26)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes27(bytes27 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes27)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes28(bytes28 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes28)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes29(bytes29 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes29)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes30(bytes30 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes30)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes31(bytes31 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes31)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction logBytes32(bytes32 p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bytes32)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address)\\\\\\", p0));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address)\\\\\\", p0, p1));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, uint p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,uint)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, string memory p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,string)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, bool p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,bool)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, address p2) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,address)\\\\\\", p0, p1, p2));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,uint,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,string,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,bool,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(uint,address,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,uint,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,string,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,bool,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(string,address,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,uint,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,string,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,bool,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(bool,address,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,uint,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,string,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,bool,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,uint,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,uint,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,uint,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,uint,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,string,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,string,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,string,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,string,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,bool,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,bool,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,bool,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,bool,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,address,uint)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,address,string)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,address,bool)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n\\\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\\\n\\\\t\\\\t_sendLogPayload(abi.encodeWithSignature(\\\\\\"log(address,address,address,address)\\\\\\", p0, p1, p2, p3));\\\\n\\\\t}\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"","deployedBytecode":"","devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"lock()":{"details":"Activates the manual lock, that can only be unlocked manually"},"lockStatus()":{"details":"Returns the status of both manual and time locks."},"name()":{"details":"Returns the name of the token."},"owner()":{"details":"Returns the address of the current owner."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"timeLock(uint256)":{"details":"Activates the time lock, that will automatically expire after delay"},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"unlock()":{"details":"Deactivates the manual lock"}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":481,"contract":"contracts/RareToken.sol:RareToken","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":487,"contract":"contracts/RareToken.sol:RareToken","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":489,"contract":"contracts/RareToken.sol:RareToken","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":491,"contract":"contracts/RareToken.sol:RareToken","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":493,"contract":"contracts/RareToken.sol:RareToken","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"},{"astId":495,"contract":"contracts/RareToken.sol:RareToken","label":"_decimals","offset":0,"slot":"5","type":"t_uint8"},{"astId":1086,"contract":"contracts/RareToken.sol:RareToken","label":"_paused","offset":1,"slot":"5","type":"t_bool"},{"astId":7,"contract":"contracts/RareToken.sol:RareToken","label":"_owner","offset":2,"slot":"5","type":"t_address"},{"astId":2912,"contract":"contracts/RareToken.sol:RareToken","label":"_locked","offset":22,"slot":"5","type":"t_bool"},{"astId":2914,"contract":"contracts/RareToken.sol:RareToken","label":"_lockedUntil","offset":0,"slot":"6","type":"t_uint256"},{"astId":1181,"contract":"contracts/RareToken.sol:RareToken","label":"_balanceRecords","offset":0,"slot":"7","type":"t_mapping(t_address,t_struct(BalanceRecords)1177_storage)"},{"astId":3113,"contract":"contracts/RareToken.sol:RareToken","label":"startingBlockNumber","offset":0,"slot":"8","type":"t_uint64"},{"astId":3115,"contract":"contracts/RareToken.sol:RareToken","label":"nextChallengeBlockNumber","offset":8,"slot":"8","type":"t_uint64"},{"astId":3117,"contract":"contracts/RareToken.sol:RareToken","label":"minedChallenges","offset":16,"slot":"8","type":"t_uint64"},{"astId":3119,"contract":"contracts/RareToken.sol:RareToken","label":"basicChallenges","offset":0,"slot":"9","type":"t_struct(ChallengeSet)1519_storage"},{"astId":3121,"contract":"contracts/RareToken.sol:RareToken","label":"premiumChallenges","offset":0,"slot":"210","type":"t_struct(ChallengeSet)1519_storage"},{"astId":3125,"contract":"contracts/RareToken.sol:RareToken","label":"_rewardsClaimed","offset":0,"slot":"411","type":"t_mapping(t_uint64,t_uint16)"},{"astId":3131,"contract":"contracts/RareToken.sol:RareToken","label":"_claims","offset":0,"slot":"412","type":"t_mapping(t_uint64,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(BalanceRecord)1170_storage)4_storage":{"base":"t_struct(BalanceRecord)1170_storage","encoding":"inplace","label":"struct Balances.BalanceRecord[4]","numberOfBytes":"256"},"t_array(t_struct(Challenge)1506_storage)100_storage":{"base":"t_struct(Challenge)1506_storage","encoding":"inplace","label":"struct Challenges.Challenge[100]","numberOfBytes":"6400"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_struct(BalanceRecords)1177_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct Balances.BalanceRecords)","numberOfBytes":"32","value":"t_struct(BalanceRecords)1177_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint64,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_uint64,t_uint16)":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => uint16)","numberOfBytes":"32","value":"t_uint16"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(BalanceRecord)1170_storage":{"encoding":"inplace","label":"struct Balances.BalanceRecord","members":[{"astId":1167,"contract":"contracts/RareToken.sol:RareToken","label":"balance","offset":0,"slot":"0","type":"t_uint256"},{"astId":1169,"contract":"contracts/RareToken.sol:RareToken","label":"blockNumber","offset":0,"slot":"1","type":"t_uint64"}],"numberOfBytes":"64"},"t_struct(BalanceRecords)1177_storage":{"encoding":"inplace","label":"struct Balances.BalanceRecords","members":[{"astId":1174,"contract":"contracts/RareToken.sol:RareToken","label":"records","offset":0,"slot":"0","type":"t_array(t_struct(BalanceRecord)1170_storage)4_storage"},{"astId":1176,"contract":"contracts/RareToken.sol:RareToken","label":"recordsCnt","offset":0,"slot":"8","type":"t_uint8"}],"numberOfBytes":"288"},"t_struct(Challenge)1506_storage":{"encoding":"inplace","label":"struct Challenges.Challenge","members":[{"astId":1495,"contract":"contracts/RareToken.sol:RareToken","label":"blockHash","offset":0,"slot":"0","type":"t_bytes32"},{"astId":1497,"contract":"contracts/RareToken.sol:RareToken","label":"blockNumber","offset":0,"slot":"1","type":"t_uint64"},{"astId":1499,"contract":"contracts/RareToken.sol:RareToken","label":"index","offset":8,"slot":"1","type":"t_uint8"},{"astId":1501,"contract":"contracts/RareToken.sol:RareToken","label":"valid","offset":9,"slot":"1","type":"t_bool"},{"astId":1503,"contract":"contracts/RareToken.sol:RareToken","label":"prev","offset":10,"slot":"1","type":"t_uint8"},{"astId":1505,"contract":"contracts/RareToken.sol:RareToken","label":"next","offset":11,"slot":"1","type":"t_uint8"}],"numberOfBytes":"64"},"t_struct(ChallengeSet)1519_storage":{"encoding":"inplace","label":"struct Challenges.ChallengeSet","members":[{"astId":1510,"contract":"contracts/RareToken.sol:RareToken","label":"ch","offset":0,"slot":"0","type":"t_array(t_struct(Challenge)1506_storage)100_storage"},{"astId":1512,"contract":"contracts/RareToken.sol:RareToken","label":"cnt","offset":0,"slot":"200","type":"t_uint8"},{"astId":1514,"contract":"contracts/RareToken.sol:RareToken","label":"freeIndex","offset":1,"slot":"200","type":"t_uint8"},{"astId":1516,"contract":"contracts/RareToken.sol:RareToken","label":"head","offset":2,"slot":"200","type":"t_uint8"},{"astId":1518,"contract":"contracts/RareToken.sol:RareToken","label":"tail","offset":3,"slot":"200","type":"t_uint8"}],"numberOfBytes":"6432"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}}}')},153:function(e,n,t){e.exports=t(270)},158:function(e,n,t){},159:function(e,n,t){},162:function(e,n){},173:function(e,n){},175:function(e,n){},185:function(e,n){},187:function(e,n){},205:function(e,n){},270:function(e,n,t){"use strict";t.r(n);var a=t(0),i=t.n(a),o=t(43),r=t.n(o),s=(t(158),t(159),t(2)),d=t.n(s),b=t(40),l=t(17),c=t(15),u=t(152),f=t(34),p=t(140),g=t.n(p),m=t(5),y=t(6),h=t(13),v=t(11),w=t(8),_=t(9),L=t(27),k=function(e){Object(_.a)(t,e);var n=Object(w.a)(t);function t(e){return Object(m.a)(this,t),n.call(this,T,S,e)}return Object(y.a)(t,[{key:"deploy",value:function(e){return Object(h.a)(Object(v.a)(t.prototype),"deploy",this).call(this,e||{})}},{key:"getDeployTransaction",value:function(e){return Object(h.a)(Object(v.a)(t.prototype),"getDeployTransaction",this).call(this,e||{})}},{key:"attach",value:function(e){return Object(h.a)(Object(v.a)(t.prototype),"attach",this).call(this,e)}},{key:"connect",value:function(e){return Object(h.a)(Object(v.a)(t.prototype),"connect",this).call(this,e)}}],[{key:"connect",value:function(e,n){return new L.a(e,T,n)}}]),t}(L.b),T=[{inputs:[],name:"BALANCE_RECORDS_CNT",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"}],S="0x6080604052348015600f57600080fd5b5060848061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633f5c9a2b14602d575b600080fd5b60336049565b6040805160ff9092168252519081900360200190f35b60048156fea2646970667358221220631350fccb2468a1d4ceb4ed08f6c1151d317fd0a23cba94322dee876ba16acf64736f6c63430007030033",C=function(e){Object(_.a)(t,e);var n=Object(w.a)(t);function t(e){return Object(m.a)(this,t),n.call(this,E,P,e)}return Object(y.a)(t,[{key:"deploy",value:function(e){return Object(h.a)(Object(v.a)(t.prototype),"deploy",this).call(this,e||{})}},{key:"getDeployTransaction",value:function(e){return Object(h.a)(Object(v.a)(t.prototype),"getDeployTransaction",this).call(this,e||{})}},{key:"attach",value:function(e){return Object(h.a)(Object(v.a)(t.prototype),"attach",this).call(this,e)}},{key:"connect",value:function(e){return Object(h.a)(Object(v.a)(t.prototype),"connect",this).call(this,e)}}],[{key:"connect",value:function(e,n){return new L.a(e,E,n)}}]),t}(L.b),E=[{inputs:[],name:"BLOCKS_PER_CHALLENGE",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"CHALLENGE_DIFFICULTY_STEP",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"CHALLENGE_NULL",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_CHALLENGE_CNT",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_CHALLENGE_DIFFICULTY",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MIN_CHALLENGE_DIFFICULTY",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"}],P="0x608060405234801561001057600080fd5b5060e28061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610605a5760003560e01c80630bf4330914605f578063479e92c814607b578063504b36621460815780637fb01232146087578063a215776714608d578063c28bd11c146087575b600080fd5b60656093565b6040805160ff9092168252519081900360200190f35b60656098565b6065609d565b606560a2565b606560a7565b60da81565b601481565b606481565b600281565b60ff8156fea2646970667358221220bb38098fd06732860517c9dc4dda87d2fdc67e6d81e53f2a7fd6d575182352cb64736f6c63430007030033",x=t(142),N=function(e){Object(_.a)(t,e);var n=Object(w.a)(t);function t(e){return Object(m.a)(this,t),n.call(this,W,O,e)}return Object(y.a)(t,[{key:"deploy",value:function(e,n,a,i){return Object(h.a)(Object(v.a)(t.prototype),"deploy",this).call(this,e,n,a,i||{})}},{key:"getDeployTransaction",value:function(e,n,a,i){return Object(h.a)(Object(v.a)(t.prototype),"getDeployTransaction",this).call(this,e,n,a,i||{})}},{key:"attach",value:function(e){return Object(h.a)(Object(v.a)(t.prototype),"attach",this).call(this,e)}},{key:"connect",value:function(e){return Object(h.a)(Object(v.a)(t.prototype),"connect",this).call(this,e)}}],[{key:"connect",value:function(e,n){return new L.a(e,W,n)}}]),t}(L.b),W=[{inputs:[{internalType:"string",name:"name",type:"string"},{internalType:"string",name:"symbol",type:"string"},{internalType:"uint256",name:"initSupply",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint64",name:"blockNumber",type:"uint64"},{indexed:!1,internalType:"uint256",name:"challenge",type:"uint256"},{indexed:!1,internalType:"bool",name:"premium",type:"bool"},{indexed:!1,internalType:"uint16",name:"rewardsCnt",type:"uint16"},{indexed:!1,internalType:"uint16",name:"tokens",type:"uint16"}],name:"AddChallenge",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint64",name:"blockNumber",type:"uint64"},{indexed:!0,internalType:"address",name:"miner",type:"address"},{indexed:!1,internalType:"uint256",name:"solution",type:"uint256"},{indexed:!1,internalType:"uint16",name:"claimNo",type:"uint16"},{indexed:!1,internalType:"uint8",name:"generalDifficulty",type:"uint8"},{indexed:!1,internalType:"uint8",name:"adjustedDifficulty",type:"uint8"},{indexed:!1,internalType:"uint16",name:"solvedDifficulty",type:"uint16"}],name:"Claim",type:"event"},{anonymous:!1,inputs:[],name:"Lock",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"lockedUntil",type:"uint256"}],name:"TimeLock",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},{anonymous:!1,inputs:[],name:"Unlock",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"},{inputs:[],name:"BALANCE_RECORDS_CNT",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"BLOCKS_PER_CHALLENGE",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"CHALLENGE_DIFFICULTY_STEP",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"CHALLENGE_NULL",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"LUCKY_NUMBER",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAXIMUM_DELAY",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_CHALLENGE_CNT",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_CHALLENGE_DIFFICULTY",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MINIMUM_DELAY",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"MIN_CHALLENGE_DIFFICULTY",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint8",name:"limit",type:"uint8"}],name:"addChallenges",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint64",name:"blockNumber",type:"uint64"},{internalType:"uint256",name:"solution",type:"uint256"}],name:"claimReward",outputs:[{internalType:"uint256",name:"reward",type:"uint256"},{internalType:"uint8",name:"reason",type:"uint8"},{internalType:"bool",name:"premium",type:"bool"},{internalType:"uint16",name:"claimNo",type:"uint16"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"getStatus",outputs:[{internalType:"uint64",name:"blockNumber",type:"uint64"},{internalType:"address",name:"walletAddress",type:"address"},{internalType:"uint64",name:"startingBlockNumber",type:"uint64"},{internalType:"uint64",name:"nextChallengeBlockNumber",type:"uint64"},{internalType:"uint64",name:"minedChallenges",type:"uint64"},{internalType:"uint8",name:"blocksPerChallenge",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"lock",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"lockStatus",outputs:[{internalType:"bool",name:"locked",type:"bool"},{internalType:"uint256",name:"lockedUntil",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"minedChallenges",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"nextChallengeBlockNumber",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"readBasicChallenges",outputs:[{internalType:"uint8",name:"cnt",type:"uint8"},{internalType:"uint8[]",name:"indexes",type:"uint8[]"},{internalType:"uint64[]",name:"blockNumbers",type:"uint64[]"},{internalType:"bytes32[]",name:"blockHashes",type:"bytes32[]"},{internalType:"uint8[]",name:"nexts",type:"uint8[]"},{internalType:"uint16[]",name:"claimsCnt",type:"uint16[]"},{internalType:"bool[]",name:"claimed",type:"bool[]"}],stateMutability:"view",type:"function"},{inputs:[],name:"readPremiumChallenges",outputs:[{internalType:"uint8",name:"cnt",type:"uint8"},{internalType:"uint8[]",name:"indexes",type:"uint8[]"},{internalType:"uint64[]",name:"blockNumbers",type:"uint64[]"},{internalType:"bytes32[]",name:"blockHashes",type:"bytes32[]"},{internalType:"uint8[]",name:"nexts",type:"uint8[]"},{internalType:"uint16[]",name:"claimsCnt",type:"uint16[]"},{internalType:"bool[]",name:"claimed",type:"bool[]"}],stateMutability:"view",type:"function"},{inputs:[],name:"readRegisteredBalances",outputs:[{internalType:"uint8",name:"decimals",type:"uint8"},{internalType:"uint8",name:"cnt",type:"uint8"},{internalType:"uint256[]",name:"balances",type:"uint256[]"},{internalType:"uint64[]",name:"blockNumbers",type:"uint64[]"}],stateMutability:"view",type:"function"},{inputs:[],name:"registerBalance",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"startingBlockNumber",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"delay_",type:"uint256"}],name:"timeLock",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"unlock",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint64",name:"blockNumber",type:"uint64"},{internalType:"uint256",name:"solution",type:"uint256"}],name:"verifyClaim",outputs:[{internalType:"uint256",name:"reward",type:"uint256"},{internalType:"uint8",name:"reason",type:"uint8"},{internalType:"bool",name:"premium",type:"bool"},{internalType:"uint16",name:"rewardsCnt",type:"uint16"},{internalType:"uint8",name:"generalDifficulty",type:"uint8"},{internalType:"uint8",name:"adjustedDifficulty",type:"uint8"},{internalType:"uint16",name:"solvedDifficulty",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint64",name:"blockNumber",type:"uint64"},{internalType:"uint256",name:"solution",type:"uint256"}],name:"verifySolution",outputs:[{internalType:"uint16",name:"solvedDifficulty",type:"uint16"}],stateMutability:"view",type:"function"}],O="",R=function(e){Object(_.a)(t,e);var n=Object(w.a)(t);function t(e){return Object(m.a)(this,t),n.call(this,M,A,e)}return Object(y.a)(t,[{key:"deploy",value:function(e){return Object(h.a)(Object(v.a)(t.prototype),"deploy",this).call(this,e||{})}},{key:"getDeployTransaction",value:function(e){return Object(h.a)(Object(v.a)(t.prototype),"getDeployTransaction",this).call(this,e||{})}},{key:"attach",value:function(e){return Object(h.a)(Object(v.a)(t.prototype),"attach",this).call(this,e)}},{key:"connect",value:function(e){return Object(h.a)(Object(v.a)(t.prototype),"connect",this).call(this,e)}}],[{key:"connect",value:function(e,n){return new L.a(e,M,n)}}]),t}(L.b),M=[{inputs:[{internalType:"uint256",name:"n",type:"uint256"}],name:"findHsb",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"pure",type:"function"},{inputs:[{internalType:"uint256",name:"n",type:"uint256"}],name:"findLsb",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"pure",type:"function"}],A="0x608060405234801561001057600080fd5b50610183806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636413c2781461003b578063eb19394a1461006f575b600080fd5b6100586004803603602081101561005157600080fd5b503561008c565b6040805161ffff9092168252519081900360200190f35b6100586004803603602081101561008557600080fd5b503561009f565b6000610097826100aa565b90505b919050565b600061009782610106565b6000816100b95750600061009a565b60016101005b8061ffff168261ffff1610156100ff57617fff82820160011c16600019600282900a018581166100f4578160010193506100f8565b8192505b50506100bf565b5092915050565b6000806101005b8061ffff168261ffff1610156100ff57617fff82820160011c16600019600282900a0180861161013f57819250610146565b8160010193505b505061010d56fea2646970667358221220e68a601cd91e8dc00ef0fce683e98c352800957c849d6da35e4e8980ccbfea4864736f6c63430007030033",I=function(e){Object(_.a)(t,e);var n=Object(w.a)(t);function t(e){return Object(m.a)(this,t),n.call(this,D,j,e)}return Object(y.a)(t,[{key:"deploy",value:function(e,n,a){return Object(h.a)(Object(v.a)(t.prototype),"deploy",this).call(this,e,n,a||{})}},{key:"getDeployTransaction",value:function(e,n,a){return Object(h.a)(Object(v.a)(t.prototype),"getDeployTransaction",this).call(this,e,n,a||{})}},{key:"attach",value:function(e){return Object(h.a)(Object(v.a)(t.prototype),"attach",this).call(this,e)}},{key:"connect",value:function(e){return Object(h.a)(Object(v.a)(t.prototype),"connect",this).call(this,e)}}],[{key:"connect",value:function(e,n){return new L.a(e,D,n)}}]),t}(L.b),D=[{inputs:[{internalType:"string",name:"name_",type:"string"},{internalType:"string",name:"symbol_",type:"string"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"}],j="0x608060405234801561001057600080fd5b5060405162000c5038038062000c508339818101604052604081101561003557600080fd5b810190808051604051939291908464010000000082111561005557600080fd5b90830190602082018581111561006a57600080fd5b825164010000000081118282018810171561008457600080fd5b82525081516020918201929091019080838360005b838110156100b1578181015183820152602001610099565b50505050905090810190601f1680156100de5780820380516001836020036101000a031916815260200191505b506040526020018051604051939291908464010000000082111561010157600080fd5b90830190602082018581111561011657600080fd5b825164010000000081118282018810171561013057600080fd5b82525081516020918201929091019080838360005b8381101561015d578181015183820152602001610145565b50505050905090810190601f16801561018a5780820380516001836020036101000a031916815260200191505b50604052505082516101a4915060039060208501906101cd565b5080516101b89060049060208401906101cd565b50506005805460ff1916601217905550610260565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061020e57805160ff191683800117855561023b565b8280016001018555821561023b579182015b8281111561023b578251825591602001919060010190610220565b5061024792915061024b565b5090565b5b80821115610247576000815560010161024c565b6109e080620002706000396000f3fe608060405234801561001057600080fd5b50600436106100995760003560e01c806306fdde031461009e578063095ea7b31461011b57806318160ddd1461015b57806323b872dd14610175578063313ce567146101ab57806339509351146101c957806370a08231146101f557806395d89b411461021b578063a457c2d714610223578063a9059cbb1461024f578063dd62ed3e1461027b575b600080fd5b6100a66102a9565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100e05781810151838201526020016100c8565b50505050905090810190601f16801561010d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101476004803603604081101561013157600080fd5b506001600160a01b03813516906020013561033f565b604080519115158252519081900360200190f35b61016361035c565b60408051918252519081900360200190f35b6101476004803603606081101561018b57600080fd5b506001600160a01b03813581169160208101359091169060400135610362565b6101b36103e9565b6040805160ff9092168252519081900360200190f35b610147600480360360408110156101df57600080fd5b506001600160a01b0381351690602001356103f2565b6101636004803603602081101561020b57600080fd5b50356001600160a01b0316610440565b6100a661045b565b6101476004803603604081101561023957600080fd5b506001600160a01b0381351690602001356104bc565b6101476004803603604081101561026557600080fd5b506001600160a01b038135169060200135610524565b6101636004803603604081101561029157600080fd5b506001600160a01b0381358116916020013516610538565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103355780601f1061030a57610100808354040283529160200191610335565b820191906000526020600020905b81548152906001019060200180831161031857829003601f168201915b5050505050905090565b600061035361034c610563565b8484610567565b50600192915050565b60025490565b600061036f848484610653565b6103df8461037b610563565b6103da85604051806060016040528060288152602001610915602891396001600160a01b038a166000908152600160205260408120906103b9610563565b6001600160a01b0316815260208101919091526040016000205491906107ae565b610567565b5060019392505050565b60055460ff1690565b60006103536103ff610563565b846103da8560016000610410610563565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610845565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103355780601f1061030a57610100808354040283529160200191610335565b60006103536104c9610563565b846103da8560405180606001604052806025815260200161098660259139600160006104f3610563565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906107ae565b6000610353610531610563565b8484610653565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b0383166105ac5760405162461bcd60e51b81526004018080602001828103825260248152602001806109626024913960400191505060405180910390fd5b6001600160a01b0382166105f15760405162461bcd60e51b81526004018080602001828103825260228152602001806108cd6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166106985760405162461bcd60e51b815260040180806020018281038252602581526020018061093d6025913960400191505060405180910390fd5b6001600160a01b0382166106dd5760405162461bcd60e51b81526004018080602001828103825260238152602001806108aa6023913960400191505060405180910390fd5b6106e88383836108a4565b610725816040518060600160405280602681526020016108ef602691396001600160a01b03861660009081526020819052604090205491906107ae565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546107549082610845565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561083d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156108025781810151838201526020016107ea565b50505050905090810190601f16801561082f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008282018381101561089d576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b9392505050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220f9572b18e4e63e4796591343d3eb956c7f920d98ee1154455942084fe73c268964736f6c63430007030033",B={instance:void 0,factory:void 0},H=i.a.createContext([void 0,function(){}]),F=i.a.createContext(["",function(){}]),U=i.a.createContext([void 0,function(){}]),G={currentHardhatProvider:"",init:function(){throw Error("Symfoni context not initialized")},loading:!1,messages:[],providers:[]},q=i.a.createContext(G),z=i.a.createContext(B),X=i.a.createContext(B),Y=i.a.createContext(B),V=i.a.createContext(B),K=i.a.createContext(B),Z=function(e){var n=e.showLoading,t=void 0===n||n,o=e.autoInit,r=void 0===o||o,s=Object(u.a)(e,["showLoading","autoInit"]),p=Object(a.useState)(0),m=Object(c.a)(p,2),y=m[0],h=m[1],v=Object(a.useState)(""),w=Object(c.a)(v,2),_=w[0],L=w[1],T=Object(a.useState)(!1),S=Object(c.a)(T,2),E=S[0],P=S[1],W=Object(a.useState)([]),O=Object(c.a)(W,2),M=O[0],A=O[1],D=Object(a.useState)(void 0),j=Object(c.a)(D,2),G=j[0],Z=j[1],J=Object(a.useState)(void 0),$=Object(c.a)(J,2),Q=$[0],ee=$[1],ne=Object(a.useState)(""),te=Object(c.a)(ne,2),ae=te[0],ie=te[1],oe=Object(a.useState)(void 0),re=Object(c.a)(oe,1)[0],se=Object(a.useState)(["web3modal","hardhat"]),de=Object(c.a)(se,2),be=de[0],le=de[1],ce=Object(a.useState)(B),ue=Object(c.a)(ce,2),fe=ue[0],pe=ue[1],ge=Object(a.useState)(B),me=Object(c.a)(ge,2),ye=me[0],he=me[1],ve=Object(a.useState)(B),we=Object(c.a)(ve,2),_e=we[0],Le=we[1],ke=Object(a.useState)(B),Te=Object(c.a)(ke,2),Se=Te[0],Ce=Te[1],Ee=Object(a.useState)(B),Pe=Object(c.a)(Ee,2),xe=Pe[0],Ne=Pe[1];Object(a.useEffect)((function(){M.length>0&&console.debug(M.pop())}),[M]);var We=function(){var e=Object(l.a)(d.a.mark((function e(){var n,t,a;return d.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n="Not set",t=Object(b.a)(be),re&&r&&0===y&&null===localStorage.getItem("WEB3_CONNECT_CACHED_PROVIDER")&&(t=t.sort((function(e,n){return e===re?-1:n===re?1:0}))),e.next=5,t.reduce(function(){var e=Object(l.a)(d.a.mark((function e(t,a){var i,o,r,s;return d.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t;case 2:if(!(i=e.sent)){e.next=7;break}return e.abrupt("return",Promise.resolve(i));case 7:e.t0=a.toLowerCase(),e.next="web3modal"===e.t0?10:"hardhat"===e.t0?22:31;break;case 10:return e.prev=10,e.next=13,Re();case 13:return o=e.sent,r=new f.ethers.providers.Web3Provider(o),n="web3modal",e.abrupt("return",Promise.resolve(r));case 19:return e.prev=19,e.t1=e.catch(10),e.abrupt("return",Promise.resolve(void 0));case 22:return e.prev=22,s=new f.ethers.providers.JsonRpcProvider({url:"http://127.0.0.1:8545"}),n="hardhat",e.abrupt("return",Promise.resolve(s));case 28:return e.prev=28,e.t2=e.catch(22),e.abrupt("return",Promise.resolve(void 0));case 31:return e.abrupt("return",Promise.resolve(void 0));case 32:case"end":return e.stop()}}),e,null,[[10,19],[22,28]])})));return function(n,t){return e.apply(this,arguments)}}(),Promise.resolve(void 0));case 5:return a=e.sent,e.abrupt("return",a?{provider:a,hardhatProviderName:n}:void 0);case 7:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),Oe=function(){var e=Object(l.a)(d.a.mark((function e(n,t){var a;return d.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:e.t0=t,e.next="web3modal"===e.t0?3:"hardhat"===e.t0?7:8;break;case 3:return a=n,e.next=6,a.getSigner();case 6:return e.abrupt("return",e.sent);case 7:return e.abrupt("return",f.ethers.Wallet.fromMnemonic("machine misery hazard tenant burger caution peace fiction rocket woman good focus").connect(n));case 8:return e.abrupt("return",void 0);case 9:case"end":return e.stop()}}),e)})));return function(n,t){return e.apply(this,arguments)}}(),Re=function(){var e=Object(l.a)(d.a.mark((function e(){var n,t;return d.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n={},t=new g.a({cacheProvider:!1,providerOptions:n}),e.next=4,t.connect();case 4:return e.abrupt("return",e.sent);case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();Object(a.useEffect)((function(){var e=!0;return function(){var n=Object(l.a)(d.a.mark((function n(){var t,a,i,o,s,l;return d.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(t=function(e){P(!1),A((function(n){return[].concat(Object(b.a)(n),[e])}))},a=function(e){pe(Me(o,s)),he(Ae(o,s)),Le(Ie(o,s)),Ce(De(o,s)),Ne(je(o,s)),t(e)},r||0!==y){n.next=4;break}return n.abrupt("return",t("Auto init turned off."));case 4:return P(!0),A((function(e){return[].concat(Object(b.a)(e),["Initiating Symfoni React"])})),n.next=8,We();case 8:if(i=n.sent,e&&i){n.next=11;break}return n.abrupt("return",t("No provider or signer."));case 11:return o=i.provider,ee(o),A((function(e){return[].concat(Object(b.a)(e),["Useing "+i.hardhatProviderName])})),L(i.hardhatProviderName),n.next=17,Oe(o,i.hardhatProviderName);case 17:if(s=n.sent,e&&s){n.next=20;break}return n.abrupt("return",a("Provider, without signer."));case 20:return Z(s),A((function(e){return[].concat(Object(b.a)(e),["Useing signer"])})),n.next=24,s.getAddress();case 24:if(l=n.sent,e&&l){n.next=27;break}return n.abrupt("return",a("Provider and signer, without address."));case 27:return ie(l),n.abrupt("return",a("Completed Symfoni context initialization."));case 29:case"end":return n.stop()}}),n)})));return function(){return n.apply(this,arguments)}}()(),function(){e=!1}}),[y]);var Me=function(e,n){return{instance:n?k.connect(f.ethers.constants.AddressZero,n):k.connect(f.ethers.constants.AddressZero,e),factory:n?new k(n):void 0}},Ae=function(e,n){return{instance:n?C.connect(f.ethers.constants.AddressZero,n):C.connect(f.ethers.constants.AddressZero,e),factory:n?new C(n):void 0}},Ie=function(e,n){var t=x.receipt.contractAddress;return{instance:n?N.connect(t,n):N.connect(t,e),factory:n?new N(n):void 0}},De=function(e,n){return{instance:n?R.connect(f.ethers.constants.AddressZero,n):R.connect(f.ethers.constants.AddressZero,e),factory:n?new R(n):void 0}},je=function(e,n){return{instance:n?I.connect(f.ethers.constants.AddressZero,n):I.connect(f.ethers.constants.AddressZero,e),factory:n?new I(n):void 0}};return i.a.createElement(q.Provider,{value:{init:function(e){return function(e){e&&le((function(n){return n.sort((function(n,t){return n===e?-1:t===e?1:0}))})),h(y+1)}(e)},providers:be,currentHardhatProvider:_,loading:E,messages:M}},i.a.createElement(H.Provider,{value:[Q,ee]},i.a.createElement(U.Provider,{value:[G,Z]},i.a.createElement(F.Provider,{value:[ae,ie]},i.a.createElement(z.Provider,{value:fe},i.a.createElement(X.Provider,{value:ye},i.a.createElement(Y.Provider,{value:_e},i.a.createElement(V.Provider,{value:Se},i.a.createElement(K.Provider,{value:xe},t&&E?s.loadingComponent?s.loadingComponent:i.a.createElement("div",null,M.map((function(e,n){return i.a.createElement("p",{key:n},e)}))):s.children)))))))))},J=t(7),$=t(151),Q=t(28),ee=t(149),ne=t(88);function te(e,n,t,a,i){var o=J.a.from(1),r=o.shl(256).sub(o);if(!ne.random.isReady())throw new Error("RNG is not ready");for(var s=ne.random.randomWords(8),d="0x",b=0;b<8;b++){d+=(s[b]>>>0).toString(16)}var l=J.a.from(d),c=a+1,u=o.shl(256-c).sub(o),f=e.xor(J.a.from(n)).xor(J.a.from(t)).and(r),p=!1,g=0,m=0;return p||setTimeout((function e(){if(!p){for(var n=Date.now(),t=0;t<1e3;t++){g++;var r=Object(ee.a)(["uint256","uint256"],[f,l]),s=J.a.from(r);if(s.lte(u)){for(a=c;s.lte(u);)a=c,c++,u=o.shl(256-c).sub(o);if(i(g,m,l,a),p)return}l=l.add(o),g%1e3===0&&i(g,m)}p||setTimeout(e,0);var d=Date.now();m+=d-n}}),0),function(){return p=!0}}function ae(e,n){var t=e.div(J.a.from(10).pow(n)),a=e.div(J.a.from(10).pow(n-3)).mod(1e3);return t.toLocaleString()+(a.isZero()?"":"."+a.toString().padStart(3,"0"))}var ie=J.a.from(0),oe=J.a.from(1),re=(J.a.from(2),J.a.from(10));function se(e){return e<=20?"very easy":e<=30?"easy":e<=40?"medium":e<=50?"hard":e<=60?"very hard":e<=70?"extremely hard":e<=80?"almost impossible":e<=90?"impossible":"a miracle"}function de(e){var n="";switch(e){case 0:n="Request satisfies all criteria, at this moment, to claim the tokens";break;case 1:n="blockNumber does not exist or has no live challenge assigned right now";break;case 2:n="Actual solvedDifficulty doesn't safisfy the requirements yet";break;case 3:n="This challenge has already been claimed by this address";break;case 4:n="All available rewards have been claimed already";break;default:n="Unknown Reason #"+e}return n}function be(e,n,t,a){var i=J.a.from(e),o=J.a.from(n),r=function(e){if(e.isZero())return 0;for(var n=1,t=256;n<t;){var a=n+t>>1,i=oe.shl(a).sub(oe);e.and(i).isZero()?n=a+1:t=a}return n}(i.xor(o));return 0===r&&(r=256),r--,t.div(re.pow(a)).gte(oe)?r>=20?r=30:r>=10?r=r-10+20:r*=2:r>10&&(r=10),r}function le(e){Object.keys(e).forEach((function(n){var t=e[n];void 0!==t.stopFn&&(t.stopFn(),t.stopFn=void 0)}))}var ce={},ue=function(e){var n=e.challenges,t=e.group,o=e.address,r=e.registeredBalances,s=e.verifyClaim,b=e.claimReward,u=ce[o];u||(u={},ce[o]=u);var f=function(e,n){var t={};return e.blockNumbers.forEach((function(a,i){var r=a.toHexString(),s=e.blockHashes[i];if(t[r])throw new Error("Duplicate block number in challenges: "+r);var d=function(e,n){for(var t=0;t<e.cnt;t++){var a=e.blockNumbers[t],i=e.balances[t];if(n.gte(a))return i}return ie}(n,a),b=218-2*(e.cnt-i-1),l=be(s,o,d,n.decimals),c=function(e,n){var t=e.div(re.pow(n)),a=e.mod(re.pow(n)).div(re.pow(n-3));return t.gte(oe)?t.gte(J.a.from(1e3))?30:t.gte(J.a.from(500))?28:t.gte(J.a.from(200))?26:t.gte(J.a.from(100))?24:t.gte(J.a.from(50))?22:t.gte(J.a.from(20))?20:t.gte(re)?18:t.gte(J.a.from(5))?16:t.gte(J.a.from(3))?14:t.gte(J.a.from(2))?12:10:a.gte(J.a.from(500))?9:a.gte(J.a.from(200))?8:a.gte(J.a.from(100))?7:a.gte(J.a.from(50))?6:a.gte(J.a.from(20))?5:a.gte(re)?4:a.gte(J.a.from(5))?3:a.gte(J.a.from(2))?2:a.gte(oe)?1:0}(d,n.decimals),u=b-l-c;u<20&&(u=20);var f=e.claimsCnt[i],p=e.claimed[i];t[r]={blockNumberHex:r,blockHash:s,generalDifficulty:b,addressDiscount:l,balance:d,balanceDiscount:c,adjustedDifficulty:u,claimsCnt:f,claimed:p}})),t}(n,r),p=Object(a.useState)(Object(Q.a)({},u)),g=Object(c.a)(p,2),m=g[0],y=g[1],h=Object(a.useState)(""),v=Object(c.a)(h,2),w=v[0],_=v[1],L=Object(a.useState)({cnt:0,indexes:[],blockNumbers:[],blockHashes:[],nexts:[],claimsCnt:[],claimed:[]}),k=Object(c.a)(L,2),T=k[0],S=k[1],C=!0;Object(a.useEffect)((function(){return function(){var e=Object(l.a)(d.a.mark((function e(){var a,i;return d.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:C&&(w!==o?(le(ce[w]),_(o),a={},Object.keys(u).forEach((function(e){var n=u[e],t=Object(Q.a)({},n);a[e]=t})),y(a)):T!==n&&(Object.keys(u).forEach((function(e){var n=u[e];if(n.group===t){var a=f[e];a?n.targetDifficulty!==a.adjustedDifficulty&&(n.targetDifficulty=a.adjustedDifficulty,n.solvedDifficulty>=n.targetDifficulty&&(n.solved=!0,n.stopFn&&(n.stopFn(),n.stopFn=void 0))):(n.stopFn&&(n.stopFn(),n.stopFn=void 0),delete u[e])}})),S(n),i={},Object.keys(u).forEach((function(e){var n=u[e],t=Object(Q.a)({},n);i[e]=t})),y(i)));case 1:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}()(),function(){C=!1}}));var E=function(){var e=Object(l.a)(d.a.mark((function e(n,a,i,o,r){var s,b,l,c,f,p;return d.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n.preventDefault(),s=a.toHexString(),(b=u[s])||(b={group:t,blockNumberHex:s,blockHash:i,trials:0,targetDifficulty:r,solutionTrials:0,solvedDifficulty:0,solved:!1,timeMs:0,stopFn:void 0},u[s]=b),!b.stopFn){e.next=6;break}throw new Error("The solver is already running on block "+s);case 6:l=b.trials,c=b.timeMs,f=function(e,n,t,a){var i=u[s];i.trials=l+e,i.timeMs=c+n,t&&void 0!==a&&a>i.solvedDifficulty&&(i.solutionTrials=i.trials,i.solution=t,i.solvedDifficulty=a,i.solvedDifficulty>=i.targetDifficulty&&(i.solved=!0,i.stopFn&&(i.stopFn(),i.stopFn=void 0)));var o=Object(Q.a)({},u),r=Object(Q.a)({},i);o[s]=r,y(o)},b.stopFn=te(a,i,o,b.solvedDifficulty,f),(p=Object(Q.a)({},u))[s]=Object(Q.a)({},b),y(p);case 13:case"end":return e.stop()}}),e)})));return function(n,t,a,i,o){return e.apply(this,arguments)}}(),P=function(){var e=Object(l.a)(d.a.mark((function e(n,t){var a,i,o,r;return d.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n.preventDefault(),a=t.toHexString(),i=u[a]){e.next=5;break}throw new Error("The solver does not exist "+a);case 5:i.stopFn&&(i.stopFn(),i.stopFn=void 0),o=Object(Q.a)({},u),r=Object(Q.a)({},i),o[a]=r,y(o);case 10:case"end":return e.stop()}}),e)})));return function(n,t){return e.apply(this,arguments)}}(),x=function(){var e=Object(l.a)(d.a.mark((function e(n,t,a){var i,o,r,b,l,c;return d.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n.preventDefault(),i=t.toHexString(),o=u[i]){e.next=5;break}throw new Error("The solver does not exist "+i);case 5:if(!o.solution){e.next=11;break}return e.next=8,s(t,o.solution);case 8:r=e.sent,0===(b=r.reason)?window.alert("Claim Verification on block #"+t.toString()+" was Successful, GO Ahead and Claim it for Real!"):window.alert("Claim Verification on block #"+t.toString()+" FAILED: "+de(b));case 11:l=Object(Q.a)({},u),c=Object(Q.a)({},o),l[i]=c,y(l);case 15:case"end":return e.stop()}}),e)})));return function(n,t,a){return e.apply(this,arguments)}}(),N=function(){var e=Object(l.a)(d.a.mark((function e(n,t){var a,i,o,r;return d.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n.preventDefault(),a=t.toHexString(),i=u[a]){e.next=5;break}throw new Error("The solver does not exist "+a);case 5:if(!i.solution){e.next=8;break}return e.next=8,b(t,i.solution);case 8:o=Object(Q.a)({},u),r=Object(Q.a)({},i),o[a]=r,y(o);case 12:case"end":return e.stop()}}),e)})));return function(n,t){return e.apply(this,arguments)}}();return i.a.createElement("table",null,i.a.createElement("thead",null,i.a.createElement("tr",null,i.a.createElement("th",null,"N"),i.a.createElement("th",null,"Block",i.a.createElement("br",null),"Number"),i.a.createElement("th",null,"Block Hash"),i.a.createElement("th",null,"Registered",i.a.createElement("br",null),"Balance"),i.a.createElement("th",{style:{textAlign:"left"}},"General",i.a.createElement("br",null),"Difficulty"),i.a.createElement("th",null,"Wallet",i.a.createElement("br",null),"Discount"),i.a.createElement("th",null,"Balance",i.a.createElement("br",null),"Discount"),i.a.createElement("th",{style:{textAlign:"left"}},"YOUR",i.a.createElement("br",null),"Difficulty"),i.a.createElement("th",null,"Reward",i.a.createElement("br",null),"Tokens"),i.a.createElement("th",null,"Claims"),i.a.createElement("th",null,"Status"),i.a.createElement("th",null,"Solved",i.a.createElement("br",null),"Difficulty"),i.a.createElement("th",null,"Trials"),i.a.createElement("th",null,"Time"),i.a.createElement("th",null,"Mine / Verify / Claim Tokens"))),i.a.createElement("tbody",null,n.blockNumbers.map((function(e,t){var a=n.blockHashes[t],s=a.substr(0,8)+"-"+a.substr(a.length-10,10),d=e.toHexString(),b=f[d],l=b.generalDifficulty,c=b.addressDiscount,u=b.balance,p=b.balanceDiscount,g=b.adjustedDifficulty,y=b.claimsCnt,h=b.claimed,v=m[d],w=!h&&v&&v.solvedDifficulty>=g,_=function(e){return e.startsWith("0x88888")?[500,2e3]:e.startsWith("0x8888")?[200,500]:e.startsWith("0x888")?[100,100]:e.startsWith("0x88")?[50,20]:e.startsWith("0x8")?[20,5]:[10,1]}(a);return i.a.createElement("tr",{key:t},i.a.createElement("td",null,t+1),i.a.createElement("td",null,e.toString()),i.a.createElement("td",null,i.a.createElement("code",null,s)),i.a.createElement("td",null,ae(u,r.decimals)),i.a.createElement("td",{style:{textAlign:"left"}},l," - ",se(l)),c>0?i.a.createElement("td",null,c):i.a.createElement("td",null),p>0?i.a.createElement("td",null,p):i.a.createElement("td",null),i.a.createElement("td",{style:{textAlign:"left"}},g," - ",se(g)),i.a.createElement("td",null,_[1]),i.a.createElement("td",null,y,"/",_[0]),i.a.createElement("td",null,h?"Claimed":v&&(v.solved?"Solved":v.stopFn?"Mining":v.trials>0?"Stopped":"")),i.a.createElement("td",null,v&&(v.solved?v.solvedDifficulty:v.stopFn||v.trials>0?v.solvedDifficulty+" / "+g:"")),i.a.createElement("td",null,v&&(v.solved?v.solutionTrials:v.trials>0?v.trials.toLocaleString():"")),i.a.createElement("td",null,v&&(v.timeMs>0?Math.floor(v.timeMs/1e3).toLocaleString()+" s":"")),i.a.createElement("td",null,i.a.createElement("button",{disabled:!!(h||v&&(v.solved||v.stopFn)),onClick:function(n){return E(n,e,a,o,g)}},"Start"),i.a.createElement("button",{disabled:!(v&&v.stopFn),onClick:function(n){return P(n,e)}},"Stop"),i.a.createElement("button",{disabled:!(!h&&v&&v.solvedDifficulty>0),onClick:function(n){return x(n,e,r.decimals)}},"Verify"),i.a.createElement("button",{style:{color:w?"red":""},disabled:!w,onClick:function(n){return N(n,e)}},"Claim")))}))))},fe=function(){var e=Object(a.useContext)(Y),n=Object(a.useState)(""),t=Object(c.a)(n,2),o=t[0],r=t[1],s=Object(a.useState)(0),b=Object(c.a)(s,2),u=b[0],f=b[1],p=Object(a.useState)(""),g=Object(c.a)(p,2),m=g[0],y=g[1],h=Object(a.useState)(ie),v=Object(c.a)(h,2),w=v[0],_=v[1],L=Object(a.useState)(ie),k=Object(c.a)(L,2),T=k[0],S=k[1],C=Object(a.useState)(""),E=Object(c.a)(C,2),P=E[0],x=E[1],N=Object(a.useState)(2),W=Object(c.a)(N,2),O=W[0],R=W[1],M=Object(a.useState)({locked:!1,lockedUntil:ie}),A=Object(c.a)(M,2),I=A[0],D=A[1],j=Object(a.useState)(!1),B=Object(c.a)(j,2),H=B[0],F=B[1],U=Object(a.useState)({blockNumber:ie,walletAddress:"",startingBlockNumber:ie,nextChallengeBlockNumber:ie,minedChallenges:ie,blocksPerChallenge:0}),G=Object(c.a)(U,2),q=G[0],z=G[1],X=Object(a.useState)(0),V=Object(c.a)(X,2),K=V[0],Z=V[1],Q=Object(a.useState)(0),ee=Object(c.a)(Q,2),ne=ee[0],te=ee[1],oe=Object(a.useState)({decimals:18,cnt:0,balances:[],blockNumbers:[]}),re=Object(c.a)(oe,2),se=re[0],de=re[1],be={cnt:0,indexes:[],blockNumbers:[],blockHashes:[],nexts:[],claimsCnt:[],claimed:[]},le=Object(a.useState)(be),ce=Object(c.a)(le,2),fe=ce[0],pe=ce[1],ge=Object(a.useState)(be),me=Object(c.a)(ge,2),ye=me[0],he=me[1],ve=new $.a(window.ethereum),we=ve.getSigner(),_e=!0,Le=function(){var n=function(){var n=Object(l.a)(d.a.mark((function n(a){var i,o,r,s,b,l,c,p,g,h,v,L,k;return d.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(i=e.instance){n.next=3;break}return n.abrupt("return");case 3:return n.next=5,i.paused();case 5:return o=n.sent,n.next=8,i.getStatus();case 8:return r=n.sent,n.next=11,i.owner();case 11:return s=n.sent,n.next=14,i.lockStatus();case 14:return b=n.sent,l=b[0],c=b[1],n.next=19,i.readRegisteredBalances();case 19:return p=n.sent,n.next=22,we.getAddress();case 22:return g=n.sent.toString(),n.next=25,i.totalSupply();case 25:return h=n.sent,n.next=28,i.balanceOf(g);case 28:return v=n.sent,n.next=31,ve.getBlockNumber();case 31:return L=n.sent,k=!1,_e&&(!a&&H===o&&q.blockNumber.eq(r.blockNumber)&&q.walletAddress===r.walletAddress&&q.startingBlockNumber.eq(r.startingBlockNumber)&&q.nextChallengeBlockNumber.eq(r.nextChallengeBlockNumber)&&q.minedChallenges.eq(r.minedChallenges)&&q.blocksPerChallenge===r.blocksPerChallenge&&I.locked===l&&I.lockedUntil.eq(c)&&P===s&&m===g&&w.eq(h)&&T.eq(v)&&u===L||(F(o),z(r),D({locked:l,lockedUntil:c}),x(s),de(p),y(g),_(h),S(v),f(L),m===g&&0!==K||Ne(),Z(K+1),k=!0),setTimeout(t,5e3)),n.abrupt("return",k);case 35:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}(),t=function(){var e=Object(l.a)(d.a.mark((function e(){return d.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,n(!0);case 2:e.sent||Z(K+1);case 4:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();return n(!1),function(){_e=!1}};Object(a.useEffect)(Le);var ke=function(){var e=Object(l.a)(d.a.mark((function e(n){return d.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:Te(n,function(){var e=Object(l.a)(d.a.mark((function e(n){var t,a,i;return d.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,n.lockStatus();case 2:t=e.sent,a=t[0],i=t[1],D({locked:a,lockedUntil:i});case 6:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}());case 1:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),Te=function(){var n=Object(l.a)(d.a.mark((function n(t,a){var i,o,s,b;return d.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(r(""),n.prev=1,i=e.instance){n.next=5;break}throw Error("Token instance not ready");case 5:return n.next=7,t(i);case 7:return o=n.sent,n.next=10,o.wait();case 10:if(!(n.sent.confirmations<=0)){n.next=13;break}throw new Error("No confirmations in contract receipt");case 13:a&&a(i),te(ne+1),n.next=23;break;case 17:n.prev=17,n.t0=n.catch(1),s=n.t0.data?n.t0.data.message:n.t0.message?n.t0.message:n.t0.toString(),b="VM Exception while processing transaction: revert ",s.startsWith(b)&&(s=s.substring(b.length)),window.alert(s);case 23:case"end":return n.stop()}}),n,null,[[1,17]])})));return function(e,t){return n.apply(this,arguments)}}(),Se=function(){var e=Object(l.a)(d.a.mark((function e(n){return d.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n.preventDefault(),ke((function(e){return e.lock()}));case 2:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),Ce=function(){var e=Object(l.a)(d.a.mark((function e(n){return d.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n.preventDefault(),ke((function(e){return e.unlock()}));case 2:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),Ee=function(){var e=Object(l.a)(d.a.mark((function e(n){var t;return d.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n.preventDefault(),t=J.a.from(O).mul(3600),ke((function(e){return e.timeLock(t)}));case 3:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),Pe=function(){var e=Object(l.a)(d.a.mark((function e(n){return d.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n.preventDefault(),Te((function(e){return e.pause()}));case 2:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),xe=function(){var e=Object(l.a)(d.a.mark((function e(n){return d.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n.preventDefault(),Te((function(e){return e.unpause()}));case 2:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),Ne=function(){var n=Object(l.a)(d.a.mark((function n(){var t,a,i,o,r,s,b,l,c,u,f,p,g,m,y,h,v;return d.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(t=e.instance){n.next=3;break}return n.abrupt("return");case 3:return n.next=5,t.readBasicChallenges();case 5:return a=n.sent,i=a.cnt,o=a.indexes,r=a.blockNumbers,s=a.blockHashes,b=a.nexts,l=a.claimsCnt,c=a.claimed,pe({cnt:i,indexes:o,blockNumbers:r,blockHashes:s,nexts:b,claimsCnt:l,claimed:c}),n.next=10,t.readPremiumChallenges();case 10:u=n.sent,f=u.cnt,p=u.indexes,g=u.blockNumbers,m=u.blockHashes,y=u.nexts,h=u.claimsCnt,v=u.claimed,he({cnt:f,indexes:p,blockNumbers:g,blockHashes:m,nexts:y,claimsCnt:h,claimed:v});case 13:case"end":return n.stop()}}),n)})));return function(){return n.apply(this,arguments)}}(),We=function(){var e=Object(l.a)(d.a.mark((function e(n){return d.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n.preventDefault(),e.next=3,Te((function(e){return e.addChallenges(je)}));case 3:Ne();case 4:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),Oe=function(){var e=Object(l.a)(d.a.mark((function e(n){return d.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n.preventDefault(),Te((function(e){return e.registerBalance()}));case 2:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),Re=function(){var n=Object(l.a)(d.a.mark((function n(t,a){var i,o,r,s,b,l,c,u,f;return d.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(i=e.instance){n.next=3;break}throw new Error("Couldn't call contract");case 3:return n.next=5,i.verifyClaim(t,a);case 5:return o=n.sent,r=o.reward,s=o.reason,b=o.premium,l=o.rewardsCnt,c=o.generalDifficulty,u=o.adjustedDifficulty,f=o.solvedDifficulty,n.abrupt("return",{reward:r,reason:s,premium:b,rewardsCnt:l,generalDifficulty:c,adjustedDifficulty:u,solvedDifficulty:f});case 14:case"end":return n.stop()}}),n)})));return function(e,t){return n.apply(this,arguments)}}(),Me=function(){var e=Object(l.a)(d.a.mark((function e(n,t){return d.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Te((function(e){return e.claimReward(n,t)}));case 2:Ne();case 3:case"end":return e.stop()}}),e)})));return function(n,t){return e.apply(this,arguments)}}(),Ae=I.lockedUntil.mul(1e3).toNumber(),Ie=m===P,De=I.locked||Ae>0,je=Math.floor((q.blockNumber.toNumber()+1-q.startingBlockNumber.toNumber()+1)/q.blocksPerChallenge);return(je-=q.minedChallenges.toNumber())>q.blockNumber.toNumber()+1-q.nextChallengeBlockNumber.toNumber()&&(je=q.blockNumber.toNumber()+1-q.nextChallengeBlockNumber.toNumber()),je>10&&(je=10),je>100-fe.cnt&&(je=100-fe.cnt),i.a.createElement("div",null,o?i.a.createElement("p",null,"ERROR: ",o):null,H?i.a.createElement("h2",{style:{backgroundColor:"red"}},"The Smart Contract Is PAUSED",i.a.createElement("br",null),"Please Wait Until the Contact Owner Resumes Its Operations"):null,i.a.createElement("img",{alt:"",src:"logo256.png"}),i.a.createElement("h2",null,"BEER Coin"),i.a.createElement("p",null,i.a.createElement("span",{style:{fontWeight:"bold"}},"Contract:")," ",e&&e.instance&&e.instance.address),i.a.createElement("p",null,i.a.createElement("span",{style:{fontWeight:"bold"}},"Total Supply:")," ",ae(w,se.decimals)),i.a.createElement("h2",null,"YOUR Wallet"),i.a.createElement("p",null,i.a.createElement("span",{style:{fontWeight:"bold"}},"Wallet:")," ",m),i.a.createElement("p",null,i.a.createElement("span",{style:{fontWeight:"bold"}},"Wallet Balance:")," ",ae(T,se.decimals),"\xa0",i.a.createElement("button",{disabled:H,onClick:function(e){return Oe(e)}},"Register Balance")),se.cnt>0?i.a.createElement(i.a.Fragment,null,i.a.createElement("h2",null,"Registered Balances"),i.a.createElement("p",null),i.a.createElement("table",{style:{marginLeft:"auto",marginRight:"auto"}},i.a.createElement("thead",null,i.a.createElement("tr",null,i.a.createElement("th",null,"Balance"),i.a.createElement("th",null,"Since Block"))),i.a.createElement("tbody",null,se.balances.filter((function(e,n){return n<se.cnt})).map((function(e,n){var t=se.blockNumbers[n];return i.a.createElement("tr",{key:n},i.a.createElement("td",null,ae(e,se.decimals)),i.a.createElement("td",null,t.toString()))}))))):T.gte(J.a.from(2).pow(se.decimals-3))?i.a.createElement("p",null,"Please register your current balance to be eligible for additional benefits"):null,i.a.createElement("p",null),i.a.createElement("h2",null,"BEER Coin Miner"),i.a.createElement("button",{disabled:!1,onClick:function(e){return Le()}},"Refresh"),i.a.createElement("button",{disabled:H,onClick:function(e){return function(e){e.preventDefault(),Ne()}(e)}},"Refresh Challenges"),i.a.createElement("button",{disabled:H||je<=0,onClick:function(e){return We(e)}},"Add Challenges (",je,")"),i.a.createElement("p",null),i.a.createElement("table",{style:{marginLeft:"auto",marginRight:"auto"}},i.a.createElement("thead",null,i.a.createElement("tr",null,i.a.createElement("th",null,i.a.createElement("h2",null,"Regular Challenges (",fe.cnt,")")))),i.a.createElement("tbody",null,i.a.createElement("tr",null,i.a.createElement("td",null,i.a.createElement(ue,{challenges:fe,group:"basic",address:m,registeredBalances:se,verifyClaim:Re,claimReward:Me}))),i.a.createElement("tr",null,i.a.createElement("td",null,i.a.createElement("p",null))),i.a.createElement("tr",null,i.a.createElement("th",null,i.a.createElement("h2",null,"Premium Challenges (",ye.cnt,")"))),i.a.createElement("tr",null,i.a.createElement("td",null,i.a.createElement(ue,{challenges:ye,group:"premium",address:m,registeredBalances:se,verifyClaim:Re,claimReward:Me}))))),i.a.createElement("p",null),i.a.createElement("h2",null,"Contract Management"),i.a.createElement("p",null,"Contract Owner: ",P),i.a.createElement("p",null,"Contract Address: ",e&&e.instance&&e.instance.address),i.a.createElement("p",null),Ie?i.a.createElement("table",{style:{marginLeft:"auto",marginRight:"auto"}},i.a.createElement("thead",null,i.a.createElement("tr",null,i.a.createElement("th",null,"Manual Lock: ",I.locked?"ON":"OFF"),i.a.createElement("th",null,"Time Lock: ",Ae>0?"ON for "+I.lockedUntil.mul(1e3).sub(Date.now()).div(3600).toNumber()/1e3+" hours":"OFF"),i.a.createElement("th",null,De?null:i.a.createElement(i.a.Fragment,null,"Paused: ",H?"YES":"NO")))),i.a.createElement("tbody",null,i.a.createElement("tr",null,i.a.createElement("td",null,i.a.createElement("button",{disabled:I.locked,onClick:function(e){return Se(e)}},"Lock"),i.a.createElement("button",{disabled:!I.locked,onClick:function(e){return Ce(e)}},"Unlock")),i.a.createElement("td",null,Ae>0?i.a.createElement("p",null,"Until "+function(e){var n=("0"+e.getDate()).slice(-2),t=("0"+(e.getMonth()+1)).slice(-2),a=e.getFullYear(),i=("0"+e.getHours()).slice(-2),o=("0"+e.getMinutes()).slice(-2),r=("0"+e.getSeconds()).slice(-2);return"".concat(t,"/").concat(n,"/").concat(a," ").concat(i,":").concat(o,":").concat(r)}(new Date(Ae))):null,i.a.createElement("input",{value:O,onChange:function(e){return R(parseInt(e.target.value))}}),i.a.createElement("button",{disabled:!O,onClick:function(e){return Ee(e)}},"Lock",O&&O>0?" for "+O+" hours":"")),i.a.createElement("td",null,i.a.createElement("button",{disabled:H,onClick:function(e){return Pe(e)}},"Pause"),i.a.createElement("button",{disabled:!H,onClick:function(e){return xe(e)}},"Unpause"))))):null,i.a.createElement("h2",null,"Debug"),i.a.createElement("p",null,"Block Number: ",u),i.a.createElement("p",null,"Refresh Cnt: ",K))};var pe=function(){return i.a.createElement("div",{className:"App"},i.a.createElement("header",{className:"App-header"},i.a.createElement(Z,{autoInit:!0},i.a.createElement(fe,null))))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));var ge=t(150),me=t(269);r.a.render(i.a.createElement(i.a.StrictMode,null,i.a.createElement(ge.a,{template:me},i.a.createElement(pe,null))),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()})).catch((function(e){console.error(e.message)}))}},[[153,1,2]]]);
//# sourceMappingURL=main.a8969649.chunk.js.map