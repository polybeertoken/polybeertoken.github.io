(this.webpackJsonpfrontend=this.webpackJsonpfrontend||[]).push([[0],{179:function(e){e.exports=JSON.parse('{"address":"0x2db729A6708b9b17960dB4864b5f371e9E2FD2d4","abi":[{"inputs":[{"internalType":"address","name":"recordsAddr_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"blockNumber","type":"uint64"},{"indexed":false,"internalType":"uint256","name":"challenge","type":"uint256"},{"indexed":false,"internalType":"bool","name":"premium","type":"bool"}],"name":"AddChallenge","type":"event"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_WEEK","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_DIFFICULTY_STEP","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_NULL","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEMO","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LUCKY_NUMBER","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_CNT","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_DONOR_BLOCKS","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINERS_CLAIM_MIN_RECIPIENT_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARDS_CNT_LIMIT","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_INC_INTERVAL","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_INC","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_STANDARD","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_START","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_DECIMALS","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"bool","name":"premium","type":"bool"}],"name":"_cleanupChallenge","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint8","name":"limit","type":"uint8"}],"name":"addChallenges","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"trusteeAddr_","type":"address"}],"name":"attachTrustee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getChallengesAllowance","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bool","name":"premium","type":"bool"},{"internalType":"uint8","name":"limit","type":"uint8"}],"name":"readChallenges","outputs":[{"internalType":"uint8","name":"totalCnt","type":"uint8"},{"internalType":"uint8[]","name":"indexes","type":"uint8[]"},{"internalType":"uint64[]","name":"blockNumbers","type":"uint64[]"},{"internalType":"uint16[]","name":"rewardUnits","type":"uint16[]"},{"internalType":"uint256[]","name":"challengeHashes","type":"uint256[]"},{"internalType":"uint8[]","name":"nexts","type":"uint8[]"},{"internalType":"uint16[]","name":"claimsCnt","type":"uint16[]"},{"internalType":"bool[]","name":"claimed","type":"bool[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"recordsAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"}],"name":"retrieveChallenge","outputs":[{"components":[{"internalType":"uint256","name":"challengeHash","type":"uint256"},{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"uint16","name":"rewardUnits","type":"uint16"},{"internalType":"uint8","name":"index","type":"uint8"},{"internalType":"bool","name":"valid","type":"bool"},{"internalType":"uint8","name":"prev","type":"uint8"},{"internalType":"uint8","name":"next","type":"uint8"}],"internalType":"struct ChallengeRecords.Challenge","name":"ch","type":"tuple"},{"internalType":"bool","name":"premium","type":"bool"},{"internalType":"uint8","name":"generalDifficulty","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"trusteeAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x2ed0ff381697782a820e44cdb826362f0c85808656464187d5dbaea551b9e4eb","receipt":{"to":null,"from":"0xC72E6D4E629F1C89d57f4D7Ad511d1b221D1d757","contractAddress":"0x2db729A6708b9b17960dB4864b5f371e9E2FD2d4","transactionIndex":0,"gasUsed":"7454137","logsBloom":"0xblockHash":"0x96d86d573483a297b68861a84101c3ab0bdf099bdf6b1dfa3c0e56ffb085f693","transactionHash":"0x2ed0ff381697782a820e44cdb826362f0c85808656464187d5dbaea551b9e4eb","logs":[{"transactionIndex":0,"blockNumber":24340036,"transactionHash":"0x2ed0ff381697782a820e44cdb826362f0c85808656464187d5dbaea551b9e4eb","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"],"data":"0x000000000000000000000000000000000000000000000000031a78f17351e2c60000000000000000000000000000000000000000000000000bf5b59f6a8da5190000000000000000000000000000000000000000000005a8c38e3a0d00e31b9200000000000000000000000000000000000000000000000008db3cadf73bc2530000000000000000000000000000000000000000000005a8c6a8b2fe7434fe58","logIndex":0,"blockHash":"0x96d86d573483a297b68861a84101c3ab0bdf099bdf6b1dfa3c0e56ffb085f693"}],"blockNumber":24340036,"cumulativeGasUsed":"7454137","status":1,"byzantium":true},"args":["0x368be2112082181528B2ce74B342dAb4e1762607"],"solcInputHash":"93d9a3e5beccfe46ed35f40bd3a64522","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.11+commit.d7f03943\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"recordsAddr_\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"challenge\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":false,\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"AddChallenge\\",\\"type\\":\\"event\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_WEEK\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_DIFFICULTY_STEP\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_NULL\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"DEMO\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"LUCKY_NUMBER\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_CNT\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_DONOR_BLOCKS\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MINERS_CLAIM_MIN_RECIPIENT_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MIN_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARDS_CNT_LIMIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_STANDARD\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_START\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_DECIMALS\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"_cleanupChallenge\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"limit\\",\\"type\\":\\"uint8\\"}],\\"name\\":\\"addChallenges\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"trusteeAddr_\\",\\"type\\":\\"address\\"}],\\"name\\":\\"attachTrustee\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getChallengesAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"limit\\",\\"type\\":\\"uint8\\"}],\\"name\\":\\"readChallenges\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"totalCnt\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"uint8[]\\",\\"name\\":\\"indexes\\",\\"type\\":\\"uint8[]\\"},{\\"internalType\\":\\"uint64[]\\",\\"name\\":\\"blockNumbers\\",\\"type\\":\\"uint64[]\\"},{\\"internalType\\":\\"uint16[]\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint16[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"challengeHashes\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint8[]\\",\\"name\\":\\"nexts\\",\\"type\\":\\"uint8[]\\"},{\\"internalType\\":\\"uint16[]\\",\\"name\\":\\"claimsCnt\\",\\"type\\":\\"uint16[]\\"},{\\"internalType\\":\\"bool[]\\",\\"name\\":\\"claimed\\",\\"type\\":\\"bool[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"recordsAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"}],\\"name\\":\\"retrieveChallenge\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"challengeHash\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"uint16\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint16\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"index\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"valid\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"prev\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"next\\",\\"type\\":\\"uint8\\"}],\\"internalType\\":\\"struct ChallengeRecords.Challenge\\",\\"name\\":\\"ch\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"generalDifficulty\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"trusteeAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/LuminaAdmin.sol\\":\\"LuminaAdmin\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n// CAUTION\\\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\\\n// because it relies on the compiler\'s built in overflow checks.\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations.\\\\n *\\\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\\\n * now has built in overflow checking.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            uint256 c = a + b;\\\\n            if (c < a) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b > a) return (false, 0);\\\\n            return (true, a - b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n            // benefit is lost if \'b\' is also tested.\\\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n            if (a == 0) return (true, 0);\\\\n            uint256 c = a * b;\\\\n            if (c / a != b) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a / b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a % b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a + b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a - b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a * b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a / b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a % b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b <= a, errorMessage);\\\\n            return a - b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a / b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting with custom message when dividing by zero.\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a % b;\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\\",\\"license\\":\\"MIT\\"},\\"contracts/ChallengeRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./Parameters.sol\\\\\\";\\\\nimport \\\\\\"./Utils.sol\\\\\\";\\\\n\\\\nabstract contract ChallengeRecords is Parameters, Utils {\\\\n\\\\n    struct Challenge {\\\\n        uint256 challengeHash;\\\\n        uint64 blockNumber;\\\\n        uint16 rewardUnits; // 1 - 1000\\\\n        uint8 index;\\\\n        bool valid;\\\\n        uint8 prev;\\\\n        uint8 next;\\\\n    }\\\\n\\\\n    struct ChallengeSet {\\\\n        Challenge[MAX_CHALLENGE_CNT] ch;\\\\n        uint8 cnt;\\\\n        uint8 freeIndex;\\\\n        uint8 head;\\\\n        uint8 tail;\\\\n    }\\\\n\\\\n    function _challengeSetInit(ChallengeSet storage chs) internal {\\\\n\\\\n        require(CHALLENGE_NULL < 256, \\\\\\"ChallengeRecords: Invalid configuration: CHALLENGE_NULL\\\\\\");\\\\n        require(MAX_CHALLENGE_CNT <= CHALLENGE_NULL, \\\\\\"ChallengeRecords: Invalid configuration: MAX_CHALLENGE_CNT\\\\\\");\\\\n\\\\n        for(uint8 i = 0; i < MAX_CHALLENGE_CNT; i++) {\\\\n            Challenge storage ch = chs.ch[i];\\\\n            ch.challengeHash = 0;\\\\n            ch.blockNumber = 0;\\\\n            ch.valid = false;\\\\n            ch.prev = CHALLENGE_NULL;\\\\n            ch.next = i+1 < MAX_CHALLENGE_CNT ? i+1 : CHALLENGE_NULL;\\\\n            ch.index = i;\\\\n        }\\\\n\\\\n        chs.cnt = 0;\\\\n        chs.freeIndex = 0;\\\\n        chs.head = CHALLENGE_NULL;\\\\n        chs.tail = CHALLENGE_NULL;\\\\n    }\\\\n\\\\n    // Returns CHALLENGE_NULL  if not found\\\\n    function _challengeFind(ChallengeSet storage chs, uint64 blockNumber) internal view returns (uint8 index, uint8 generalDifficulty) {\\\\n        uint8 cnt = chs.cnt;\\\\n        require(cnt <= MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords: Invalid configuration: cnt <= MAX_CHALLENGE_CNT failed\\\\\\");\\\\n        index = chs.head;\\\\n        generalDifficulty = 0;\\\\n        for(uint8 i = 0; i < cnt; i++) {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n\\\\n            if(ch.blockNumber == blockNumber) {\\\\n                require(index == ch.index, \\\\\\"ChallengeRecords._challengeFind(): corrupt list\\\\\\");\\\\n                generalDifficulty = MAX_CHALLENGE_DIFFICULTY - CHALLENGE_DIFFICULTY_STEP * (cnt - i - 1);\\\\n                require(MIN_CHALLENGE_DIFFICULTY <= generalDifficulty && generalDifficulty <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"ChallengeRecords._challengeFind(): generalDifficulty out of range\\\\\\");\\\\n                return (index, generalDifficulty);\\\\n            }\\\\n\\\\n            index = ch.next;\\\\n        }\\\\n        require(index == CHALLENGE_NULL, \\\\\\"ChallengeRecords._challengeFind(): corrupt list\\\\\\");\\\\n    }\\\\n\\\\n    function _challengeGet(ChallengeSet storage chs, uint8 index) internal view returns (Challenge storage) {\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords._challengeGet(): index is out of range\\\\\\");\\\\n\\\\n        Challenge storage ch = chs.ch[index];\\\\n        require(ch.index == index, \\\\\\"ChallengeRecords: corrupt challenge index\\\\\\");\\\\n\\\\n        return ch;\\\\n    }\\\\n\\\\n    function _challengesGet(ChallengeSet storage chs, uint8 limit)\\\\n    internal view returns (uint8 totalCnt, uint8[] memory indexes, uint64[] memory blockNumbers, uint16[] memory rewardUnits, uint256[] memory challengeHashes, uint8[] memory nexts) {\\\\n        uint8 cnt = limit < chs.cnt ? limit : chs.cnt;\\\\n        totalCnt = chs.cnt;\\\\n        indexes = new uint8[](cnt);\\\\n        blockNumbers = new uint64[](cnt);\\\\n        challengeHashes = new uint256[](cnt);\\\\n        nexts = new uint8[](cnt);\\\\n        rewardUnits = new uint16[](cnt);\\\\n        uint8 index = chs.head;\\\\n        for(uint8 i = 0; i < cnt; i++) {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n            indexes[i] = ch.index;\\\\n            blockNumbers[i] = ch.blockNumber;\\\\n            rewardUnits[i] = ch.rewardUnits;\\\\n            challengeHashes[i] = ch.challengeHash;\\\\n            nexts[i] = ch.next;\\\\n            index = ch.next;\\\\n        }\\\\n        require(limit < chs.cnt || index == CHALLENGE_NULL, \\\\\\"ChallengeRecords._challengeGetAll(): corrupt list\\\\\\");\\\\n    }\\\\n\\\\n    function _challengeSetIsFull(ChallengeSet storage chs) internal view returns (bool) {\\\\n        return chs.cnt >= MAX_CHALLENGE_CNT;\\\\n    }\\\\n\\\\n    function _challengeSetIsEmpty(ChallengeSet storage chs) internal view returns (bool) {\\\\n        return chs.cnt == 0;\\\\n    }\\\\n\\\\n    function _challengeGetFirstBlock(ChallengeSet storage chs) internal view returns (uint64 blockNumber) {\\\\n        uint8 index = chs.head;\\\\n        if(index == CHALLENGE_NULL) {\\\\n            blockNumber = uint64(block.number);\\\\n        } else {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n            require(ch.valid, \\\\\\"ChallengeRecords: corrupt challenge item in the list\\\\\\");\\\\n            blockNumber = ch.blockNumber;\\\\n        }\\\\n    }\\\\n\\\\n    function _challengeInsertHead(ChallengeSet storage chs, uint64 blockNumber, uint256 challengeHash, uint16 rewardUnits) internal {\\\\n        require(!_challengeSetIsFull(chs), \\\\\\"ChallengeRecords: Challenge set is full\\\\\\");\\\\n\\\\n        uint8 index = chs.freeIndex;\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords: corrupt freeIndex\\\\\\");\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(!ch.valid, \\\\\\"ChallengeRecords: corrupt challenge item in freeList\\\\\\");\\\\n        chs.freeIndex = ch.next;\\\\n\\\\n        ch.challengeHash = challengeHash;\\\\n        ch.blockNumber = blockNumber;\\\\n        ch.rewardUnits = rewardUnits;\\\\n        ch.valid = true;\\\\n        ch.prev = CHALLENGE_NULL;\\\\n        ch.next = chs.head;\\\\n        if(chs.head != CHALLENGE_NULL) {\\\\n            Challenge storage head = _challengeGet(chs, chs.head);\\\\n            head.prev = index;\\\\n        }\\\\n        chs.head = index;\\\\n        if(chs.tail == CHALLENGE_NULL) {\\\\n            chs.tail = index;\\\\n        }\\\\n        chs.cnt++;\\\\n    }\\\\n\\\\n    function _challengeInsertTail(ChallengeSet storage chs, uint64 blockNumber, uint256 challengeHash, uint16 rewardUnits) internal {\\\\n        require(!_challengeSetIsFull(chs), \\\\\\"ChallengeRecords: Challenge set is full\\\\\\");\\\\n\\\\n        uint8 index = chs.freeIndex;\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords: corrupt freeIndex\\\\\\");\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(!ch.valid, \\\\\\"ChallengeRecords: corrupt challenge item in freeList\\\\\\");\\\\n        chs.freeIndex = ch.next;\\\\n\\\\n        ch.challengeHash = challengeHash;\\\\n        ch.blockNumber = blockNumber;\\\\n        ch.rewardUnits = rewardUnits;\\\\n        ch.valid = true;\\\\n        ch.prev = chs.tail;\\\\n        ch.next = CHALLENGE_NULL;\\\\n        if(chs.tail != CHALLENGE_NULL) {\\\\n            Challenge storage tail = _challengeGet(chs, chs.tail);\\\\n            tail.next = index;\\\\n        }\\\\n        chs.tail = index;\\\\n        if(chs.head == CHALLENGE_NULL) {\\\\n            chs.head = index;\\\\n        }\\\\n        chs.cnt++;\\\\n    }\\\\n\\\\n    function _challengeRemove(ChallengeSet storage chs, uint8 index) internal {\\\\n        require(!_challengeSetIsEmpty(chs), \\\\\\"ChallengeRecords: Challenge set is empty\\\\\\");\\\\n\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(ch.valid, \\\\\\"ChallengeRecords: removing invalid item\\\\\\");\\\\n\\\\n        // Reconnect the double linked list\\\\n        if(ch.prev != CHALLENGE_NULL) {\\\\n            Challenge storage prev = _challengeGet(chs, ch.prev);\\\\n            prev.next = ch.next;\\\\n        }\\\\n        if(ch.next != CHALLENGE_NULL) {\\\\n            Challenge storage next = _challengeGet(chs, ch.next);\\\\n            next.prev = ch.prev;\\\\n        }\\\\n\\\\n        if(index == chs.head) {\\\\n            chs.head = ch.next;\\\\n        }\\\\n\\\\n        if(index == chs.tail) {\\\\n            chs.tail = ch.prev;\\\\n        }\\\\n\\\\n        // Put the removed item back into the free list\\\\n        uint8 freeIndex = chs.freeIndex;\\\\n        require(freeIndex < MAX_CHALLENGE_CNT || freeIndex == CHALLENGE_NULL, \\\\\\"ChallengeRecords: corrupt freeIndex\\\\\\");\\\\n        ch.challengeHash = 0;\\\\n        ch.blockNumber = 0;\\\\n        ch.rewardUnits = 0;\\\\n        ch.valid = false;\\\\n        ch.prev = CHALLENGE_NULL;\\\\n        ch.next = freeIndex;\\\\n        chs.freeIndex = index;\\\\n        chs.cnt--;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x0a32fa576bce5932ee2266d001c54c1cf66be17487e7f9502ece077999ea321b\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaAdmin.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./ChallengeRecords.sol\\\\\\";\\\\n\\\\ninterface ILuminaAdmin {\\\\n\\\\n    function readChallenges(bool premium, uint8 limit) external view returns (uint8 totalCnt, uint8[] memory indexes, uint64[] memory blockNumbers, uint16[] memory rewardUnits, uint256[] memory challengeHashes, uint8[] memory nexts, uint16[] memory claimsCnt, bool[] memory claimed);\\\\n    function getChallengesAllowance() external view returns (uint8);\\\\n    function addChallenges(uint8 limit) external returns (uint8);\\\\n    function retrieveChallenge(uint64 blockNumber) external view returns (ChallengeRecords.Challenge memory ch, bool premium, uint8 generalDifficulty);\\\\n    function _cleanupChallenge(uint64 blockNumber, bool premium) external; // onlyTrustee\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb57064ec2e022737a5cc56ce66ee65bedc1c2e28e2f16520c976a4783b7d5305\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaRecords {\\\\n\\\\n    function getBalances() external view returns (uint256[] memory balances, uint64[] memory blockNumbers);\\\\n    function findBalance(address wallet, uint64 blockNumber) external view returns (uint256 balance);\\\\n    function getClaimsCnt(uint64 blockNumber) external view returns (uint16);\\\\n    function hasClaimed(uint64 blockNumber, address recipient) external view returns (uint32 rewardUnits);\\\\n    function getClaims(uint64[] memory blockNumbers, address recipient) external view returns (uint16[] memory claimsCnt, bool[] memory claimed);\\\\n    function setCommision(uint8 commisionPrc) external;\\\\n    function getCommision(address wallet) external view returns (uint8 commisionPrc);\\\\n    function _registerBalance(address sender, uint256 balance, bool force) external returns (bool registered); // onlyToken\\\\n    function _updateBalance(address sender, uint256 balance) external; // onlyToken\\\\n    function _addClaim(uint64 blockNumber, address recipient, uint32 rewardUnits) external; // onlyTrustee\\\\n    function _updateFirstBlockNumber(uint64 blockNumber) external; // onlyAdmin\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe5ffa5a99c551fc5d68b334fee66b7c566aa7f7600cf275c251c208d8a1560b2\\",\\"license\\":\\"MIT\\"},\\"contracts/LuminaAdmin.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./ILuminaAdmin.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaRecords.sol\\\\\\";\\\\nimport \\\\\\"./ChallengeRecords.sol\\\\\\";\\\\nimport \\\\\\"./OnlyTrustee.sol\\\\\\";\\\\nimport \\\\\\"./Parameters.sol\\\\\\";\\\\n\\\\ncontract LuminaAdmin is ILuminaAdmin, Parameters, ChallengeRecords, OnlyTrustee {\\\\n    using SafeMath for uint256;\\\\n\\\\n    // Public address of the linked token contract\\\\n    address public recordsAddr;\\\\n    // Link to the records contract\\\\n    ILuminaRecords private records;\\\\n\\\\n    // Challenge Records\\\\n    ChallengeSet private _basicChallenges;\\\\n    ChallengeSet private _premiumChallenges;\\\\n\\\\n    // Challenge Records Creation Management\\\\n    uint64 private _createdBasicChallenges;\\\\n    uint64 private _createdPremiumChallenges;\\\\n\\\\n    uint64 private _startingBlockNumber; // First block of the Newton Era\\\\n    uint64 private _nextChallengeBlockNumber; // Block number assigned for next challenge\\\\n    uint64 private _nextDonorBlockNumber; // Next donor block number providing blockHash to the next challenge\\\\n\\\\n    uint64 private _blocksPerChallenge; // Adjusted current blocks per challenge parameter\\\\n    uint64 private _nextBlocksPerChallengeInc; // When is next block-per-challegne increase due\\\\n    uint16 private _rewardUnits; // Current number of reward units\\\\n    uint64 private _nextRewardUnitsInc; // Next increase of reward units until 1 full token\\\\n\\\\n    event AddChallenge(uint64 indexed blockNumber, uint256 challenge, bool premium);\\\\n\\\\n    constructor(address recordsAddr_) {\\\\n        recordsAddr = recordsAddr_;\\\\n        records = ILuminaRecords(recordsAddr_);\\\\n\\\\n        _challengeSetInit(_basicChallenges);\\\\n        _challengeSetInit(_premiumChallenges);\\\\n\\\\n        _createdBasicChallenges = 0;\\\\n        _createdPremiumChallenges = 0;\\\\n\\\\n        _startingBlockNumber = uint64(block.number) > (MAX_DONOR_BLOCKS*BLOCKS_PER_CHALLENGE) ? uint64(block.number) - (MAX_DONOR_BLOCKS*BLOCKS_PER_CHALLENGE) : 0;\\\\n        _nextChallengeBlockNumber = _startingBlockNumber;\\\\n        _nextDonorBlockNumber = 0;\\\\n        _blocksPerChallenge = BLOCKS_PER_CHALLENGE;\\\\n        _nextBlocksPerChallengeInc = 0;\\\\n        _rewardUnits = REWARD_UNITS_START;\\\\n        _nextRewardUnitsInc = REWARD_INC_INTERVAL;\\\\n    }\\\\n\\\\n    function readChallenges(bool premium, uint8 limit) external view returns (uint8 totalCnt, uint8[] memory indexes, uint64[] memory blockNumbers, uint16[] memory rewardUnits, uint256[] memory challengeHashes, uint8[] memory nexts, uint16[] memory claimsCnt, bool[] memory claimed) {\\\\n        ChallengeSet storage chs = premium ? _premiumChallenges : _basicChallenges;\\\\n        (totalCnt, indexes, blockNumbers, rewardUnits, challengeHashes, nexts) = _challengesGet(chs, limit);\\\\n        (claimsCnt, claimed) = records.getClaims(blockNumbers, msg.sender);\\\\n    }\\\\n\\\\n    // Calculates a close estimate of how many new challegnes\\\\n    // are allowed to be added to the system\\\\n    function getChallengesAllowance() external view returns (uint8) {\\\\n        if(_basicChallenges.cnt >= MAX_CHALLENGE_CNT || _premiumChallenges.cnt >= MAX_CHALLENGE_CNT) {\\\\n            return 0;\\\\n        }\\\\n\\\\n        uint64 blockNumber = uint64(block.number);\\\\n\\\\n        if(blockNumber <= _nextChallengeBlockNumber) {\\\\n            return 0;\\\\n        }\\\\n\\\\n        uint64 cnt = (blockNumber + _blocksPerChallenge - 1 - _nextChallengeBlockNumber) / _blocksPerChallenge;\\\\n\\\\n        uint64 minDonorBlockNumber = blockNumber > MAX_DONOR_BLOCKS ? blockNumber - MAX_DONOR_BLOCKS : 0;\\\\n        uint64 nextDonorBlockNumber = _nextDonorBlockNumber;\\\\n        if(nextDonorBlockNumber < minDonorBlockNumber) {\\\\n            nextDonorBlockNumber = minDonorBlockNumber;\\\\n        }\\\\n\\\\n        require(nextDonorBlockNumber <= blockNumber, \\\\\\"Failed: nextDonorBlockNumber <= blockNumber\\\\\\");\\\\n        uint64 donorsCnt = blockNumber - nextDonorBlockNumber;\\\\n\\\\n        if(donorsCnt < cnt) {\\\\n            cnt = donorsCnt;\\\\n        }\\\\n\\\\n        require(cnt <= MAX_DONOR_BLOCKS, \\\\\\"Failed: cnt <= MAX_DONOR_BLOCKS\\\\\\");\\\\n        return uint8(cnt);\\\\n    }\\\\n\\\\n    function retrieveChallenge(uint64 blockNumber) external view returns (Challenge memory ch, bool premium, uint8 generalDifficulty) {\\\\n        premium = false;\\\\n        uint8 chi;\\\\n        (chi, generalDifficulty) = _challengeFind(_basicChallenges, blockNumber);\\\\n        if(chi == CHALLENGE_NULL) {\\\\n            (chi, generalDifficulty) = _challengeFind(_premiumChallenges, blockNumber);\\\\n            premium = true;\\\\n        }\\\\n        require(chi != CHALLENGE_NULL, \\\\\\"Challenge with this blockNumber doesn\'t exist or has been claimed already\\\\\\");\\\\n        ch = _challengeGet(premium ? _premiumChallenges : _basicChallenges, chi);\\\\n\\\\n        require(ch.blockNumber == blockNumber, \\\\\\"Corrupt blockNumber in challenge\\\\\\");\\\\n    }\\\\n\\\\n    function addChallenges(uint8 limit) public returns (uint8) {\\\\n        uint64 blockNumber = uint64(block.number);\\\\n\\\\n        uint64 minDonorBlockNumber = blockNumber > MAX_DONOR_BLOCKS ? blockNumber - MAX_DONOR_BLOCKS : 0;\\\\n        if(_nextDonorBlockNumber < minDonorBlockNumber) {\\\\n            _nextDonorBlockNumber = minDonorBlockNumber;\\\\n        }\\\\n        require(_nextDonorBlockNumber <= blockNumber, \\\\\\"Failed: _nextDonorBlockNumber <= blockNumber\\\\\\");\\\\n\\\\n        // Create new challenges\\\\n        uint8 i = 0;\\\\n        while(i < limit\\\\n            && _nextDonorBlockNumber < blockNumber\\\\n            && _nextChallengeBlockNumber < blockNumber\\\\n            && _basicChallenges.cnt < MAX_CHALLENGE_CNT\\\\n            && _premiumChallenges.cnt < MAX_CHALLENGE_CNT\\\\n        ) {\\\\n            uint64 bn = _nextDonorBlockNumber;\\\\n\\\\n            // Calculate a challenge hash\\\\n            bytes32 bh = blockhash(bn);\\\\n            require(uint256(bh) != 0, \\\\\\"Missing blockhash number\\\\\\");\\\\n\\\\n            bytes memory data = abi.encodePacked(uint256(bh), uint256(uint160(msg.sender)), uint256(uint160(address(this))), uint256(blockNumber) ^ uint256(block.chainid));\\\\n            require(data.length == 128, \\\\\\"Invalid challenge data\\\\\\");\\\\n            uint256 challengeHash = uint256(keccak256(data));\\\\n\\\\n            if(uint8(challengeHash >> 252) == LUCKY_NUMBER) {\\\\n                emit AddChallenge(blockNumber, challengeHash, true);\\\\n                _challengeInsertTail(_premiumChallenges, bn, challengeHash, _rewardUnits);\\\\n                _createdPremiumChallenges++;\\\\n            } else {\\\\n                emit AddChallenge(blockNumber, challengeHash, false);\\\\n                _challengeInsertTail(_basicChallenges, bn, challengeHash, _rewardUnits);\\\\n                _createdBasicChallenges++;\\\\n            }\\\\n\\\\n            _nextDonorBlockNumber++;\\\\n            _nextChallengeBlockNumber += _blocksPerChallenge;\\\\n\\\\n            if(_rewardUnits < REWARD_UNITS_STANDARD) {\\\\n                // Newton Epoch - Managing the ramp-up\\\\n                if(_createdBasicChallenges >= _nextRewardUnitsInc) {\\\\n                    // Increase the reward\\\\n                    _rewardUnits += REWARD_UNITS_INC;\\\\n                    _nextRewardUnitsInc += REWARD_INC_INTERVAL;\\\\n                    if(_rewardUnits >= REWARD_UNITS_STANDARD) {\\\\n                        // Switching to Einstein Epoch\\\\n                        _nextRewardUnitsInc = 0;\\\\n                        _nextBlocksPerChallengeInc = blockNumber + BLOCKS_PER_WEEK;\\\\n                    }\\\\n                }\\\\n            } else if(blockNumber >= _nextBlocksPerChallengeInc) {\\\\n                // Einstein Epoch - Managing the cooldown\\\\n                _blocksPerChallenge += BLOCKS_PER_CHALLENGE_INC;\\\\n                _nextBlocksPerChallengeInc += BLOCKS_PER_WEEK;\\\\n            }\\\\n\\\\n            i++;\\\\n        }\\\\n\\\\n        return i;\\\\n    }\\\\n\\\\n    function _cleanupChallenge(uint64 blockNumber, bool premium) external onlyTrustee {\\\\n        // All rewards were claimed, remove challenge from the set\\\\n        ChallengeRecords.ChallengeSet storage chs = premium ? _premiumChallenges : _basicChallenges;\\\\n        (uint8 index, uint8 generalDifficulty2) = _challengeFind(chs, blockNumber);\\\\n        require(index != CHALLENGE_NULL, \\\\\\"Corrupt challenge records\\\\\\");\\\\n        require(MIN_CHALLENGE_DIFFICULTY <= generalDifficulty2 && generalDifficulty2 <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"Difficulty is out of range\\\\\\");\\\\n        _challengeRemove(chs, index);\\\\n\\\\n        uint64 bn1 = _challengeGetFirstBlock(_basicChallenges);\\\\n        uint64 bn2 = _challengeGetFirstBlock(_premiumChallenges);\\\\n        records._updateFirstBlockNumber(bn1 < bn2 ? bn1 : bn2);\\\\n\\\\n        // If you are the lucky miner, why not pay for a few more challenge?\\\\n        addChallenges(10);\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x3ba31732d6f194fae54708ae4cfcfb427068cce1ad54fe173373783b9c5111c2\\",\\"license\\":\\"MIT\\"},\\"contracts/OnlyTrustee.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyTrustee`, which can be applied to your functions to restrict their use to\\\\n * the trustee contract.\\\\n */\\\\nabstract contract OnlyTrustee is Context {\\\\n    address private _creatorAddr;\\\\n    address private _trusteeAddr;\\\\n\\\\n    constructor() {\\\\n        _creatorAddr = _msgSender();\\\\n    }\\\\n\\\\n    // OnlyCreator, OnlyOnce\\\\n    function attachTrustee(address trusteeAddr_) external {\\\\n        require(_creatorAddr == _msgSender(), \\\\\\"OnlyTrustee: only creator can attach a trustee contract\\\\\\");\\\\n        require(_trusteeAddr == address(0), \\\\\\"OnlyTrustee: the trustee contract has already been attached\\\\\\");\\\\n        _creatorAddr = address(0);\\\\n        _trusteeAddr = trusteeAddr_;\\\\n    }\\\\n\\\\n    function trusteeAddr() public view returns (address) {\\\\n        return _trusteeAddr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the trustee.\\\\n     */\\\\n    modifier onlyTrustee() {\\\\n        require(trusteeAddr() == _msgSender(), \\\\\\"OnlyTrustee: only trustee can execute this function\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x12eb746297b9190789abb1b6b3fe3014c1bc186a89034858d385611256932e10\\",\\"license\\":\\"MIT\\"},\\"contracts/Parameters.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nabstract contract Parameters {\\\\n    // The DEMO mode limits rewards to 1 per challenge and limits blocks per challenge to 2\\\\n    bool public constant DEMO = true;\\\\n\\\\n    // Number of decimals in reward token\\\\n    uint8 public constant TOKEN_DECIMALS = 18;\\\\n    uint256 public constant TOKEN_UNIT = 10 ** TOKEN_DECIMALS; // 1 LUMI\\\\n\\\\n    // The lucky number determines the premium challenges\\\\n    uint8 public constant LUCKY_NUMBER = 2;\\\\n\\\\n    // Challenges\\\\n    uint8 public constant CHALLENGE_NULL = 255;\\\\n    uint8 public constant MAX_CHALLENGE_CNT = 100;\\\\n    uint8 public constant MIN_CHALLENGE_DIFFICULTY = DEMO ? 10 : 20;\\\\n    uint8 public constant MAX_CHALLENGE_DIFFICULTY = DEMO ? 208 : 218;\\\\n    uint8 public constant CHALLENGE_DIFFICULTY_STEP = 2;\\\\n\\\\n    // Creating new challenges\\\\n    uint64 public constant BLOCKS_PER_WEEK = 11454; // 3600*24*7 / 2.2\\\\n    uint64 public constant MAX_DONOR_BLOCKS = 200; // number of most recent consecutive blocks that can be used as donors\\\\n\\\\n    // Number of blocks we need to wait for a new challenge\\\\n    uint8 public constant BLOCKS_PER_CHALLENGE = DEMO ? 2 : 100;\\\\n\\\\n    // Hard limit on number of claims per challenge\\\\n    uint16 public constant REWARDS_CNT_LIMIT = DEMO ? 2 : 500;\\\\n\\\\n    // Ramp-up in Newton Epoch\\\\n    uint256 public constant REWARD_UNIT = 10 ** (TOKEN_DECIMALS-3); // 0.001 LUMI\\\\n    uint16 public constant REWARD_UNITS_START = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_INC = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_STANDARD = 1000; // 1 LUMI\\\\n    uint16 public constant REWARD_INC_INTERVAL = DEMO ? 5 : 2700; // One increase per 2700 regular challenges, ~ add reward unit every week\\\\n\\\\n    // external miners can only make claims on addresses with at least 0.001 LUMI\\\\n    uint256 public constant MINERS_CLAIM_MIN_RECIPIENT_BALANCE = REWARD_UNIT; // 0.001 LUMI\\\\n\\\\n    // Cooldown in Einstein Epoch\\\\n    // Increase BLOCKS_PER_CHALLENGE by 2 blocks every week\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC = 2;\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xfdf05776b8f8536a7ed140fa82dc569eb9a32f177c1cf9c7bd8fd02bafdf67a7\\",\\"license\\":\\"MIT\\"},\\"contracts/Utils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nabstract contract Utils {\\\\n\\\\n    // finds the highest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findHsb of 0 returns 0\\\\n    //      findHsb of 1 returns 1\\\\n    //      findHsb of 2 returns 2\\\\n    //      findHsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findHsb(uint256 n) internal pure returns (uint16) {\\\\n        uint16 from = 0;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if(n <= mask) {\\\\n                to = middle;\\\\n            } else {\\\\n                from = middle+1;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n    // finds the lowest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findLsb of 0 returns 0\\\\n    //      findLsb of 1 returns 1\\\\n    //      findLsb of 2 returns 2\\\\n    //      findLsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findLsb(uint256 n) internal pure returns (uint16) {\\\\n        if(n == 0) {\\\\n            return 0;\\\\n        }\\\\n        uint16 from = 1;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if((n & mask) == 0) {\\\\n                from = middle+1;\\\\n            } else {\\\\n                to = middle;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n    function concat(string memory _a, string memory _b) internal pure returns (string memory) {\\\\n        bytes memory _ba = bytes(_a);\\\\n        bytes memory _bb = bytes(_b);\\\\n        string memory ab = new string(_ba.length + _bb.length);\\\\n        bytes memory bab = bytes(ab);\\\\n        uint k = 0;\\\\n        for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];\\\\n        for (uint i = 0; i < _bb.length; i++) bab[k++] = _bb[i];\\\\n        return string(bab);\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe36cd6cc097c0e71bb4144f304da71147692c8e2a93f583692390e7416c6d51c\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101c45760003560e01c806373d6aafa116100f9578063c28bd11c11610097578063f5d4d8a111610071578063f5d4d8a114610331578063f7f595fb14610353578063f883fcaa146102f0578063fc47e2091461036657600080fd5b8063c28bd11c146102f0578063c28cedf314610310578063c6088d971461032857600080fd5b8063a2157767116100d3578063a2157767146102f8578063a5c9cd8214610300578063b313bd6214610308578063b91268e81461028b57600080fd5b806373d6aafa146102e85780637fb01232146102f05780639d941362146102e857600080fd5b8063345af97711610166578063479e92c811610140578063479e92c8146102a9578063504b3662146102b157806357dce6ff146102b95780635b7f415c146102e057600080fd5b8063345af977146102785780633a3a7c531461028b5780633e6e387c146102a157600080fd5b806314270b65116101a257806314270b651461020b5780631df55679146102305780631e7bfd601461024557806330db4fa01461025857600080fd5b806306e38632146101c95780630bf43309146101e9578063132e12c414610203575b600080fd5b6101d1600581565b60405161ffff90911681526020015b60405180910390f35b6101f160d081565b60405160ff90911681526020016101e0565b6101f161036f565b6001546001600160a01b03165b6040516001600160a01b0390911681526020016101e0565b61024361023e366004611f68565b610566565b005b600254610218906001600160a01b031681565b61026060c881565b6040516001600160401b0390911681526020016101e0565b6101f1610286366004611fa7565b610693565b610293610cbb565b6040519081526020016101e0565b6101d1600281565b6101f1600a81565b6101f1606481565b6102cc6102c7366004611fda565b610cd5565b6040516101e09897969594939291906120ec565b6101f1601281565b6101d1600a81565b6101f1600281565b6101f160ff81565b610293610d98565b610260600281565b610318600181565b60405190151581526020016101e0565b6101d16103e881565b61034461033f3660046121cb565b610da4565b6040516101e0939291906121e6565b610243610361366004612266565b610f81565b610260612cbe81565b60cc54600090606460ff909116101580610392575061019554606460ff90911610155b1561039d5750600090565b6101965443906001600160401b03600160c01b9091048116908216116103c557600091505090565b61019754610196546000916001600160401b03600160401b909104811691600160c01b90041660016103f783866122b3565b61040191906122de565b61040b91906122de565b6104159190612306565b9050600060c86001600160401b0384161161043157600061043c565b61043c60c8846122de565b610197549091506001600160401b0390811690821681101561045b5750805b836001600160401b0316816001600160401b031611156104d65760405162461bcd60e51b815260206004820152602b60248201527f4661696c65643a206e657874446f6e6f72426c6f636b4e756d626572203c3d2060448201526a313637b1b5a73ab6b132b960a91b60648201526084015b60405180910390fd5b60006104e282866122de565b9050836001600160401b0316816001600160401b03161015610502578093505b60c86001600160401b038516111561055c5760405162461bcd60e51b815260206004820152601f60248201527f4661696c65643a20636e74203c3d204d41585f444f4e4f525f424c4f434b530060448201526064016104cd565b5091949350505050565b6000546001600160a01b031633146105e65760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79547275737465653a206f6e6c792063726561746f722063616e20617460448201527f746163682061207472757374656520636f6e747261637400000000000000000060648201526084016104cd565b6001546001600160a01b0316156106655760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c79547275737465653a20746865207472757374656520636f6e7472616360448201527f742068617320616c7265616479206265656e206174746163686564000000000060648201526084016104cd565b600080546001600160a01b0319908116909155600180549091166001600160a01b0392909216919091179055565b6000438160c86001600160401b038316116106af5760006106ba565b6106ba60c8836122de565b610197549091506001600160401b03808316911610156106f257610197805467ffffffffffffffff19166001600160401b0383161790555b610197546001600160401b03808416911611156107665760405162461bcd60e51b815260206004820152602c60248201527f4661696c65643a205f6e657874446f6e6f72426c6f636b4e756d626572203c3d60448201526b10313637b1b5a73ab6b132b960a11b60648201526084016104cd565b60005b8460ff168160ff1610801561078c5750610197546001600160401b038085169116105b80156107ad5750610196546001600160401b03808516600160c01b90920416105b80156107c0575060cc54606460ff909116105b80156107d4575061019554606460ff909116105b15610cb357610197546001600160401b03168040806108355760405162461bcd60e51b815260206004820152601860248201527f4d697373696e6720626c6f636b68617368206e756d626572000000000000000060448201526064016104cd565b60408051602081018390523391810191909152306060820152466001600160401b03871618608082015260009060a001604051602081830303815290604052905080516080146108c05760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206368616c6c656e6765206461746160501b60448201526064016104cd565b8051602082012060fc81901c600214156109815760408051828152600160208201526001600160401b038916917f0201a994d37c39c51a0f109a274f5d1867257813e46eddac7acbea5ea28341f5910160405180910390a261093660cd858361019760189054906101000a900461ffff16611193565b6101968054600160401b90046001600160401b03169060086109578361233a565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050610a23565b60408051828152600060208201526001600160401b038916917f0201a994d37c39c51a0f109a274f5d1867257813e46eddac7acbea5ea28341f5910160405180910390a26109e36004858361019760189054906101000a900461ffff16611193565b61019680546001600160401b03169060006109fd8361233a565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550505b61019780546001600160401b0316906000610a3d8361233a565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505061019760089054906101000a90046001600160401b031661019660188282829054906101000a90046001600160401b0316610a9d91906122b3565b82546001600160401b039182166101009390930a928302919092021990911617905550610197546103e8600160c01b90910461ffff161015610be95761019854610196546001600160401b03918216911610610be457600a61019760188282829054906101000a900461ffff16610b149190612361565b92506101000a81548161ffff021916908361ffff1602179055506001610b3c57610a8c610b3f565b60055b610198805461ffff9290921691600090610b639084906001600160401b03166122b3565b82546001600160401b039182166101009390930a928302919092021990911617905550610197546103e8600160c01b90910461ffff1610610be457610198805467ffffffffffffffff19169055610bbc612cbe886122b3565b61019760106101000a8154816001600160401b0302191690836001600160401b031602179055505b610c9d565b610197546001600160401b03600160801b909104811690881610610c9d57600261019760088282829054906101000a90046001600160401b0316610c2d91906122b3565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550612cbe61019760108282829054906101000a90046001600160401b0316610c7891906122b3565b92506101000a8154816001600160401b0302191690836001600160401b031602179055505b84610ca78161237e565b95505050505050610769565b949350505050565b610cc76003601261239e565b610cd290600a61249d565b81565b6000606080606080606080606060008a610cf0576004610cf3565b60cd5b9050610cff818b61140d565b60035460405163731fd3f760e01b8152969f50949d50929b50909950975095506001600160a01b03169063731fd3f790610d3f908a9033906004016124ac565b600060405180830381865afa158015610d5c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d8491908101906125b3565b999c989b5096995094979396929594505050565b610cd26012600a61249d565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101829052908080610dea6004866117e6565b9250905060ff8082161415610e0d57610e0460cd866117e6565b60019450925090505b60ff8181161415610e985760405162461bcd60e51b815260206004820152604960248201527f4368616c6c656e67652077697468207468697320626c6f636b4e756d6265722060448201527f646f65736e2774206578697374206f7220686173206265656e20636c61696d656064820152686420616c726561647960b81b608482015260a4016104cd565b610eb083610ea7576004610eaa565b60cd5b82611a64565b6040805160e081018252825481526001909201546001600160401b038082166020850181905261ffff600160401b8404169385019390935260ff600160501b830481166060860152600160581b8304811615156080860152600160601b8304811660a0860152600160681b90920490911660c084015291955090861614610f795760405162461bcd60e51b815260206004820181905260248201527f436f727275707420626c6f636b4e756d62657220696e206368616c6c656e676560448201526064016104cd565b509193909250565b6001546001600160a01b03163314610ff75760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79547275737465653a206f6e6c7920747275737465652063616e20657860448201527232b1baba32903a3434b990333ab731ba34b7b760691b60648201526084016104cd565b600081611005576004611008565b60cd5b905060008061101783866117e6565b909250905060ff808316141561106f5760405162461bcd60e51b815260206004820152601960248201527f436f7272757074206368616c6c656e6765207265636f7264730000000000000060448201526064016104cd565b60ff8116600a11801590611087575060d060ff821611155b6110d35760405162461bcd60e51b815260206004820152601a60248201527f446966666963756c7479206973206f7574206f662072616e676500000000000060448201526064016104cd565b6110dd8383611b7d565b60006110e96004611e4d565b905060006110f760cd611e4d565b6003549091506001600160a01b031663910eb1ce6001600160401b03808416908516106111245782611126565b835b6040516001600160e01b031960e084901b1681526001600160401b039091166004820152602401600060405180830381600087803b15801561116757600080fd5b505af115801561117b573d6000803e3d6000fd5b50505050611189600a610693565b5050505050505050565b60c8840154606460ff909116106111fc5760405162461bcd60e51b815260206004820152602760248201527f4368616c6c656e67655265636f7264733a204368616c6c656e676520736574206044820152661a5cc8199d5b1b60ca1b60648201526084016104cd565b60c8840154610100900460ff16606481106112295760405162461bcd60e51b81526004016104cd9061267f565b60006112358683611a64565b6001810154909150600160581b900460ff16156112b15760405162461bcd60e51b815260206004820152603460248201527f4368616c6c656e67655265636f7264733a20636f7272757074206368616c6c656044820152731b99d9481a5d195b481a5b88199c9959531a5cdd60621b60648201526084016104cd565b60018101805460c88801805461ff001916610100600160681b90930460ff908116939093021781558684558254600160581b6001600160401b038a1669ffffffffffffffffffff1990921691909117600160401b61ffff8916021760ff60581b19811682178555825460ff60681b61ffff60581b199092166301000000918290048616600160601b021790921760ff60681b191617909355549190910481161461138d576000611372878860c80160039054906101000a900460ff16611a64565b600101805460ff60681b1916600160681b60ff861602179055505b60c88601805460ff80851663010000000263ff00000019909216919091179182905562010000909104811614156113d75760c88601805462ff000019166201000060ff8516021790555b60c88601805460ff169060006113ec8361237e565b91906101000a81548160ff021916908360ff16021790555050505050505050565b6000606080606080606060008860c80160009054906101000a900460ff1660ff168860ff16106114445760c889015460ff16611446565b875b60c88a015460ff908116985090915081166001600160401b0381111561146e5761146e6124d6565b604051908082528060200260200182016040528015611497578160200160208202803683370190505b5095508060ff166001600160401b038111156114b5576114b56124d6565b6040519080825280602002602001820160405280156114de578160200160208202803683370190505b5094508060ff166001600160401b038111156114fc576114fc6124d6565b604051908082528060200260200182016040528015611525578160200160208202803683370190505b5092508060ff166001600160401b03811115611543576115436124d6565b60405190808252806020026020018201604052801561156c578160200160208202803683370190505b5091508060ff166001600160401b0381111561158a5761158a6124d6565b6040519080825280602002602001820160405280156115b3578160200160208202803683370190505b5060c88a015490945062010000900460ff1660005b8260ff168160ff1610156117585760006115e28c84611a64565b6040805160e081018252825481526001909201546001600160401b038116602084015261ffff600160401b8204169183019190915260ff600160501b8204811660608401819052600160581b8304821615156080850152600160601b8304821660a0850152600160681b909204811660c08401528b5192935090918b918516908110611670576116706126c2565b602002602001019060ff16908160ff16815250508060200151888360ff168151811061169e5761169e6126c2565b60200260200101906001600160401b031690816001600160401b0316815250508060400151878360ff16815181106116d8576116d86126c2565b602002602001019061ffff16908161ffff16815250508060000151868360ff1681518110611708576117086126c2565b6020026020010181815250508060c00151858360ff168151811061172e5761172e6126c2565b60ff9092166020928302919091019091015260c001519150806117508161237e565b9150506115c8565b5060c88a015460ff908116908a161080611774575060ff818116145b6117da5760405162461bcd60e51b815260206004820152603160248201527f4368616c6c656e67655265636f7264732e5f6368616c6c656e6765476574416c6044820152701b0a0a4e8818dbdc9c9d5c1d081b1a5cdd607a1b60648201526084016104cd565b50509295509295509295565b60c8820154600090819060ff16606481111561187b5760405162461bcd60e51b815260206004820152604860248201527f4368616c6c656e67655265636f7264733a20496e76616c696420636f6e66696760448201527f75726174696f6e3a20636e74203c3d204d41585f4348414c4c454e47455f434e606482015267150819985a5b195960c21b608482015260a4016104cd565b60c885015462010000900460ff16925060009150815b8160ff168160ff161015611a385760006118ab8786611a64565b6040805160e081018252825481526001909201546001600160401b038082166020850181905261ffff600160401b8404169385019390935260ff600160501b830481166060860152600160581b8304811615156080860152600160601b8304811660a0860152600160681b90920490911660c08401529192509087161415611a2057806060015160ff168560ff16146119565760405162461bcd60e51b81526004016104cd906126d8565b6001611962838561239e565b61196c919061239e565b611977906002612727565b6119829060d061239e565b935060ff8416600a1180159061199c575060d060ff851611155b611a185760405162461bcd60e51b815260206004820152604160248201527f4368616c6c656e67655265636f7264732e5f6368616c6c656e676546696e642860448201527f293a2067656e6572616c446966666963756c7479206f7574206f662072616e676064820152606560f81b608482015260a4016104cd565b505050611a5d565b60c00151935080611a308161237e565b915050611891565b5060ff83811614611a5b5760405162461bcd60e51b81526004016104cd906126d8565b505b9250929050565b6000606460ff831610611adf5760405162461bcd60e51b815260206004820152603760248201527f4368616c6c656e67655265636f7264732e5f6368616c6c656e6765476574282960448201527f3a20696e646578206973206f7574206f662072616e676500000000000000000060648201526084016104cd565b60008360ff841660648110611af657611af66126c2565b6002020190508260ff1681600101600a9054906101000a900460ff1660ff1614611b745760405162461bcd60e51b815260206004820152602960248201527f4368616c6c656e67655265636f7264733a20636f7272757074206368616c6c656044820152680dcceca40d2dcc8caf60bb1b60648201526084016104cd565b90505b92915050565b60c882015460ff16611be25760405162461bcd60e51b815260206004820152602860248201527f4368616c6c656e67655265636f7264733a204368616c6c656e67652073657420604482015267697320656d70747960c01b60648201526084016104cd565b6000611bee8383611a64565b6001810154909150600160581b900460ff16611c5c5760405162461bcd60e51b815260206004820152602760248201527f4368616c6c656e67655265636f7264733a2072656d6f76696e6720696e76616c6044820152666964206974656d60c81b60648201526084016104cd565b6001810154600160601b900460ff90811614611cb7576000611c8f8483600101600c9054906101000a900460ff16611a64565b6001838101549101805460ff60681b1916600160681b9283900460ff16909202919091179055505b6001810154600160681b900460ff90811614611d12576000611cea8483600101600d9054906101000a900460ff16611a64565b6001838101549101805460ff60601b1916600160601b9283900460ff16909202919091179055505b60c883015460ff83811662010000909204161415611d5257600181015460c88401805462ff00001916600160681b90920460ff1662010000029190911790555b60c883015460ff8381166301000000909204161415611d9557600181015460c88401805463ff0000001916600160601b90920460ff166301000000029190911790555b60c8830154610100900460ff166064811080611db3575060ff818116145b611dcf5760405162461bcd60e51b81526004016104cd9061267f565b600080835560018301805460ff848116600160681b026dffffff00ffffffffffffffffffff199092169190911760ff60601b1790915560c8860180548683166101000261ff0019821681178355831692169190911791611e2e83612748565b91906101000a81548160ff021916908360ff1602179055505050505050565b60c881015460009060ff62010000909104811690811415611e7057439150611f62565b6000611e7c8483611a64565b6040805160e081018252825481526001909201546001600160401b038116602084015261ffff600160401b8204169183019190915260ff600160501b820481166060840152600160581b82048116151560808401819052600160601b8304821660a0850152600160681b9092041660c0830152909150611f5b5760405162461bcd60e51b815260206004820152603460248201527f4368616c6c656e67655265636f7264733a20636f7272757074206368616c6c656044820152731b99d9481a5d195b481a5b881d1a19481b1a5cdd60621b60648201526084016104cd565b6020015191505b50919050565b600060208284031215611f7a57600080fd5b81356001600160a01b0381168114611b7457600080fd5b803560ff81168114611fa257600080fd5b919050565b600060208284031215611fb957600080fd5b611fc282611f91565b9392505050565b8015158114611fd757600080fd5b50565b60008060408385031215611fed57600080fd5b8235611ff881611fc9565b915061200660208401611f91565b90509250929050565b600081518084526020808501945080840160005b8381101561204257815160ff1687529582019590820190600101612023565b509495945050505050565b600081518084526020808501945080840160005b838110156120425781516001600160401b031687529582019590820190600101612061565b600081518084526020808501945080840160005b8381101561204257815161ffff168752958201959082019060010161209a565b600081518084526020808501945080840160005b838110156120425781511515875295820195908201906001016120ce565b600061010060ff8b1683526020818185015261210a8285018c61200f565b9150838203604085015261211e828b61204d565b91508382036060850152612132828a612086565b84810360808601528851808252828a0193509082019060005b818110156121675784518352938301939183019160010161214b565b505084810360a086015261217b818961200f565b9250505082810360c08401526121918186612086565b905082810360e08401526121a581856120ba565b9b9a5050505050505050505050565b80356001600160401b0381168114611fa257600080fd5b6000602082840312156121dd57600080fd5b611fc2826121b4565b600061012082019050845182526001600160401b03602086015116602083015261ffff604086015116604083015260ff606086015116606083015260808501511515608083015260ff60a08601511660a083015260c085015161224e60c084018260ff169052565b5083151560e083015260ff8316610100830152610cb3565b6000806040838503121561227957600080fd5b612282836121b4565b9150602083013561229281611fc9565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b038083168185168083038211156122d5576122d561229d565b01949350505050565b60006001600160401b03838116908316818110156122fe576122fe61229d565b039392505050565b60006001600160401b038084168061232e57634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b60006001600160401b03808316818114156123575761235761229d565b6001019392505050565b600061ffff8083168185168083038211156122d5576122d561229d565b600060ff821660ff8114156123955761239561229d565b60010192915050565b600060ff821660ff8416808210156123b8576123b861229d565b90039392505050565b600181815b80851115611a5b5781600019048211156123e2576123e261229d565b808516156123ef57918102915b93841c93908002906123c6565b60008261240b57506001611b77565b8161241857506000611b77565b816001811461242e576002811461243857612454565b6001915050611b77565b60ff8411156124495761244961229d565b50506001821b611b77565b5060208310610133831016604e8410600b8410161715612477575081810a611b77565b61248183836123c1565b80600019048211156124955761249561229d565b029392505050565b6000611fc260ff8416836123fc565b6040815260006124bf604083018561204d565b905060018060a01b03831660208301529392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612514576125146124d6565b604052919050565b60006001600160401b03821115612535576125356124d6565b5060051b60200190565b600082601f83011261255057600080fd5b815160206125656125608361251c565b6124ec565b82815260059290921b8401810191818101908684111561258457600080fd5b8286015b848110156125a857805161259b81611fc9565b8352918301918301612588565b509695505050505050565b600080604083850312156125c657600080fd5b82516001600160401b03808211156125dd57600080fd5b818501915085601f8301126125f157600080fd5b815160206126016125608361251c565b82815260059290921b8401810191818101908984111561262057600080fd5b948201945b8386101561264f57855161ffff811681146126405760008081fd5b82529482019490820190612625565b9188015191965090935050508082111561266857600080fd5b506126758582860161253f565b9150509250929050565b60208082526023908201527f4368616c6c656e67655265636f7264733a20636f72727570742066726565496e6040820152620c8caf60eb1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6020808252602f908201527f4368616c6c656e67655265636f7264732e5f6368616c6c656e676546696e642860408201526e0a4e8818dbdc9c9d5c1d081b1a5cdd608a1b606082015260800190565b600060ff821660ff84168160ff04811182151516156124955761249561229d565b600060ff82168061275b5761275b61229d565b600019019291505056fea26469706673582212200046f7d6cebe2f70f916886bed5848ddfd728609afbc3f7ce4417608e9c7e0c964736f6c634300080b0033","devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":6316,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_creatorAddr","offset":0,"slot":"0","type":"t_address"},{"astId":6318,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_trusteeAddr","offset":0,"slot":"1","type":"t_address"},{"astId":2400,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"recordsAddr","offset":0,"slot":"2","type":"t_address"},{"astId":2403,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"records","offset":0,"slot":"3","type":"t_contract(ILuminaRecords)2379"},{"astId":2406,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_basicChallenges","offset":0,"slot":"4","type":"t_struct(ChallengeSet)1216_storage"},{"astId":2409,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_premiumChallenges","offset":0,"slot":"205","type":"t_struct(ChallengeSet)1216_storage"},{"astId":2411,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_createdBasicChallenges","offset":0,"slot":"406","type":"t_uint64"},{"astId":2413,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_createdPremiumChallenges","offset":8,"slot":"406","type":"t_uint64"},{"astId":2415,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_startingBlockNumber","offset":16,"slot":"406","type":"t_uint64"},{"astId":2417,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_nextChallengeBlockNumber","offset":24,"slot":"406","type":"t_uint64"},{"astId":2419,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_nextDonorBlockNumber","offset":0,"slot":"407","type":"t_uint64"},{"astId":2421,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_blocksPerChallenge","offset":8,"slot":"407","type":"t_uint64"},{"astId":2423,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_nextBlocksPerChallengeInc","offset":16,"slot":"407","type":"t_uint64"},{"astId":2425,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_rewardUnits","offset":24,"slot":"407","type":"t_uint16"},{"astId":2427,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"_nextRewardUnitsInc","offset":0,"slot":"408","type":"t_uint64"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(Challenge)1202_storage)100_storage":{"base":"t_struct(Challenge)1202_storage","encoding":"inplace","label":"struct ChallengeRecords.Challenge[100]","numberOfBytes":"6400"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(ILuminaRecords)2379":{"encoding":"inplace","label":"contract ILuminaRecords","numberOfBytes":"20"},"t_struct(Challenge)1202_storage":{"encoding":"inplace","label":"struct ChallengeRecords.Challenge","members":[{"astId":1189,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"challengeHash","offset":0,"slot":"0","type":"t_uint256"},{"astId":1191,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"blockNumber","offset":0,"slot":"1","type":"t_uint64"},{"astId":1193,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"rewardUnits","offset":8,"slot":"1","type":"t_uint16"},{"astId":1195,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"index","offset":10,"slot":"1","type":"t_uint8"},{"astId":1197,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"valid","offset":11,"slot":"1","type":"t_bool"},{"astId":1199,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"prev","offset":12,"slot":"1","type":"t_uint8"},{"astId":1201,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"next","offset":13,"slot":"1","type":"t_uint8"}],"numberOfBytes":"64"},"t_struct(ChallengeSet)1216_storage":{"encoding":"inplace","label":"struct ChallengeRecords.ChallengeSet","members":[{"astId":1207,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"ch","offset":0,"slot":"0","type":"t_array(t_struct(Challenge)1202_storage)100_storage"},{"astId":1209,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"cnt","offset":0,"slot":"200","type":"t_uint8"},{"astId":1211,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"freeIndex","offset":1,"slot":"200","type":"t_uint8"},{"astId":1213,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"head","offset":2,"slot":"200","type":"t_uint8"},{"astId":1215,"contract":"contracts/LuminaAdmin.sol:LuminaAdmin","label":"tail","offset":3,"slot":"200","type":"t_uint8"}],"numberOfBytes":"6432"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}}}')},182:function(e){e.exports=JSON.parse('{"address":"0x7b1888cC3aDaC2B5E313bf23A50929ac7E28688f","abi":[{"inputs":[{"internalType":"address","name":"marketingAddr_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint64","name":"","type":"uint64"},{"internalType":"address","name":"miner","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"uint8","name":"","type":"uint8"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"_claim","outputs":[{"internalType":"address payable[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"tokenCommisions","type":"uint256[]"},{"internalType":"uint256[]","name":"ethCommisions","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"_hasReferral","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"referrer","type":"address"},{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"_referral","outputs":[{"internalType":"address payable[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"tokenCommisions","type":"uint256[]"},{"internalType":"uint256[]","name":"ethCommisions","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"claimsCnt","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"hasReferral","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"marketingAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"referralsCnt","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x64457fa4649601597334cc94d3d3042b6c01de7f03284ba1a4defec309b33e55","receipt":{"to":null,"from":"0xC72E6D4E629F1C89d57f4D7Ad511d1b221D1d757","contractAddress":"0x7b1888cC3aDaC2B5E313bf23A50929ac7E28688f","transactionIndex":0,"gasUsed":"717610","logsBloom":"0xblockHash":"0xefcbf62fdf55166498e565a36cb4da0e8ec661cbb07656ed38e5c2c07caafa5c","transactionHash":"0x64457fa4649601597334cc94d3d3042b6c01de7f03284ba1a4defec309b33e55","logs":[{"transactionIndex":0,"blockNumber":24340050,"transactionHash":"0x64457fa4649601597334cc94d3d3042b6c01de7f03284ba1a4defec309b33e55","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"],"data":"0x000000000000000000000000000000000000000000000000004c7bdff1b0b85c0000000000000000000000000000000000000000000000000659e8ab66041d190000000000000000000000000000000000000000000005a8cb8144d8f1bfd366000000000000000000000000000000000000000000000000060d6ccb745364bd0000000000000000000000000000000000000000000005a8cbcdc0b8e3708bc2","logIndex":0,"blockHash":"0xefcbf62fdf55166498e565a36cb4da0e8ec661cbb07656ed38e5c2c07caafa5c"}],"blockNumber":24340050,"cumulativeGasUsed":"717610","status":1,"byzantium":true},"args":["0xf0c2c63aA2B6253e33436bc04f6aF3c2008DC52d"],"solcInputHash":"93d9a3e5beccfe46ed35f40bd3a64522","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.11+commit.d7f03943\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"marketingAddr_\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"miner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint32\\",\\"name\\":\\"\\",\\"type\\":\\"uint32\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"_claim\\",\\"outputs\\":[{\\"internalType\\":\\"address payable[]\\",\\"name\\":\\"recipients\\",\\"type\\":\\"address[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"tokenCommisions\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"ethCommisions\\",\\"type\\":\\"uint256[]\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"user\\",\\"type\\":\\"address\\"}],\\"name\\":\\"_hasReferral\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"referrer\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"user\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"_referral\\",\\"outputs\\":[{\\"internalType\\":\\"address payable[]\\",\\"name\\":\\"recipients\\",\\"type\\":\\"address[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"tokenCommisions\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"ethCommisions\\",\\"type\\":\\"uint256[]\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"claimsCnt\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"hasReferral\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"marketingAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"referralsCnt\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/LuminaCampaignLaunch.sol\\":\\"LuminaCampaignLaunch\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaCampaign.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaCampaign {\\\\n\\\\n    function _hasReferral(address user) external view returns (bool); // onlyMarketing\\\\n    function _referral(address referrer, address sender, uint256 tokenBudget, uint256 ethBudget) external returns (address payable[] memory recipients, uint256[] memory tokenCommisions, uint256[] memory ethCommisions); // onlyMarketing\\\\n    function _claim(uint64 blockNumber, address miner, address recipient, uint32 rewardUnits, uint8 commisionPrc, uint256 tokenBudget, uint256 ethBudget) external returns (address payable [] memory recipients, uint256[] memory tokenCommisions, uint256[] memory ethCommisions); // onlyMarketing\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x52b2c386db7350d7c31a107d6b04ea93d89e5844d156a0cd576eb182022e6cfa\\",\\"license\\":\\"MIT\\"},\\"contracts/LuminaCampaignLaunch.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./ILuminaCampaign.sol\\\\\\";\\\\nimport \\\\\\"./OnlyMarketing.sol\\\\\\";\\\\n\\\\n//\\\\n// This campaign start at the token launch and will end when it runs out of budget\\\\n//\\\\n// For each Referral the campaign pays:\\\\n// - 0.1 LUMI to both referrer and new user\\\\n// - 0.1 MATIC to new users with balance less than 0.1 MATIC\\\\n//\\\\n// Conditions:\\\\n// - referrer address cannot match the new user address\\\\n// - the user doesn\'t have any referral yet\\\\n//\\\\n// For each first claim the campaign pays:\\\\n// - 0.1 LUMI to both referrer and new user\\\\n// - 0.1 MATIC to users with balance less than 0.1 MATIC\\\\n//\\\\n// Conditions:\\\\n// - miner address must be the same as claim recipient address\\\\n// - the user didn\'t make any claim before\\\\n// - if the user doesn\'t have any referral, he is still paid\\\\n//\\\\ncontract LuminaCampaignLaunch is ILuminaCampaign, OnlyMarketing {\\\\n    uint256 constant TOKEN_UNIT = 10 ** 18;\\\\n\\\\n    uint64 public referralsCnt;\\\\n    uint64 public claimsCnt;\\\\n\\\\n    // sender => referrer\\\\n    mapping(address => address) private _referrals;\\\\n    mapping(address => bool) private _claims;\\\\n\\\\n    function hasReferral() external view returns (bool) {\\\\n        return _referrals[msg.sender] != address(0);\\\\n    }\\\\n\\\\n    constructor(address marketingAddr_) OnlyMarketing(marketingAddr_) {\\\\n    }\\\\n\\\\n    function _hasReferral(address user) external view onlyMarketing returns (bool) {\\\\n        return _referrals[user] != address(0);\\\\n    }\\\\n\\\\n    function _referral(address referrer, address user, uint256 /*tokenBudget*/, uint256 /*ethBudget*/) external onlyMarketing\\\\n    returns (address payable[] memory recipients, uint256[] memory tokenCommisions, uint256[] memory ethCommisions) {\\\\n        require(referrer != user, \\\\\\"Referrer cannot be referral sender\\\\\\");\\\\n        require(_referrals[user] == address(0), \\\\\\"Only one referral per sender is allowed\\\\\\");\\\\n\\\\n        referralsCnt++;\\\\n\\\\n        uint8 cnt = 2;\\\\n        recipients = new address payable[](cnt);\\\\n        tokenCommisions = new uint256[](cnt);\\\\n        ethCommisions = new uint256[](cnt);\\\\n\\\\n        uint8 i = 0;\\\\n        recipients[i] = payable(referrer);\\\\n        tokenCommisions[i] = TOKEN_UNIT/10;\\\\n        ethCommisions[i] = 0;\\\\n\\\\n        i++;\\\\n        recipients[i] = payable(user);\\\\n        tokenCommisions[i] = TOKEN_UNIT/10;\\\\n        if(user.balance < TOKEN_UNIT/10) {\\\\n            ethCommisions[i] = TOKEN_UNIT/10;\\\\n        }\\\\n\\\\n        _referrals[user] = referrer;\\\\n    }\\\\n\\\\n    function _claim(uint64 /*blockNumber*/, address miner, address recipient, uint32 /*rewardUnits*/, uint8 /*commisionPrc*/, uint256 /*tokenBudget*/, uint256 /*ethBudget*/) external onlyMarketing\\\\n    returns (address payable [] memory recipients, uint256[] memory tokenCommisions, uint256[] memory ethCommisions) {\\\\n        claimsCnt++;\\\\n\\\\n        if(miner == recipient && !_claims[recipient]) {\\\\n            address referrer = _referrals[recipient];\\\\n\\\\n            uint8 cnt = referrer != address(0) ? 2 : 1;\\\\n            recipients = new address payable[](cnt);\\\\n            tokenCommisions = new uint256[](cnt);\\\\n            ethCommisions = new uint256[](cnt);\\\\n\\\\n            uint8 i = 0;\\\\n            recipients[i] = payable(recipient);\\\\n            tokenCommisions[i] = TOKEN_UNIT/10;\\\\n            if(recipient.balance < TOKEN_UNIT/10) {\\\\n                ethCommisions[i] = TOKEN_UNIT/10;\\\\n            }\\\\n\\\\n            if(referrer != address(0)) {\\\\n                i++;\\\\n                recipients[i] = payable(referrer);\\\\n                tokenCommisions[i] = TOKEN_UNIT/10;\\\\n            }\\\\n\\\\n            _claims[recipient] = true;\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xfbffc97757c22a75d8bc3f68fcf8a9ef819673c8c919a3968be9c49c63df84d3\\",\\"license\\":\\"MIT\\"},\\"contracts/OnlyMarketing.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyMarketing`, which can be applied to your functions to restrict their use to\\\\n * the marketing contract.\\\\n */\\\\nabstract contract OnlyMarketing is Context {\\\\n    address private _marketingAddr;\\\\n\\\\n    constructor(address marketingAddr_) {\\\\n        _marketingAddr = marketingAddr_;\\\\n    }\\\\n\\\\n    function marketingAddr() public view returns (address) {\\\\n        return _marketingAddr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the marketing.\\\\n     */\\\\n    modifier onlyMarketing() {\\\\n        require(marketingAddr() == _msgSender(), \\\\\\"OnlyMarketing: only marketing can execute this function\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd418f6b3e73e7ee9907beaadd7ae060cbb7839c9c88b089ffc5e39bd8eeb7871\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x608060405234801561001057600080fd5b50604051610c27380380610c2783398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610b94806100936000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806348d497c71161005b57806348d497c7146100fa5780634fe309701461010d57806356494faa14610139578063c142fed81461014c57600080fd5b806303c9f1e7146100825780633f2ee795146100ad5780633ff42b92146100df575b600080fd5b6100956100903660046108a8565b61015f565b6040516100a49392919061097d565b60405180910390f35b6000546100c790600160a01b90046001600160401b031681565b6040516001600160401b0390911681526020016100a4565b6000546040516001600160a01b0390911681526020016100a4565b6100956101083660046109f2565b61049e565b336000908152600260205260409020546001600160a01b031615155b60405190151581526020016100a4565b610129610147366004610a34565b610842565b6001546100c7906001600160401b031681565b60608080336001600160a01b031661017f6000546001600160a01b031690565b6001600160a01b0316146101ae5760405162461bcd60e51b81526004016101a590610a56565b60405180910390fd5b600180546001600160401b03169060006101c783610ac9565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050876001600160a01b0316896001600160a01b031614801561022657506001600160a01b03881660009081526003602052604090205460ff16155b15610491576001600160a01b038089166000908152600260205260408120549091169081610255576001610258565b60025b90508060ff166001600160401b0381111561027557610275610af0565b60405190808252806020026020018201604052801561029e578160200160208202803683370190505b5094508060ff166001600160401b038111156102bc576102bc610af0565b6040519080825280602002602001820160405280156102e5578160200160208202803683370190505b5093508060ff166001600160401b0381111561030357610303610af0565b60405190808252806020026020018201604052801561032c578160200160208202803683370190505b50925060008a868260ff168151811061034757610347610b06565b6001600160a01b0390921660209283029190910190910152610372600a670de0b6b3a7640000610b1c565b858260ff168151811061038757610387610b06565b60209081029190910101526103a5600a670de0b6b3a7640000610b1c565b8b6001600160a01b03163110156103eb576103c9600a670de0b6b3a7640000610b1c565b848260ff16815181106103de576103de610b06565b6020026020010181815250505b6001600160a01b0383161561046a578061040481610b3e565b91505082868260ff168151811061041d5761041d610b06565b6001600160a01b0390921660209283029190910190910152610448600a670de0b6b3a7640000610b1c565b858260ff168151811061045d5761045d610b06565b6020026020010181815250505b5050506001600160a01b0388166000908152600360205260409020805460ff191660011790555b9750975097945050505050565b60608080336001600160a01b03166104be6000546001600160a01b031690565b6001600160a01b0316146104e45760405162461bcd60e51b81526004016101a590610a56565b856001600160a01b0316876001600160a01b031614156105515760405162461bcd60e51b815260206004820152602260248201527f52656665727265722063616e6e6f7420626520726566657272616c2073656e6460448201526132b960f11b60648201526084016101a5565b6001600160a01b0386811660009081526002602052604090205416156105c95760405162461bcd60e51b815260206004820152602760248201527f4f6e6c79206f6e6520726566657272616c207065722073656e64657220697320604482015266185b1b1bddd95960ca1b60648201526084016101a5565b60008054600160a01b90046001600160401b03169060146105e983610ac9565b82546001600160401b039182166101009390930a9283029190920219909116179055506040805160028082526060820183529182906020830190803683370190505093508060ff166001600160401b0381111561064857610648610af0565b604051908082528060200260200182016040528015610671578160200160208202803683370190505b5092508060ff166001600160401b0381111561068f5761068f610af0565b6040519080825280602002602001820160405280156106b8578160200160208202803683370190505b509150600088858260ff16815181106106d3576106d3610b06565b6001600160a01b03909216602092830291909101909101526106fe600a670de0b6b3a7640000610b1c565b848260ff168151811061071357610713610b06565b6020026020010181815250506000838260ff168151811061073657610736610b06565b60209081029190910101528061074b81610b3e565b91505087858260ff168151811061076457610764610b06565b6001600160a01b039092166020928302919091019091015261078f600a670de0b6b3a7640000610b1c565b848260ff16815181106107a4576107a4610b06565b60209081029190910101526107c2600a670de0b6b3a7640000610b1c565b886001600160a01b0316311015610808576107e6600a670de0b6b3a7640000610b1c565b838260ff16815181106107fb576107fb610b06565b6020026020010181815250505b50506001600160a01b0395861660009081526002602052604090208054969097166001600160a01b03199096169590951790955594915050565b600080546001600160a01b0316331461086d5760405162461bcd60e51b81526004016101a590610a56565b506001600160a01b038181166000908152600260205260409020541615155b919050565b80356001600160a01b038116811461088c57600080fd5b600080600080600080600060e0888a0312156108c357600080fd5b87356001600160401b03811681146108da57600080fd5b96506108e860208901610891565b95506108f660408901610891565b9450606088013563ffffffff8116811461090f57600080fd5b9350608088013560ff8116811461092557600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600081518084526020808501945080840160005b8381101561097257815187529582019590820190600101610956565b509495945050505050565b606080825284519082018190526000906020906080840190828801845b828110156109bf5781516001600160a01b03168452928401929084019060010161099a565b505050838103828501526109d38187610942565b91505082810360408401526109e88185610942565b9695505050505050565b60008060008060808587031215610a0857600080fd5b610a1185610891565b9350610a1f60208601610891565b93969395505050506040820135916060013590565b600060208284031215610a4657600080fd5b610a4f82610891565b9392505050565b60208082526037908201527f4f6e6c794d61726b6574696e673a206f6e6c79206d61726b6574696e6720636160408201527f6e206578656375746520746869732066756e6374696f6e000000000000000000606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0380831681811415610ae657610ae6610ab3565b6001019392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600082610b3957634e487b7160e01b600052601260045260246000fd5b500490565b600060ff821660ff811415610b5557610b55610ab3565b6001019291505056fea26469706673582212208e7128a19127e553b3b20615da58b8ff7236aca6775145432abb39f8619e425064736f6c634300080b0033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806348d497c71161005b57806348d497c7146100fa5780634fe309701461010d57806356494faa14610139578063c142fed81461014c57600080fd5b806303c9f1e7146100825780633f2ee795146100ad5780633ff42b92146100df575b600080fd5b6100956100903660046108a8565b61015f565b6040516100a49392919061097d565b60405180910390f35b6000546100c790600160a01b90046001600160401b031681565b6040516001600160401b0390911681526020016100a4565b6000546040516001600160a01b0390911681526020016100a4565b6100956101083660046109f2565b61049e565b336000908152600260205260409020546001600160a01b031615155b60405190151581526020016100a4565b610129610147366004610a34565b610842565b6001546100c7906001600160401b031681565b60608080336001600160a01b031661017f6000546001600160a01b031690565b6001600160a01b0316146101ae5760405162461bcd60e51b81526004016101a590610a56565b60405180910390fd5b600180546001600160401b03169060006101c783610ac9565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050876001600160a01b0316896001600160a01b031614801561022657506001600160a01b03881660009081526003602052604090205460ff16155b15610491576001600160a01b038089166000908152600260205260408120549091169081610255576001610258565b60025b90508060ff166001600160401b0381111561027557610275610af0565b60405190808252806020026020018201604052801561029e578160200160208202803683370190505b5094508060ff166001600160401b038111156102bc576102bc610af0565b6040519080825280602002602001820160405280156102e5578160200160208202803683370190505b5093508060ff166001600160401b0381111561030357610303610af0565b60405190808252806020026020018201604052801561032c578160200160208202803683370190505b50925060008a868260ff168151811061034757610347610b06565b6001600160a01b0390921660209283029190910190910152610372600a670de0b6b3a7640000610b1c565b858260ff168151811061038757610387610b06565b60209081029190910101526103a5600a670de0b6b3a7640000610b1c565b8b6001600160a01b03163110156103eb576103c9600a670de0b6b3a7640000610b1c565b848260ff16815181106103de576103de610b06565b6020026020010181815250505b6001600160a01b0383161561046a578061040481610b3e565b91505082868260ff168151811061041d5761041d610b06565b6001600160a01b0390921660209283029190910190910152610448600a670de0b6b3a7640000610b1c565b858260ff168151811061045d5761045d610b06565b6020026020010181815250505b5050506001600160a01b0388166000908152600360205260409020805460ff191660011790555b9750975097945050505050565b60608080336001600160a01b03166104be6000546001600160a01b031690565b6001600160a01b0316146104e45760405162461bcd60e51b81526004016101a590610a56565b856001600160a01b0316876001600160a01b031614156105515760405162461bcd60e51b815260206004820152602260248201527f52656665727265722063616e6e6f7420626520726566657272616c2073656e6460448201526132b960f11b60648201526084016101a5565b6001600160a01b0386811660009081526002602052604090205416156105c95760405162461bcd60e51b815260206004820152602760248201527f4f6e6c79206f6e6520726566657272616c207065722073656e64657220697320604482015266185b1b1bddd95960ca1b60648201526084016101a5565b60008054600160a01b90046001600160401b03169060146105e983610ac9565b82546001600160401b039182166101009390930a9283029190920219909116179055506040805160028082526060820183529182906020830190803683370190505093508060ff166001600160401b0381111561064857610648610af0565b604051908082528060200260200182016040528015610671578160200160208202803683370190505b5092508060ff166001600160401b0381111561068f5761068f610af0565b6040519080825280602002602001820160405280156106b8578160200160208202803683370190505b509150600088858260ff16815181106106d3576106d3610b06565b6001600160a01b03909216602092830291909101909101526106fe600a670de0b6b3a7640000610b1c565b848260ff168151811061071357610713610b06565b6020026020010181815250506000838260ff168151811061073657610736610b06565b60209081029190910101528061074b81610b3e565b91505087858260ff168151811061076457610764610b06565b6001600160a01b039092166020928302919091019091015261078f600a670de0b6b3a7640000610b1c565b848260ff16815181106107a4576107a4610b06565b60209081029190910101526107c2600a670de0b6b3a7640000610b1c565b886001600160a01b0316311015610808576107e6600a670de0b6b3a7640000610b1c565b838260ff16815181106107fb576107fb610b06565b6020026020010181815250505b50506001600160a01b0395861660009081526002602052604090208054969097166001600160a01b03199096169590951790955594915050565b600080546001600160a01b0316331461086d5760405162461bcd60e51b81526004016101a590610a56565b506001600160a01b038181166000908152600260205260409020541615155b919050565b80356001600160a01b038116811461088c57600080fd5b600080600080600080600060e0888a0312156108c357600080fd5b87356001600160401b03811681146108da57600080fd5b96506108e860208901610891565b95506108f660408901610891565b9450606088013563ffffffff8116811461090f57600080fd5b9350608088013560ff8116811461092557600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600081518084526020808501945080840160005b8381101561097257815187529582019590820190600101610956565b509495945050505050565b606080825284519082018190526000906020906080840190828801845b828110156109bf5781516001600160a01b03168452928401929084019060010161099a565b505050838103828501526109d38187610942565b91505082810360408401526109e88185610942565b9695505050505050565b60008060008060808587031215610a0857600080fd5b610a1185610891565b9350610a1f60208601610891565b93969395505050506040820135916060013590565b600060208284031215610a4657600080fd5b610a4f82610891565b9392505050565b60208082526037908201527f4f6e6c794d61726b6574696e673a206f6e6c79206d61726b6574696e6720636160408201527f6e206578656375746520746869732066756e6374696f6e000000000000000000606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0380831681811415610ae657610ae6610ab3565b6001019392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600082610b3957634e487b7160e01b600052601260045260246000fd5b500490565b600060ff821660ff811415610b5557610b55610ab3565b6001019291505056fea26469706673582212208e7128a19127e553b3b20615da58b8ff7236aca6775145432abb39f8619e425064736f6c634300080b0033","devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":6198,"contract":"contracts/LuminaCampaignLaunch.sol:LuminaCampaignLaunch","label":"_marketingAddr","offset":0,"slot":"0","type":"t_address"},{"astId":3097,"contract":"contracts/LuminaCampaignLaunch.sol:LuminaCampaignLaunch","label":"referralsCnt","offset":20,"slot":"0","type":"t_uint64"},{"astId":3099,"contract":"contracts/LuminaCampaignLaunch.sol:LuminaCampaignLaunch","label":"claimsCnt","offset":0,"slot":"1","type":"t_uint64"},{"astId":3103,"contract":"contracts/LuminaCampaignLaunch.sol:LuminaCampaignLaunch","label":"_referrals","offset":0,"slot":"2","type":"t_mapping(t_address,t_address)"},{"astId":3107,"contract":"contracts/LuminaCampaignLaunch.sol:LuminaCampaignLaunch","label":"_claims","offset":0,"slot":"3","type":"t_mapping(t_address,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_address)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}}}')},183:function(e){e.exports=JSON.parse('{"address":"0xf0c2c63aA2B6253e33436bc04f6aF3c2008DC52d","abi":[{"inputs":[{"internalType":"address","name":"tokenAddr_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"campaignAddr","type":"address"},{"indexed":false,"internalType":"uint64","name":"blockNumber","type":"uint64"},{"indexed":false,"internalType":"string","name":"message","type":"string"}],"name":"CampaignClaimFailed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"campaignAddr","type":"address"},{"indexed":false,"internalType":"address","name":"tokenAddr","type":"address"},{"indexed":false,"internalType":"string","name":"message","type":"string"}],"name":"TokenCallFailed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_WEEK","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_DIFFICULTY_STEP","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_NULL","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEMO","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LUCKY_NUMBER","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_CNT","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_DONOR_BLOCKS","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINERS_CLAIM_MIN_RECIPIENT_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARDS_CNT_LIMIT","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_INC_INTERVAL","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_INC","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_STANDARD","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_START","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_DECIMALS","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"miner","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint32","name":"rewardUnits","type":"uint32"},{"internalType":"uint8","name":"commisionPrc","type":"uint8"}],"name":"_claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"},{"internalType":"uint256","name":"tokenBudget","type":"uint256"},{"internalType":"uint256","name":"ethBudget","type":"uint256"}],"name":"addBudget","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"addCampaign","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"trusteeAddr_","type":"address"}],"name":"attachTrustee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"getCampaign","outputs":[{"internalType":"uint256","name":"tokenBudget","type":"uint256"},{"internalType":"uint256","name":"ethBudget","type":"uint256"},{"internalType":"uint8","name":"campaignId","type":"uint8"},{"internalType":"bool","name":"valid","type":"bool"},{"internalType":"bool","name":"active","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCampaigns","outputs":[{"internalType":"address[]","name":"campaigns","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"hasReferral","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"},{"internalType":"address","name":"referrer","type":"address"}],"name":"referral","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"removeBudget","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"removeCampaign","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"startCampaign","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"campaignAddr","type":"address"}],"name":"stopCampaign","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tokenAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"trusteeAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"transactionHash":"0x866cd38a96933ede3337ae36dd8fcaa6a7f71a9fd7258d6f8cff0ba3b6e80ebd","receipt":{"to":null,"from":"0xC72E6D4E629F1C89d57f4D7Ad511d1b221D1d757","contractAddress":"0xf0c2c63aA2B6253e33436bc04f6aF3c2008DC52d","transactionIndex":0,"gasUsed":"2270755","logsBloom":"0xblockHash":"0xef28481679dfa62dbc0fe6b7df49080124126ea2e4299a9658c22c5c5e10ace8","transactionHash":"0x866cd38a96933ede3337ae36dd8fcaa6a7f71a9fd7258d6f8cff0ba3b6e80ebd","logs":[{"transactionIndex":0,"blockNumber":24340046,"transactionHash":"0x866cd38a96933ede3337ae36dd8fcaa6a7f71a9fd7258d6f8cff0ba3b6e80ebd","address":"0xf0c2c63aA2B6253e33436bc04f6aF3c2008DC52d","topics":["0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757"],"data":"0x","logIndex":0,"blockHash":"0xef28481679dfa62dbc0fe6b7df49080124126ea2e4299a9658c22c5c5e10ace8"},{"transactionIndex":0,"blockNumber":24340046,"transactionHash":"0x866cd38a96933ede3337ae36dd8fcaa6a7f71a9fd7258d6f8cff0ba3b6e80ebd","address":"0xf0c2c63aA2B6253e33436bc04f6aF3c2008DC52d","topics":["0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258"],"data":"0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","logIndex":1,"blockHash":"0xef28481679dfa62dbc0fe6b7df49080124126ea2e4299a9658c22c5c5e10ace8"},{"transactionIndex":0,"blockNumber":24340046,"transactionHash":"0x866cd38a96933ede3337ae36dd8fcaa6a7f71a9fd7258d6f8cff0ba3b6e80ebd","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"],"data":"0x00000000000000000000000000000000000000000000000000f20530710e06a2000000000000000000000000000000000000000000000000074beddbd86ca1190000000000000000000000000000000000000000000005a8c9b3b7c3e44f12610000000000000000000000000000000000000000000000000659e8ab675e9a770000000000000000000000000000000000000000000005a8caa5bcf4555d1903","logIndex":2,"blockHash":"0xef28481679dfa62dbc0fe6b7df49080124126ea2e4299a9658c22c5c5e10ace8"}],"blockNumber":24340046,"cumulativeGasUsed":"2270755","status":1,"byzantium":true},"args":["0x77A8dE2d74e1328B989a3f4D8C4aEAB1e2A186fD"],"solcInputHash":"93d9a3e5beccfe46ed35f40bd3a64522","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.11+commit.d7f03943\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"tokenAddr_\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"indexed\\":false,\\"internalType\\":\\"string\\",\\"name\\":\\"message\\",\\"type\\":\\"string\\"}],\\"name\\":\\"CampaignClaimFailed\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"previousOwner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"OwnershipTransferred\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Paused\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"tokenAddr\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"string\\",\\"name\\":\\"message\\",\\"type\\":\\"string\\"}],\\"name\\":\\"TokenCallFailed\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Unpaused\\",\\"type\\":\\"event\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_WEEK\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_DIFFICULTY_STEP\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_NULL\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"DEMO\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"LUCKY_NUMBER\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_CNT\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_DONOR_BLOCKS\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MINERS_CLAIM_MIN_RECIPIENT_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MIN_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARDS_CNT_LIMIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_STANDARD\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_START\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_DECIMALS\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"miner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint32\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint32\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"commisionPrc\\",\\"type\\":\\"uint8\\"}],\\"name\\":\\"_claim\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenBudget\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"ethBudget\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"addBudget\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"addCampaign\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"trusteeAddr_\\",\\"type\\":\\"address\\"}],\\"name\\":\\"attachTrustee\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getCampaign\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenBudget\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"ethBudget\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"campaignId\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"valid\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"active\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getCampaigns\\",\\"outputs\\":[{\\"internalType\\":\\"address[]\\",\\"name\\":\\"campaigns\\",\\"type\\":\\"address[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"hasReferral\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"owner\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"pause\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"paused\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"referrer\\",\\"type\\":\\"address\\"}],\\"name\\":\\"referral\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"removeBudget\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"removeCampaign\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"renounceOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"startCampaign\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"campaignAddr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"stopCampaign\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"tokenAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"transferOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"trusteeAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"unpause\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"stateMutability\\":\\"payable\\",\\"type\\":\\"receive\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"paused()\\":{\\"details\\":\\"Returns true if the contract is paused, and false otherwise.\\"},\\"renounceOwnership()\\":{\\"details\\":\\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\\"},\\"transferOwnership(address)\\":{\\"details\\":\\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/LuminaMarketing.sol\\":\\"LuminaMarketing\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/access/Ownable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * By default, the owner account will be the one that deploys the contract. This\\\\n * can later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\nabstract contract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\\\n     */\\\\n    constructor() {\\\\n        _transferOwnership(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view virtual returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        require(owner() == _msgSender(), \\\\\\"Ownable: caller is not the owner\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby removing any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        _transferOwnership(address(0));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        require(newOwner != address(0), \\\\\\"Ownable: new owner is the zero address\\\\\\");\\\\n        _transferOwnership(newOwner);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Internal function without access restriction.\\\\n     */\\\\n    function _transferOwnership(address newOwner) internal virtual {\\\\n        address oldOwner = _owner;\\\\n        _owner = newOwner;\\\\n        emit OwnershipTransferred(oldOwner, newOwner);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/security/Pausable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which allows children to implement an emergency stop\\\\n * mechanism that can be triggered by an authorized account.\\\\n *\\\\n * This module is used through inheritance. It will make available the\\\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\\\n * the functions of your contract. Note that they will not be pausable by\\\\n * simply including this module, only once the modifiers are put in place.\\\\n */\\\\nabstract contract Pausable is Context {\\\\n    /**\\\\n     * @dev Emitted when the pause is triggered by `account`.\\\\n     */\\\\n    event Paused(address account);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the pause is lifted by `account`.\\\\n     */\\\\n    event Unpaused(address account);\\\\n\\\\n    bool private _paused;\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract in unpaused state.\\\\n     */\\\\n    constructor() {\\\\n        _paused = false;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns true if the contract is paused, and false otherwise.\\\\n     */\\\\n    function paused() public view virtual returns (bool) {\\\\n        return _paused;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must not be paused.\\\\n     */\\\\n    modifier whenNotPaused() {\\\\n        require(!paused(), \\\\\\"Pausable: paused\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to make a function callable only when the contract is paused.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must be paused.\\\\n     */\\\\n    modifier whenPaused() {\\\\n        require(paused(), \\\\\\"Pausable: not paused\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Triggers stopped state.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must not be paused.\\\\n     */\\\\n    function _pause() internal virtual whenNotPaused {\\\\n        _paused = true;\\\\n        emit Paused(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns to normal state.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must be paused.\\\\n     */\\\\n    function _unpause() internal virtual whenPaused {\\\\n        _paused = false;\\\\n        emit Unpaused(_msgSender());\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaCampaign.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaCampaign {\\\\n\\\\n    function _hasReferral(address user) external view returns (bool); // onlyMarketing\\\\n    function _referral(address referrer, address sender, uint256 tokenBudget, uint256 ethBudget) external returns (address payable[] memory recipients, uint256[] memory tokenCommisions, uint256[] memory ethCommisions); // onlyMarketing\\\\n    function _claim(uint64 blockNumber, address miner, address recipient, uint32 rewardUnits, uint8 commisionPrc, uint256 tokenBudget, uint256 ethBudget) external returns (address payable [] memory recipients, uint256[] memory tokenCommisions, uint256[] memory ethCommisions); // onlyMarketing\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x52b2c386db7350d7c31a107d6b04ea93d89e5844d156a0cd576eb182022e6cfa\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaMarketing.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaMarketing {\\\\n\\\\n    function owner() external view returns (address);\\\\n    function _claim(uint64 blockNumber, address miner, address recipient, uint32 rewardUnits, uint8 commisionPrc) external; // onlyTrustee\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xc44193582232f924e25c27851cc5fc3dec1fb12b8299ef8b76d6cef4a0528e9d\\",\\"license\\":\\"MIT\\"},\\"contracts/LuminaMarketing.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/security/Pausable.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./ILuminaMarketing.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaCampaign.sol\\\\\\";\\\\nimport \\\\\\"./Parameters.sol\\\\\\";\\\\nimport \\\\\\"./OnlyTrustee.sol\\\\\\";\\\\n\\\\ncontract LuminaMarketing is ILuminaMarketing, Parameters, Ownable, Pausable, OnlyTrustee {\\\\n\\\\n    // Public address of the linked token contract\\\\n    address public tokenAddr;\\\\n    // Link to ERC20 tokens contract\\\\n    IERC20 private token;\\\\n\\\\n    struct CampaignRecord {\\\\n        uint256 tokenBudget;\\\\n        uint256 ethBudget;\\\\n        uint8 campaignId;\\\\n        bool valid;\\\\n        bool active;\\\\n    }\\\\n\\\\n    // Unallocated Budgets\\\\n    uint256 private _totalTokenBudget;\\\\n    uint256 private _totalEthBudget;\\\\n\\\\n    // Campaigns\\\\n    address[] private _campaigns;\\\\n    mapping (address => CampaignRecord) private _campaignsMap;\\\\n\\\\n    // Events\\\\n    event CampaignClaimFailed(address campaignAddr, uint64 blockNumber, string message);\\\\n    event TokenCallFailed(address campaignAddr, address tokenAddr, string message);\\\\n\\\\n    constructor(address tokenAddr_) {\\\\n        pause();\\\\n        tokenAddr = tokenAddr_;\\\\n        token = IERC20(tokenAddr);\\\\n    }\\\\n\\\\n    function pause() public onlyOwner {\\\\n        super._pause();\\\\n    }\\\\n\\\\n    function unpause() public onlyOwner {\\\\n        super._unpause();\\\\n    }\\\\n\\\\n    function owner() public view virtual override(ILuminaMarketing, Ownable) returns (address) {\\\\n        return super.owner();\\\\n    }\\\\n\\\\n    function renounceOwnership() public virtual override onlyOwner whenNotPaused {\\\\n        super.renounceOwnership();\\\\n    }\\\\n\\\\n    function getCampaigns() public view returns (address[] memory campaigns) {\\\\n        campaigns = _campaigns;\\\\n    }\\\\n\\\\n    // This contract can receive eth\\\\n    receive() external payable {}\\\\n\\\\n    function getCampaign(address campaignAddr) public view returns (uint256 tokenBudget, uint256 ethBudget, uint8 campaignId, bool valid, bool active) {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        tokenBudget = cr.tokenBudget;\\\\n        ethBudget = cr.ethBudget;\\\\n        campaignId = cr.campaignId;\\\\n        valid = cr.valid;\\\\n        active = cr.active;\\\\n    }\\\\n\\\\n    function addCampaign(address campaignAddr) public onlyOwner {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(!cr.valid, \\\\\\"The campaign with this contract address already exists\\\\\\");\\\\n        require(_campaigns.length < 256, \\\\\\"No more campaigns are allowed\\\\\\");\\\\n        cr.valid = true;\\\\n        cr.campaignId = uint8(_campaigns.length);\\\\n        _campaigns.push(campaignAddr);\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n    }\\\\n\\\\n    function removeCampaign(address campaignAddr) public onlyOwner {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        removeBudget(campaignAddr);\\\\n        address movingAddr = _campaigns[_campaigns.length-1];\\\\n        require(_campaignsMap[movingAddr].valid, \\\\\\"Incosistent campaign data\\\\\\");\\\\n        _campaignsMap[movingAddr].campaignId = cr.campaignId;\\\\n        _campaigns[cr.campaignId] = movingAddr;\\\\n        _campaigns.pop();\\\\n        cr.valid = false;\\\\n        delete _campaignsMap[campaignAddr];\\\\n    }\\\\n\\\\n    function addBudget(address campaignAddr, uint256 tokenBudget, uint256 ethBudget) public onlyOwner {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        require(token.balanceOf(address(this)) >= _totalTokenBudget + tokenBudget, \\\\\\"Insufficient token balance\\\\\\");\\\\n        require(address(this).balance >= _totalEthBudget + ethBudget, \\\\\\"Insufficient eth balance\\\\\\");\\\\n        _totalTokenBudget += tokenBudget;\\\\n        _totalEthBudget += ethBudget;\\\\n        cr.tokenBudget += tokenBudget;\\\\n        cr.ethBudget += ethBudget;\\\\n    }\\\\n\\\\n    function removeBudget(address campaignAddr) public onlyOwner {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        require(_totalTokenBudget >= cr.tokenBudget, \\\\\\"Inconsistent budget data\\\\\\");\\\\n        require(_totalEthBudget >= cr.ethBudget, \\\\\\"Inconsistent budget data\\\\\\");\\\\n        _totalTokenBudget -= cr.tokenBudget;\\\\n        _totalEthBudget -= cr.ethBudget;\\\\n        cr.tokenBudget = 0;\\\\n        cr.ethBudget = 0;\\\\n    }\\\\n\\\\n    function startCampaign(address campaignAddr) public onlyOwner {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        cr.active = true;\\\\n    }\\\\n\\\\n    function stopCampaign(address campaignAddr) public onlyOwner {\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        cr.active = false;\\\\n    }\\\\n\\\\n    function hasReferral(address campaignAddr) external view returns (bool) {\\\\n        require(!paused(), \\\\\\"The marketing contract is paused\\\\\\");\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        require(cr.active, \\\\\\"The campaign is not active\\\\\\");\\\\n        ILuminaCampaign luminaCampaign = ILuminaCampaign(campaignAddr);\\\\n        return luminaCampaign._hasReferral(msg.sender);\\\\n    }\\\\n\\\\n    function referral(address campaignAddr, address referrer) external {\\\\n        if(paused()) {\\\\n            return;\\\\n        }\\\\n\\\\n        CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n        require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n        require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n        if(cr.active) {\\\\n            ILuminaCampaign luminaCampaign = ILuminaCampaign(campaignAddr);\\\\n            (address payable [] memory recipients, uint256[] memory tokenCommisions, uint256[] memory ethCommisions) = luminaCampaign._referral(referrer, msg.sender, cr.tokenBudget, cr.ethBudget);\\\\n            _payCommisions(campaignAddr, cr, recipients, tokenCommisions, ethCommisions);\\\\n        }\\\\n    }\\\\n\\\\n    function _claim(uint64 blockNumber, address miner, address recipient, uint32 rewardUnits, uint8 commisionPrc) external onlyTrustee {\\\\n        if(paused()) {\\\\n            return;\\\\n        }\\\\n\\\\n        for(uint32 i = 0; i < _campaigns.length; i++) {\\\\n            address campaignAddr = _campaigns[i];\\\\n            CampaignRecord storage cr = _campaignsMap[campaignAddr];\\\\n            require(cr.valid, \\\\\\"The campaign does not exist\\\\\\");\\\\n            require(_campaigns[cr.campaignId] == campaignAddr, \\\\\\"Inconsistent campaign list\\\\\\");\\\\n            if(cr.active) {\\\\n                ILuminaCampaign luminaCampaign = ILuminaCampaign(campaignAddr);\\\\n                try luminaCampaign._claim(blockNumber, miner, recipient, rewardUnits, commisionPrc, cr.tokenBudget, cr.ethBudget)\\\\n                returns (address payable [] memory recipients, uint256[] memory tokenCommisions, uint256[] memory ethCommisions) {\\\\n                    _payCommisions(campaignAddr, cr, recipients, tokenCommisions, ethCommisions);\\\\n                } catch Error(string memory message) {\\\\n                    emit CampaignClaimFailed(campaignAddr, blockNumber, message);\\\\n                } catch {\\\\n                    emit CampaignClaimFailed(campaignAddr, blockNumber, \\\\\\"\\\\\\");\\\\n                }\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    function _payCommisions(address campaignAddr, CampaignRecord storage cr, address payable [] memory recipients, uint256[] memory tokenCommisions, uint256[] memory ethCommisions) private {\\\\n        for(uint j = 0; j < recipients.length; j++) {\\\\n            address payable recipient = recipients[j];\\\\n            if(recipient != address(0)) {\\\\n                if(j < tokenCommisions.length) {\\\\n                    uint256 tokenCommision = tokenCommisions[j];\\\\n                    if(tokenCommision > 0 && cr.tokenBudget >= tokenCommision) {\\\\n                        try token.transfer(recipient, tokenCommision) {\\\\n                            cr.tokenBudget -= tokenCommision;\\\\n                            _totalTokenBudget -= tokenCommision;\\\\n                        } catch Error(string memory message) {\\\\n                            emit TokenCallFailed(campaignAddr, tokenAddr, message);\\\\n                        } catch {\\\\n                            emit TokenCallFailed(campaignAddr, tokenAddr, \\\\\\"\\\\\\");\\\\n                        }\\\\n                    }\\\\n                }\\\\n                if(j < ethCommisions.length) {\\\\n                    uint256 ethCommision = ethCommisions[j];\\\\n                    if(ethCommision > 0 && cr.ethBudget >= ethCommision && address(this).balance >= ethCommision) {\\\\n                        recipient.transfer(ethCommision);\\\\n                        cr.ethBudget -= ethCommision;\\\\n                        _totalEthBudget -= ethCommision;\\\\n                    }\\\\n                }\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8373073026d343568ad4e771d284cd30988202e2c3eb2e78c4e16ddda0fddc4e\\",\\"license\\":\\"MIT\\"},\\"contracts/OnlyTrustee.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyTrustee`, which can be applied to your functions to restrict their use to\\\\n * the trustee contract.\\\\n */\\\\nabstract contract OnlyTrustee is Context {\\\\n    address private _creatorAddr;\\\\n    address private _trusteeAddr;\\\\n\\\\n    constructor() {\\\\n        _creatorAddr = _msgSender();\\\\n    }\\\\n\\\\n    // OnlyCreator, OnlyOnce\\\\n    function attachTrustee(address trusteeAddr_) external {\\\\n        require(_creatorAddr == _msgSender(), \\\\\\"OnlyTrustee: only creator can attach a trustee contract\\\\\\");\\\\n        require(_trusteeAddr == address(0), \\\\\\"OnlyTrustee: the trustee contract has already been attached\\\\\\");\\\\n        _creatorAddr = address(0);\\\\n        _trusteeAddr = trusteeAddr_;\\\\n    }\\\\n\\\\n    function trusteeAddr() public view returns (address) {\\\\n        return _trusteeAddr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the trustee.\\\\n     */\\\\n    modifier onlyTrustee() {\\\\n        require(trusteeAddr() == _msgSender(), \\\\\\"OnlyTrustee: only trustee can execute this function\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x12eb746297b9190789abb1b6b3fe3014c1bc186a89034858d385611256932e10\\",\\"license\\":\\"MIT\\"},\\"contracts/Parameters.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nabstract contract Parameters {\\\\n    // The DEMO mode limits rewards to 1 per challenge and limits blocks per challenge to 2\\\\n    bool public constant DEMO = true;\\\\n\\\\n    // Number of decimals in reward token\\\\n    uint8 public constant TOKEN_DECIMALS = 18;\\\\n    uint256 public constant TOKEN_UNIT = 10 ** TOKEN_DECIMALS; // 1 LUMI\\\\n\\\\n    // The lucky number determines the premium challenges\\\\n    uint8 public constant LUCKY_NUMBER = 2;\\\\n\\\\n    // Challenges\\\\n    uint8 public constant CHALLENGE_NULL = 255;\\\\n    uint8 public constant MAX_CHALLENGE_CNT = 100;\\\\n    uint8 public constant MIN_CHALLENGE_DIFFICULTY = DEMO ? 10 : 20;\\\\n    uint8 public constant MAX_CHALLENGE_DIFFICULTY = DEMO ? 208 : 218;\\\\n    uint8 public constant CHALLENGE_DIFFICULTY_STEP = 2;\\\\n\\\\n    // Creating new challenges\\\\n    uint64 public constant BLOCKS_PER_WEEK = 11454; // 3600*24*7 / 2.2\\\\n    uint64 public constant MAX_DONOR_BLOCKS = 200; // number of most recent consecutive blocks that can be used as donors\\\\n\\\\n    // Number of blocks we need to wait for a new challenge\\\\n    uint8 public constant BLOCKS_PER_CHALLENGE = DEMO ? 2 : 100;\\\\n\\\\n    // Hard limit on number of claims per challenge\\\\n    uint16 public constant REWARDS_CNT_LIMIT = DEMO ? 2 : 500;\\\\n\\\\n    // Ramp-up in Newton Epoch\\\\n    uint256 public constant REWARD_UNIT = 10 ** (TOKEN_DECIMALS-3); // 0.001 LUMI\\\\n    uint16 public constant REWARD_UNITS_START = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_INC = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_STANDARD = 1000; // 1 LUMI\\\\n    uint16 public constant REWARD_INC_INTERVAL = DEMO ? 5 : 2700; // One increase per 2700 regular challenges, ~ add reward unit every week\\\\n\\\\n    // external miners can only make claims on addresses with at least 0.001 LUMI\\\\n    uint256 public constant MINERS_CLAIM_MIN_RECIPIENT_BALANCE = REWARD_UNIT; // 0.001 LUMI\\\\n\\\\n    // Cooldown in Einstein Epoch\\\\n    // Increase BLOCKS_PER_CHALLENGE by 2 blocks every week\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC = 2;\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xfdf05776b8f8536a7ed140fa82dc569eb9a32f177c1cf9c7bd8fd02bafdf67a7\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b50604051620028ca380380620028ca833981016040819052620000349162000240565b6200003f3362000098565b6000805460ff60a01b19169055600180546001600160a01b0319163317905562000068620000e8565b600380546001600160a01b039092166001600160a01b031992831681179091556004805490921617905562000272565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b33620000f362000166565b6001600160a01b0316146200014f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b620001646200018260201b62001a431760201c565b565b60006200017d6200023160201b62001ae81760201c565b905090565b62000196600054600160a01b900460ff1690565b15620001d85760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640162000146565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620002143390565b6040516001600160a01b03909116815260200160405180910390a1565b6000546001600160a01b031690565b6000602082840312156200025357600080fd5b81516001600160a01b03811681146200026b57600080fd5b9392505050565b61264880620002826000396000f3fe60806040526004361061023f5760003560e01c8063777b0c211161012e578063b313bd62116100ab578063e3eddde21161006f578063e3eddde214610664578063e4663a5b14610684578063f2fde38b146106a4578063f883fcaa14610550578063fc47e209146106c457600080fd5b8063b313bd6214610624578063b91268e8146103a1578063c28bd11c14610550578063c28cedf314610639578063c6088d971461064e57600080fd5b80639d941362116100f25780639d9413621461051b578063a2157767146105b8578063a5c9cd82146105cd578063a6b03633146105e2578063ac9c4fd31461060457600080fd5b8063777b0c21146105305780637fb012321461055057806382e51bd0146105655780638456cb59146105855780638da5cb5b1461059a57600080fd5b80633e6e387c116101bc5780635c975abb116101805780635c975abb1461042d5780635fbe4d1d14610458578063715018a614610478578063731301cf1461048d57806373d6aafa1461051b57600080fd5b80633e6e387c146103c45780633f4ba83a146103d9578063479e92c8146103ee578063504b3662146104035780635b7f415c1461041857600080fd5b80631df55679116102035780631df5567914610313578063270d8e0e146103335780632713b9601461035357806330db4fa0146103735780633a3a7c53146103a157600080fd5b806306e386321461024b5780630bf433091461027857806314270b651461029f57806318f053da146102d15780631c505d1d146102f357600080fd5b3661024657005b600080fd5b34801561025757600080fd5b50610260600581565b60405161ffff90911681526020015b60405180910390f35b34801561028457600080fd5b5061028d60d081565b60405160ff909116815260200161026f565b3480156102ab57600080fd5b506002546001600160a01b03165b6040516001600160a01b03909116815260200161026f565b3480156102dd57600080fd5b506102f16102ec366004611ed8565b6106da565b005b3480156102ff57600080fd5b506102f161030e366004611efc565b610888565b34801561031f57600080fd5b506102f161032e366004611ed8565b6109fe565b34801561033f57600080fd5b506102f161034e366004611f35565b610b2b565b34801561035f57600080fd5b506102f161036e366004611f6a565b610d7e565b34801561037f57600080fd5b5061038860c881565b60405167ffffffffffffffff909116815260200161026f565b3480156103ad57600080fd5b506103b66110a4565b60405190815260200161026f565b3480156103d057600080fd5b50610260600281565b3480156103e557600080fd5b506102f16110be565b3480156103fa57600080fd5b5061028d600a81565b34801561040f57600080fd5b5061028d606481565b34801561042457600080fd5b5061028d601281565b34801561043957600080fd5b50600054600160a01b900460ff165b604051901515815260200161026f565b34801561046457600080fd5b506003546102b9906001600160a01b031681565b34801561048457600080fd5b506102f16110f2565b34801561049957600080fd5b506104e96104a8366004611ed8565b6001600160a01b0316600090815260086020526040902080546001820154600290920154909260ff8083169261010081048216926201000090910490911690565b60408051958652602086019490945260ff9092169284019290925290151560608301521515608082015260a00161026f565b34801561052757600080fd5b50610260600a81565b34801561053c57600080fd5b506102f161054b366004611ed8565b611171565b34801561055c57600080fd5b5061028d600281565b34801561057157600080fd5b506102f1610580366004611ed8565b611244565b34801561059157600080fd5b506102f161131c565b3480156105a657600080fd5b506000546001600160a01b03166102b9565b3480156105c457600080fd5b5061028d60ff81565b3480156105d957600080fd5b506103b661134e565b3480156105ee57600080fd5b506105f761135a565b60405161026f9190611ff7565b34801561061057600080fd5b506102f161061f366004611ed8565b6113bc565b34801561063057600080fd5b50610388600281565b34801561064557600080fd5b50610448600181565b34801561065a57600080fd5b506102606103e881565b34801561067057600080fd5b5061044861067f366004611ed8565b61158a565b34801561069057600080fd5b506102f161069f366004611ed8565b61174a565b3480156106b057600080fd5b506102f16106bf366004611ed8565b6119a8565b3480156106d057600080fd5b50610388612cbe81565b6000546001600160a01b0316331461070d5760405162461bcd60e51b815260040161070490612044565b60405180910390fd5b6001600160a01b03811660009081526008602052604090206002810154610100900460ff1661074e5760405162461bcd60e51b815260040161070490612079565b6002810154600780546001600160a01b0385169260ff16908110610774576107746120b0565b6000918252602090912001546001600160a01b0316146107a65760405162461bcd60e51b8152600401610704906120c6565b805460055410156107f45760405162461bcd60e51b8152602060048201526018602482015277496e636f6e73697374656e7420627564676574206461746160401b6044820152606401610704565b806001015460065410156108455760405162461bcd60e51b8152602060048201526018602482015277496e636f6e73697374656e7420627564676574206461746160401b6044820152606401610704565b805460058054600090610859908490612113565b9091555050600181015460068054600090610875908490612113565b9091555050600080825560019091015550565b600054600160a01b900460ff161561089e575050565b6001600160a01b03821660009081526008602052604090206002810154610100900460ff166108df5760405162461bcd60e51b815260040161070490612079565b6002810154600780546001600160a01b0386169260ff16908110610905576109056120b0565b6000918252602090912001546001600160a01b0316146109375760405162461bcd60e51b8152600401610704906120c6565b600281015462010000900460ff16156109f957805460018201546040516348d497c760e01b81526001600160a01b03858116600483015233602483015260448201939093526064810191909152849160009182918291908516906348d497c7906084016000604051808303816000875af11580156109b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109e19190810190612202565b9250925092506109f48786858585611af7565b505050505b505050565b6001546001600160a01b03163314610a7e5760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79547275737465653a206f6e6c792063726561746f722063616e20617460448201527f746163682061207472757374656520636f6e74726163740000000000000000006064820152608401610704565b6002546001600160a01b031615610afd5760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c79547275737465653a20746865207472757374656520636f6e7472616360448201527f742068617320616c7265616479206265656e20617474616368656400000000006064820152608401610704565b600180546001600160a01b0319908116909155600280549091166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610b555760405162461bcd60e51b815260040161070490612044565b6001600160a01b03831660009081526008602052604090206002810154610100900460ff16610b965760405162461bcd60e51b815260040161070490612079565b6002810154600780546001600160a01b0387169260ff16908110610bbc57610bbc6120b0565b6000918252602090912001546001600160a01b031614610bee5760405162461bcd60e51b8152600401610704906120c6565b82600554610bfc91906122f6565b600480546040516370a0823160e01b815230928101929092526001600160a01b0316906370a0823190602401602060405180830381865afa158015610c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c69919061230e565b1015610cb75760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e63650000000000006044820152606401610704565b81600654610cc591906122f6565b471015610d145760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74206574682062616c616e636500000000000000006044820152606401610704565b8260056000828254610d2691906122f6565b925050819055508160066000828254610d3f91906122f6565b9091555050805483908290600090610d589084906122f6565b9250508190555081816001016000828254610d7391906122f6565b909155505050505050565b6002546001600160a01b03163314610df45760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79547275737465653a206f6e6c7920747275737465652063616e20657860448201527232b1baba32903a3434b990333ab731ba34b7b760691b6064820152608401610704565b600054600160a01b900460ff1615610e0b5761109d565b60005b60075463ffffffff8216101561109b57600060078263ffffffff1681548110610e3957610e396120b0565b60009182526020808320909101546001600160a01b03168083526008909152604090912060028101549192509060ff61010090910416610e8b5760405162461bcd60e51b815260040161070490612079565b6002810154600780546001600160a01b0385169260ff16908110610eb157610eb16120b0565b6000918252602090912001546001600160a01b031614610ee35760405162461bcd60e51b8152600401610704906120c6565b600281015462010000900460ff161561108657805460018201546040516303c9f1e760e01b815267ffffffffffffffff8b1660048201526001600160a01b038a81166024830152898116604483015263ffffffff8916606483015260ff8816608483015260a482019390935260c481019190915283918216906303c9f1e79060e4016000604051808303816000875af1925050508015610fa557506040513d6000823e601f3d908101601f19168201604052610fa29190810190612202565b60015b61107357610fb1612327565b806308c379a014156110125750610fc6612343565b80610fd15750611014565b7f1c78fe569029f719914c6066018a968a8ca4d3810eed21ca6d09951cd0a9f590848b836040516110049392919061241a565b60405180910390a150611084565b505b604080516001600160a01b038516815267ffffffffffffffff8b166020820152606081830181905260009082015290517f1c78fe569029f719914c6066018a968a8ca4d3810eed21ca6d09951cd0a9f5909181900360800190a1611084565b6110808686858585611af7565b5050505b505b5050808061109390612457565b915050610e0e565b505b5050505050565b6110b06003601261247b565b6110bb90600a612584565b81565b6000546001600160a01b031633146110e85760405162461bcd60e51b815260040161070490612044565b6110f0611dbf565b565b6000546001600160a01b0316331461111c5760405162461bcd60e51b815260040161070490612044565b600054600160a01b900460ff16156111695760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610704565b6110f0611e43565b6000546001600160a01b0316331461119b5760405162461bcd60e51b815260040161070490612044565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166111dc5760405162461bcd60e51b815260040161070490612079565b6002810154600780546001600160a01b0385169260ff16908110611202576112026120b0565b6000918252602090912001546001600160a01b0316146112345760405162461bcd60e51b8152600401610704906120c6565b600201805462ff00001916905550565b6000546001600160a01b0316331461126e5760405162461bcd60e51b815260040161070490612044565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166112af5760405162461bcd60e51b815260040161070490612079565b6002810154600780546001600160a01b0385169260ff169081106112d5576112d56120b0565b6000918252602090912001546001600160a01b0316146113075760405162461bcd60e51b8152600401610704906120c6565b600201805462ff000019166201000017905550565b6000546001600160a01b031633146113465760405162461bcd60e51b815260040161070490612044565b6110f0611a43565b6110bb6012600a612584565b606060078054806020026020016040519081016040528092919081815260200182805480156113b257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611394575b5050505050905090565b6000546001600160a01b031633146113e65760405162461bcd60e51b815260040161070490612044565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff16156114775760405162461bcd60e51b815260206004820152603660248201527f5468652063616d706169676e2077697468207468697320636f6e7472616374206044820152756164647265737320616c72656164792065786973747360501b6064820152608401610704565b600754610100116114ca5760405162461bcd60e51b815260206004820152601d60248201527f4e6f206d6f72652063616d706169676e732061726520616c6c6f7765640000006044820152606401610704565b60028101805461010061ff00198216811783556007805461ffff1990931660ff938416179091178355805460018101825560008290527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b03871690811790915592548154919216908110611554576115546120b0565b6000918252602090912001546001600160a01b0316146115865760405162461bcd60e51b8152600401610704906120c6565b5050565b60008054600160a01b900460ff16156115e55760405162461bcd60e51b815260206004820181905260248201527f546865206d61726b6574696e6720636f6e7472616374206973207061757365646044820152606401610704565b6001600160a01b03821660009081526008602052604090206002810154610100900460ff166116265760405162461bcd60e51b815260040161070490612079565b6002810154600780546001600160a01b0386169260ff1690811061164c5761164c6120b0565b6000918252602090912001546001600160a01b03161461167e5760405162461bcd60e51b8152600401610704906120c6565b600281015462010000900460ff166116d85760405162461bcd60e51b815260206004820152601a60248201527f5468652063616d706169676e206973206e6f74206163746976650000000000006044820152606401610704565b604051632b24a7d560e11b815233600482015283906001600160a01b038216906356494faa90602401602060405180830381865afa15801561171e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117429190612593565b949350505050565b6000546001600160a01b031633146117745760405162461bcd60e51b815260040161070490612044565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166117b55760405162461bcd60e51b815260040161070490612079565b6002810154600780546001600160a01b0385169260ff169081106117db576117db6120b0565b6000918252602090912001546001600160a01b03161461180d5760405162461bcd60e51b8152600401610704906120c6565b611816826106da565b600780546000919061182a90600190612113565b8154811061183a5761183a6120b0565b60009182526020808320909101546001600160a01b0316808352600890915260409091206002015490915060ff610100909104166118ba5760405162461bcd60e51b815260206004820152601960248201527f496e636f73697374656e742063616d706169676e2064617461000000000000006044820152606401610704565b600280830180546001600160a01b0384166000908152600860205260409020909201805460ff191660ff938416179055546007805484939192909116908110611905576119056120b0565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506007805480611944576119446125b5565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556002938401805461ff00191690556001600160a01b0394909416815260089093525060408220828155600181019290925501805462ffffff19169055565b6000546001600160a01b031633146119d25760405162461bcd60e51b815260040161070490612044565b6001600160a01b038116611a375760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610704565b611a4081611e73565b50565b600054600160a01b900460ff1615611a905760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610704565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611acb3390565b6040516001600160a01b03909116815260200160405180910390a1565b6000546001600160a01b031690565b60005b835181101561109b576000848281518110611b1757611b176120b0565b6020026020010151905060006001600160a01b0316816001600160a01b031614611dac578351821015611cf4576000848381518110611b5857611b586120b0565b60200260200101519050600081118015611b73575086548111155b15611cf2576004805460405163a9059cbb60e01b81526001600160a01b03858116938201939093526024810184905291169063a9059cbb906044016020604051808303816000875af1925050508015611be9575060408051601f3d908101601f19168201909252611be691810190612593565b60015b611cbe57611bf5612327565b806308c379a01415611c625750611c0a612343565b80611c155750611c64565b6003546040517fa76d52006316997771fc50eef565e7d0432c0e464675710e478b3322568b510991611c54918c916001600160a01b03169085906125cb565b60405180910390a150611cf2565b505b600354604080516001600160a01b038b8116825290921660208301526060828201819052600090830152517fa76d52006316997771fc50eef565e7d0432c0e464675710e478b3322568b51099181900360800190a1611cf2565b5080876000016000828254611cd39190612113565b925050819055508060056000828254611cec9190612113565b90915550505b505b8251821015611dac576000838381518110611d1157611d116120b0565b60200260200101519050600081118015611d2f575080876001015410155b8015611d3b5750804710155b15611daa576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611d76573d6000803e3d6000fd5b5080876001016000828254611d8b9190612113565b925050819055508060066000828254611da49190612113565b90915550505b505b5080611db7816125f7565b915050611afa565b600054600160a01b900460ff16611e0f5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610704565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611acb565b6000546001600160a01b03163314611e6d5760405162461bcd60e51b815260040161070490612044565b6110f060005b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114611a4057600080fd5b600060208284031215611eea57600080fd5b8135611ef581611ec3565b9392505050565b60008060408385031215611f0f57600080fd5b8235611f1a81611ec3565b91506020830135611f2a81611ec3565b809150509250929050565b600080600060608486031215611f4a57600080fd5b8335611f5581611ec3565b95602085013595506040909401359392505050565b600080600080600060a08688031215611f8257600080fd5b853567ffffffffffffffff81168114611f9a57600080fd5b94506020860135611faa81611ec3565b93506040860135611fba81611ec3565b9250606086013563ffffffff81168114611fd357600080fd5b9150608086013560ff81168114611fe957600080fd5b809150509295509295909350565b6020808252825182820181905260009190848201906040850190845b818110156120385783516001600160a01b031683529284019291840191600101612013565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601b908201527f5468652063616d706169676e20646f6573206e6f742065786973740000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252601a908201527f496e636f6e73697374656e742063616d706169676e206c697374000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015612125576121256120fd565b500390565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156121665761216661212a565b6040525050565b600067ffffffffffffffff8211156121875761218761212a565b5060051b60200190565b600082601f8301126121a257600080fd5b815160206121af8261216d565b6040516121bc8282612140565b83815260059390931b85018201928281019150868411156121dc57600080fd5b8286015b848110156121f757805183529183019183016121e0565b509695505050505050565b60008060006060848603121561221757600080fd5b835167ffffffffffffffff8082111561222f57600080fd5b818601915086601f83011261224357600080fd5b815160206122508261216d565b60405161225d8282612140565b83815260059390931b850182019282810191508a84111561227d57600080fd5b948201945b838610156122a457855161229581611ec3565b82529482019490820190612282565b918901519197509093505050808211156122bd57600080fd5b6122c987838801612191565b935060408601519150808211156122df57600080fd5b506122ec86828701612191565b9150509250925092565b60008219821115612309576123096120fd565b500190565b60006020828403121561232057600080fd5b5051919050565b600060033d11156123405760046000803e5060005160e01c5b90565b600060443d10156123515790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561238157505050505090565b82850191508151818111156123995750505050505090565b843d87010160208285010111156123b35750505050505090565b6123c260208286010187612140565b509095945050505050565b6000815180845260005b818110156123f3576020818501810151868301820152016123d7565b81811115612405576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038416815267ffffffffffffffff8316602082015260606040820181905260009061244e908301846123cd565b95945050505050565b600063ffffffff80831681811415612471576124716120fd565b6001019392505050565b600060ff821660ff841680821015612495576124956120fd565b90039392505050565b600181815b808511156124d95781600019048211156124bf576124bf6120fd565b808516156124cc57918102915b93841c93908002906124a3565b509250929050565b6000826124f05750600161257e565b816124fd5750600061257e565b8160018114612513576002811461251d57612539565b600191505061257e565b60ff84111561252e5761252e6120fd565b50506001821b61257e565b5060208310610133831016604e8410600b841016171561255c575081810a61257e565b612566838361249e565b806000190482111561257a5761257a6120fd565b0290505b92915050565b6000611ef560ff8416836124e1565b6000602082840312156125a557600080fd5b81518015158114611ef557600080fd5b634e487b7160e01b600052603160045260246000fd5b6001600160a01b0384811682528316602082015260606040820181905260009061244e908301846123cd565b600060001982141561260b5761260b6120fd565b506001019056fea264697066735822122039cb53aa3b47ef01eaff7d8712c0d949941803e77b5f2cd54375f19a27d07ffc64736f6c634300080b0033","deployedBytecode":"0x60806040526004361061023f5760003560e01c8063777b0c211161012e578063b313bd62116100ab578063e3eddde21161006f578063e3eddde214610664578063e4663a5b14610684578063f2fde38b146106a4578063f883fcaa14610550578063fc47e209146106c457600080fd5b8063b313bd6214610624578063b91268e8146103a1578063c28bd11c14610550578063c28cedf314610639578063c6088d971461064e57600080fd5b80639d941362116100f25780639d9413621461051b578063a2157767146105b8578063a5c9cd82146105cd578063a6b03633146105e2578063ac9c4fd31461060457600080fd5b8063777b0c21146105305780637fb012321461055057806382e51bd0146105655780638456cb59146105855780638da5cb5b1461059a57600080fd5b80633e6e387c116101bc5780635c975abb116101805780635c975abb1461042d5780635fbe4d1d14610458578063715018a614610478578063731301cf1461048d57806373d6aafa1461051b57600080fd5b80633e6e387c146103c45780633f4ba83a146103d9578063479e92c8146103ee578063504b3662146104035780635b7f415c1461041857600080fd5b80631df55679116102035780631df5567914610313578063270d8e0e146103335780632713b9601461035357806330db4fa0146103735780633a3a7c53146103a157600080fd5b806306e386321461024b5780630bf433091461027857806314270b651461029f57806318f053da146102d15780631c505d1d146102f357600080fd5b3661024657005b600080fd5b34801561025757600080fd5b50610260600581565b60405161ffff90911681526020015b60405180910390f35b34801561028457600080fd5b5061028d60d081565b60405160ff909116815260200161026f565b3480156102ab57600080fd5b506002546001600160a01b03165b6040516001600160a01b03909116815260200161026f565b3480156102dd57600080fd5b506102f16102ec366004611ed8565b6106da565b005b3480156102ff57600080fd5b506102f161030e366004611efc565b610888565b34801561031f57600080fd5b506102f161032e366004611ed8565b6109fe565b34801561033f57600080fd5b506102f161034e366004611f35565b610b2b565b34801561035f57600080fd5b506102f161036e366004611f6a565b610d7e565b34801561037f57600080fd5b5061038860c881565b60405167ffffffffffffffff909116815260200161026f565b3480156103ad57600080fd5b506103b66110a4565b60405190815260200161026f565b3480156103d057600080fd5b50610260600281565b3480156103e557600080fd5b506102f16110be565b3480156103fa57600080fd5b5061028d600a81565b34801561040f57600080fd5b5061028d606481565b34801561042457600080fd5b5061028d601281565b34801561043957600080fd5b50600054600160a01b900460ff165b604051901515815260200161026f565b34801561046457600080fd5b506003546102b9906001600160a01b031681565b34801561048457600080fd5b506102f16110f2565b34801561049957600080fd5b506104e96104a8366004611ed8565b6001600160a01b0316600090815260086020526040902080546001820154600290920154909260ff8083169261010081048216926201000090910490911690565b60408051958652602086019490945260ff9092169284019290925290151560608301521515608082015260a00161026f565b34801561052757600080fd5b50610260600a81565b34801561053c57600080fd5b506102f161054b366004611ed8565b611171565b34801561055c57600080fd5b5061028d600281565b34801561057157600080fd5b506102f1610580366004611ed8565b611244565b34801561059157600080fd5b506102f161131c565b3480156105a657600080fd5b506000546001600160a01b03166102b9565b3480156105c457600080fd5b5061028d60ff81565b3480156105d957600080fd5b506103b661134e565b3480156105ee57600080fd5b506105f761135a565b60405161026f9190611ff7565b34801561061057600080fd5b506102f161061f366004611ed8565b6113bc565b34801561063057600080fd5b50610388600281565b34801561064557600080fd5b50610448600181565b34801561065a57600080fd5b506102606103e881565b34801561067057600080fd5b5061044861067f366004611ed8565b61158a565b34801561069057600080fd5b506102f161069f366004611ed8565b61174a565b3480156106b057600080fd5b506102f16106bf366004611ed8565b6119a8565b3480156106d057600080fd5b50610388612cbe81565b6000546001600160a01b0316331461070d5760405162461bcd60e51b815260040161070490612044565b60405180910390fd5b6001600160a01b03811660009081526008602052604090206002810154610100900460ff1661074e5760405162461bcd60e51b815260040161070490612079565b6002810154600780546001600160a01b0385169260ff16908110610774576107746120b0565b6000918252602090912001546001600160a01b0316146107a65760405162461bcd60e51b8152600401610704906120c6565b805460055410156107f45760405162461bcd60e51b8152602060048201526018602482015277496e636f6e73697374656e7420627564676574206461746160401b6044820152606401610704565b806001015460065410156108455760405162461bcd60e51b8152602060048201526018602482015277496e636f6e73697374656e7420627564676574206461746160401b6044820152606401610704565b805460058054600090610859908490612113565b9091555050600181015460068054600090610875908490612113565b9091555050600080825560019091015550565b600054600160a01b900460ff161561089e575050565b6001600160a01b03821660009081526008602052604090206002810154610100900460ff166108df5760405162461bcd60e51b815260040161070490612079565b6002810154600780546001600160a01b0386169260ff16908110610905576109056120b0565b6000918252602090912001546001600160a01b0316146109375760405162461bcd60e51b8152600401610704906120c6565b600281015462010000900460ff16156109f957805460018201546040516348d497c760e01b81526001600160a01b03858116600483015233602483015260448201939093526064810191909152849160009182918291908516906348d497c7906084016000604051808303816000875af11580156109b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109e19190810190612202565b9250925092506109f48786858585611af7565b505050505b505050565b6001546001600160a01b03163314610a7e5760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79547275737465653a206f6e6c792063726561746f722063616e20617460448201527f746163682061207472757374656520636f6e74726163740000000000000000006064820152608401610704565b6002546001600160a01b031615610afd5760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c79547275737465653a20746865207472757374656520636f6e7472616360448201527f742068617320616c7265616479206265656e20617474616368656400000000006064820152608401610704565b600180546001600160a01b0319908116909155600280549091166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610b555760405162461bcd60e51b815260040161070490612044565b6001600160a01b03831660009081526008602052604090206002810154610100900460ff16610b965760405162461bcd60e51b815260040161070490612079565b6002810154600780546001600160a01b0387169260ff16908110610bbc57610bbc6120b0565b6000918252602090912001546001600160a01b031614610bee5760405162461bcd60e51b8152600401610704906120c6565b82600554610bfc91906122f6565b600480546040516370a0823160e01b815230928101929092526001600160a01b0316906370a0823190602401602060405180830381865afa158015610c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c69919061230e565b1015610cb75760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e63650000000000006044820152606401610704565b81600654610cc591906122f6565b471015610d145760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74206574682062616c616e636500000000000000006044820152606401610704565b8260056000828254610d2691906122f6565b925050819055508160066000828254610d3f91906122f6565b9091555050805483908290600090610d589084906122f6565b9250508190555081816001016000828254610d7391906122f6565b909155505050505050565b6002546001600160a01b03163314610df45760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79547275737465653a206f6e6c7920747275737465652063616e20657860448201527232b1baba32903a3434b990333ab731ba34b7b760691b6064820152608401610704565b600054600160a01b900460ff1615610e0b5761109d565b60005b60075463ffffffff8216101561109b57600060078263ffffffff1681548110610e3957610e396120b0565b60009182526020808320909101546001600160a01b03168083526008909152604090912060028101549192509060ff61010090910416610e8b5760405162461bcd60e51b815260040161070490612079565b6002810154600780546001600160a01b0385169260ff16908110610eb157610eb16120b0565b6000918252602090912001546001600160a01b031614610ee35760405162461bcd60e51b8152600401610704906120c6565b600281015462010000900460ff161561108657805460018201546040516303c9f1e760e01b815267ffffffffffffffff8b1660048201526001600160a01b038a81166024830152898116604483015263ffffffff8916606483015260ff8816608483015260a482019390935260c481019190915283918216906303c9f1e79060e4016000604051808303816000875af1925050508015610fa557506040513d6000823e601f3d908101601f19168201604052610fa29190810190612202565b60015b61107357610fb1612327565b806308c379a014156110125750610fc6612343565b80610fd15750611014565b7f1c78fe569029f719914c6066018a968a8ca4d3810eed21ca6d09951cd0a9f590848b836040516110049392919061241a565b60405180910390a150611084565b505b604080516001600160a01b038516815267ffffffffffffffff8b166020820152606081830181905260009082015290517f1c78fe569029f719914c6066018a968a8ca4d3810eed21ca6d09951cd0a9f5909181900360800190a1611084565b6110808686858585611af7565b5050505b505b5050808061109390612457565b915050610e0e565b505b5050505050565b6110b06003601261247b565b6110bb90600a612584565b81565b6000546001600160a01b031633146110e85760405162461bcd60e51b815260040161070490612044565b6110f0611dbf565b565b6000546001600160a01b0316331461111c5760405162461bcd60e51b815260040161070490612044565b600054600160a01b900460ff16156111695760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610704565b6110f0611e43565b6000546001600160a01b0316331461119b5760405162461bcd60e51b815260040161070490612044565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166111dc5760405162461bcd60e51b815260040161070490612079565b6002810154600780546001600160a01b0385169260ff16908110611202576112026120b0565b6000918252602090912001546001600160a01b0316146112345760405162461bcd60e51b8152600401610704906120c6565b600201805462ff00001916905550565b6000546001600160a01b0316331461126e5760405162461bcd60e51b815260040161070490612044565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166112af5760405162461bcd60e51b815260040161070490612079565b6002810154600780546001600160a01b0385169260ff169081106112d5576112d56120b0565b6000918252602090912001546001600160a01b0316146113075760405162461bcd60e51b8152600401610704906120c6565b600201805462ff000019166201000017905550565b6000546001600160a01b031633146113465760405162461bcd60e51b815260040161070490612044565b6110f0611a43565b6110bb6012600a612584565b606060078054806020026020016040519081016040528092919081815260200182805480156113b257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611394575b5050505050905090565b6000546001600160a01b031633146113e65760405162461bcd60e51b815260040161070490612044565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff16156114775760405162461bcd60e51b815260206004820152603660248201527f5468652063616d706169676e2077697468207468697320636f6e7472616374206044820152756164647265737320616c72656164792065786973747360501b6064820152608401610704565b600754610100116114ca5760405162461bcd60e51b815260206004820152601d60248201527f4e6f206d6f72652063616d706169676e732061726520616c6c6f7765640000006044820152606401610704565b60028101805461010061ff00198216811783556007805461ffff1990931660ff938416179091178355805460018101825560008290527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b03871690811790915592548154919216908110611554576115546120b0565b6000918252602090912001546001600160a01b0316146115865760405162461bcd60e51b8152600401610704906120c6565b5050565b60008054600160a01b900460ff16156115e55760405162461bcd60e51b815260206004820181905260248201527f546865206d61726b6574696e6720636f6e7472616374206973207061757365646044820152606401610704565b6001600160a01b03821660009081526008602052604090206002810154610100900460ff166116265760405162461bcd60e51b815260040161070490612079565b6002810154600780546001600160a01b0386169260ff1690811061164c5761164c6120b0565b6000918252602090912001546001600160a01b03161461167e5760405162461bcd60e51b8152600401610704906120c6565b600281015462010000900460ff166116d85760405162461bcd60e51b815260206004820152601a60248201527f5468652063616d706169676e206973206e6f74206163746976650000000000006044820152606401610704565b604051632b24a7d560e11b815233600482015283906001600160a01b038216906356494faa90602401602060405180830381865afa15801561171e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117429190612593565b949350505050565b6000546001600160a01b031633146117745760405162461bcd60e51b815260040161070490612044565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166117b55760405162461bcd60e51b815260040161070490612079565b6002810154600780546001600160a01b0385169260ff169081106117db576117db6120b0565b6000918252602090912001546001600160a01b03161461180d5760405162461bcd60e51b8152600401610704906120c6565b611816826106da565b600780546000919061182a90600190612113565b8154811061183a5761183a6120b0565b60009182526020808320909101546001600160a01b0316808352600890915260409091206002015490915060ff610100909104166118ba5760405162461bcd60e51b815260206004820152601960248201527f496e636f73697374656e742063616d706169676e2064617461000000000000006044820152606401610704565b600280830180546001600160a01b0384166000908152600860205260409020909201805460ff191660ff938416179055546007805484939192909116908110611905576119056120b0565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506007805480611944576119446125b5565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556002938401805461ff00191690556001600160a01b0394909416815260089093525060408220828155600181019290925501805462ffffff19169055565b6000546001600160a01b031633146119d25760405162461bcd60e51b815260040161070490612044565b6001600160a01b038116611a375760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610704565b611a4081611e73565b50565b600054600160a01b900460ff1615611a905760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610704565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611acb3390565b6040516001600160a01b03909116815260200160405180910390a1565b6000546001600160a01b031690565b60005b835181101561109b576000848281518110611b1757611b176120b0565b6020026020010151905060006001600160a01b0316816001600160a01b031614611dac578351821015611cf4576000848381518110611b5857611b586120b0565b60200260200101519050600081118015611b73575086548111155b15611cf2576004805460405163a9059cbb60e01b81526001600160a01b03858116938201939093526024810184905291169063a9059cbb906044016020604051808303816000875af1925050508015611be9575060408051601f3d908101601f19168201909252611be691810190612593565b60015b611cbe57611bf5612327565b806308c379a01415611c625750611c0a612343565b80611c155750611c64565b6003546040517fa76d52006316997771fc50eef565e7d0432c0e464675710e478b3322568b510991611c54918c916001600160a01b03169085906125cb565b60405180910390a150611cf2565b505b600354604080516001600160a01b038b8116825290921660208301526060828201819052600090830152517fa76d52006316997771fc50eef565e7d0432c0e464675710e478b3322568b51099181900360800190a1611cf2565b5080876000016000828254611cd39190612113565b925050819055508060056000828254611cec9190612113565b90915550505b505b8251821015611dac576000838381518110611d1157611d116120b0565b60200260200101519050600081118015611d2f575080876001015410155b8015611d3b5750804710155b15611daa576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611d76573d6000803e3d6000fd5b5080876001016000828254611d8b9190612113565b925050819055508060066000828254611da49190612113565b90915550505b505b5080611db7816125f7565b915050611afa565b600054600160a01b900460ff16611e0f5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610704565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611acb565b6000546001600160a01b03163314611e6d5760405162461bcd60e51b815260040161070490612044565b6110f060005b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114611a4057600080fd5b600060208284031215611eea57600080fd5b8135611ef581611ec3565b9392505050565b60008060408385031215611f0f57600080fd5b8235611f1a81611ec3565b91506020830135611f2a81611ec3565b809150509250929050565b600080600060608486031215611f4a57600080fd5b8335611f5581611ec3565b95602085013595506040909401359392505050565b600080600080600060a08688031215611f8257600080fd5b853567ffffffffffffffff81168114611f9a57600080fd5b94506020860135611faa81611ec3565b93506040860135611fba81611ec3565b9250606086013563ffffffff81168114611fd357600080fd5b9150608086013560ff81168114611fe957600080fd5b809150509295509295909350565b6020808252825182820181905260009190848201906040850190845b818110156120385783516001600160a01b031683529284019291840191600101612013565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601b908201527f5468652063616d706169676e20646f6573206e6f742065786973740000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252601a908201527f496e636f6e73697374656e742063616d706169676e206c697374000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015612125576121256120fd565b500390565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156121665761216661212a565b6040525050565b600067ffffffffffffffff8211156121875761218761212a565b5060051b60200190565b600082601f8301126121a257600080fd5b815160206121af8261216d565b6040516121bc8282612140565b83815260059390931b85018201928281019150868411156121dc57600080fd5b8286015b848110156121f757805183529183019183016121e0565b509695505050505050565b60008060006060848603121561221757600080fd5b835167ffffffffffffffff8082111561222f57600080fd5b818601915086601f83011261224357600080fd5b815160206122508261216d565b60405161225d8282612140565b83815260059390931b850182019282810191508a84111561227d57600080fd5b948201945b838610156122a457855161229581611ec3565b82529482019490820190612282565b918901519197509093505050808211156122bd57600080fd5b6122c987838801612191565b935060408601519150808211156122df57600080fd5b506122ec86828701612191565b9150509250925092565b60008219821115612309576123096120fd565b500190565b60006020828403121561232057600080fd5b5051919050565b600060033d11156123405760046000803e5060005160e01c5b90565b600060443d10156123515790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561238157505050505090565b82850191508151818111156123995750505050505090565b843d87010160208285010111156123b35750505050505090565b6123c260208286010187612140565b509095945050505050565b6000815180845260005b818110156123f3576020818501810151868301820152016123d7565b81811115612405576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038416815267ffffffffffffffff8316602082015260606040820181905260009061244e908301846123cd565b95945050505050565b600063ffffffff80831681811415612471576124716120fd565b6001019392505050565b600060ff821660ff841680821015612495576124956120fd565b90039392505050565b600181815b808511156124d95781600019048211156124bf576124bf6120fd565b808516156124cc57918102915b93841c93908002906124a3565b509250929050565b6000826124f05750600161257e565b816124fd5750600061257e565b8160018114612513576002811461251d57612539565b600191505061257e565b60ff84111561252e5761252e6120fd565b50506001821b61257e565b5060208310610133831016604e8410600b841016171561255c575081810a61257e565b612566838361249e565b806000190482111561257a5761257a6120fd565b0290505b92915050565b6000611ef560ff8416836124e1565b6000602082840312156125a557600080fd5b81518015158114611ef557600080fd5b634e487b7160e01b600052603160045260246000fd5b6001600160a01b0384811682528316602082015260606040820181905260009061244e908301846123cd565b600060001982141561260b5761260b6120fd565b506001019056fea264697066735822122039cb53aa3b47ef01eaff7d8712c0d949941803e77b5f2cd54375f19a27d07ffc64736f6c634300080b0033","devdoc":{"kind":"dev","methods":{"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":7,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":122,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_paused","offset":20,"slot":"0","type":"t_bool"},{"astId":6316,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_creatorAddr","offset":0,"slot":"1","type":"t_address"},{"astId":6318,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_trusteeAddr","offset":0,"slot":"2","type":"t_address"},{"astId":3470,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"tokenAddr","offset":0,"slot":"3","type":"t_address"},{"astId":3473,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"token","offset":0,"slot":"4","type":"t_contract(IERC20)820"},{"astId":3486,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_totalTokenBudget","offset":0,"slot":"5","type":"t_uint256"},{"astId":3488,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_totalEthBudget","offset":0,"slot":"6","type":"t_uint256"},{"astId":3491,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_campaigns","offset":0,"slot":"7","type":"t_array(t_address)dyn_storage"},{"astId":3496,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"_campaignsMap","offset":0,"slot":"8","type":"t_mapping(t_address,t_struct(CampaignRecord)3484_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"base":"t_address","encoding":"dynamic_array","label":"address[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(IERC20)820":{"encoding":"inplace","label":"contract IERC20","numberOfBytes":"20"},"t_mapping(t_address,t_struct(CampaignRecord)3484_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct LuminaMarketing.CampaignRecord)","numberOfBytes":"32","value":"t_struct(CampaignRecord)3484_storage"},"t_struct(CampaignRecord)3484_storage":{"encoding":"inplace","label":"struct LuminaMarketing.CampaignRecord","members":[{"astId":3475,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"tokenBudget","offset":0,"slot":"0","type":"t_uint256"},{"astId":3477,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"ethBudget","offset":0,"slot":"1","type":"t_uint256"},{"astId":3479,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"campaignId","offset":0,"slot":"2","type":"t_uint8"},{"astId":3481,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"valid","offset":1,"slot":"2","type":"t_bool"},{"astId":3483,"contract":"contracts/LuminaMarketing.sol:LuminaMarketing","label":"active","offset":2,"slot":"2","type":"t_bool"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}}}')},184:function(e){e.exports=JSON.parse('{"address":"0x368be2112082181528B2ce74B342dAb4e1762607","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"wallet","type":"address"},{"indexed":false,"internalType":"uint8","name":"commisionPrc","type":"uint8"}],"name":"Commision","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"wallet","type":"address"},{"indexed":false,"internalType":"uint64","name":"blockNumber","type":"uint64"},{"indexed":false,"internalType":"uint256","name":"balance","type":"uint256"}],"name":"RegisteredBalance","type":"event"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_WEEK","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_DIFFICULTY_STEP","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_NULL","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEMO","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LUCKY_NUMBER","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_CNT","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_DONOR_BLOCKS","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINERS_CLAIM_MIN_RECIPIENT_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARDS_CNT_LIMIT","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_INC_INTERVAL","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_INC","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_STANDARD","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_START","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_DECIMALS","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint32","name":"rewardUnits","type":"uint32"}],"name":"_addClaim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"bool","name":"force","type":"bool"}],"name":"_registerBalance","outputs":[{"internalType":"bool","name":"registered","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"}],"name":"_updateBalance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"firstBlockNumber_","type":"uint64"}],"name":"_updateFirstBlockNumber","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"adminAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"adminAddr_","type":"address"}],"name":"attachAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAddr_","type":"address"}],"name":"attachToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"trusteeAddr_","type":"address"}],"name":"attachTrustee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"},{"internalType":"uint64","name":"blockNumber","type":"uint64"}],"name":"findBalance","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBalances","outputs":[{"internalType":"uint256[]","name":"balances","type":"uint256[]"},{"internalType":"uint64[]","name":"blockNumbers","type":"uint64[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64[]","name":"blockNumbers","type":"uint64[]"},{"internalType":"address","name":"recipient","type":"address"}],"name":"getClaims","outputs":[{"internalType":"uint16[]","name":"claimsCnt","type":"uint16[]"},{"internalType":"bool[]","name":"claimed","type":"bool[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"}],"name":"getClaimsCnt","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"}],"name":"getCommision","outputs":[{"internalType":"uint8","name":"commisionPrc","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"recipient","type":"address"}],"name":"hasClaimed","outputs":[{"internalType":"uint32","name":"rewardUnits","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint8","name":"commisionPrc","type":"uint8"}],"name":"setCommision","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tokenAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"trusteeAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x8a311882ce79ab46223192ee531b32dd853bd117fb2fedcb0775c05086341ce7","receipt":{"to":null,"from":"0xC72E6D4E629F1C89d57f4D7Ad511d1b221D1d757","contractAddress":"0x368be2112082181528B2ce74B342dAb4e1762607","transactionIndex":0,"gasUsed":"1573477","logsBloom":"0xblockHash":"0x1b806da8568822bf3cd88ea74f34f9b38b1a24d615fed6b38df5e4e3df54b2b8","transactionHash":"0x8a311882ce79ab46223192ee531b32dd853bd117fb2fedcb0775c05086341ce7","logs":[{"transactionIndex":0,"blockNumber":24340030,"transactionHash":"0x8a311882ce79ab46223192ee531b32dd853bd117fb2fedcb0775c05086341ce7","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"],"data":"0x00000000000000000000000000000000000000000000000000a7b411e092c6730000000000000000000000000000000000000000000000000cf55cecd4ea611900000000000000000000000000000000000000000000054c03e3748f008623890000000000000000000000000000000000000000000000000c4da8daf4579aa600000000000000000000000000000000000000000000054c048b28a0e118e9fc","logIndex":0,"blockHash":"0x1b806da8568822bf3cd88ea74f34f9b38b1a24d615fed6b38df5e4e3df54b2b8"}],"blockNumber":24340030,"cumulativeGasUsed":"1573477","status":1,"byzantium":true},"args":[],"solcInputHash":"93d9a3e5beccfe46ed35f40bd3a64522","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.11+commit.d7f03943\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"wallet\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint8\\",\\"name\\":\\"commisionPrc\\",\\"type\\":\\"uint8\\"}],\\"name\\":\\"Commision\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"wallet\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"balance\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"RegisteredBalance\\",\\"type\\":\\"event\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_WEEK\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_DIFFICULTY_STEP\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_NULL\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"DEMO\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"LUCKY_NUMBER\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_CNT\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_DONOR_BLOCKS\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MINERS_CLAIM_MIN_RECIPIENT_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MIN_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARDS_CNT_LIMIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_STANDARD\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_START\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_DECIMALS\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint32\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint32\\"}],\\"name\\":\\"_addClaim\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"wallet\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"balance\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"force\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"_registerBalance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"registered\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"wallet\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"balance\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"_updateBalance\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"firstBlockNumber_\\",\\"type\\":\\"uint64\\"}],\\"name\\":\\"_updateFirstBlockNumber\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"adminAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"adminAddr_\\",\\"type\\":\\"address\\"}],\\"name\\":\\"attachAdmin\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"tokenAddr_\\",\\"type\\":\\"address\\"}],\\"name\\":\\"attachToken\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"trusteeAddr_\\",\\"type\\":\\"address\\"}],\\"name\\":\\"attachTrustee\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"wallet\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"}],\\"name\\":\\"findBalance\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"balance\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getBalances\\",\\"outputs\\":[{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint64[]\\",\\"name\\":\\"blockNumbers\\",\\"type\\":\\"uint64[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64[]\\",\\"name\\":\\"blockNumbers\\",\\"type\\":\\"uint64[]\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getClaims\\",\\"outputs\\":[{\\"internalType\\":\\"uint16[]\\",\\"name\\":\\"claimsCnt\\",\\"type\\":\\"uint16[]\\"},{\\"internalType\\":\\"bool[]\\",\\"name\\":\\"claimed\\",\\"type\\":\\"bool[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"}],\\"name\\":\\"getClaimsCnt\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"wallet\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getCommision\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"commisionPrc\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"}],\\"name\\":\\"hasClaimed\\",\\"outputs\\":[{\\"internalType\\":\\"uint32\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint32\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"commisionPrc\\",\\"type\\":\\"uint8\\"}],\\"name\\":\\"setCommision\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"tokenAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"trusteeAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/LuminaRecords.sol\\":\\"LuminaRecords\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaRecords {\\\\n\\\\n    function getBalances() external view returns (uint256[] memory balances, uint64[] memory blockNumbers);\\\\n    function findBalance(address wallet, uint64 blockNumber) external view returns (uint256 balance);\\\\n    function getClaimsCnt(uint64 blockNumber) external view returns (uint16);\\\\n    function hasClaimed(uint64 blockNumber, address recipient) external view returns (uint32 rewardUnits);\\\\n    function getClaims(uint64[] memory blockNumbers, address recipient) external view returns (uint16[] memory claimsCnt, bool[] memory claimed);\\\\n    function setCommision(uint8 commisionPrc) external;\\\\n    function getCommision(address wallet) external view returns (uint8 commisionPrc);\\\\n    function _registerBalance(address sender, uint256 balance, bool force) external returns (bool registered); // onlyToken\\\\n    function _updateBalance(address sender, uint256 balance) external; // onlyToken\\\\n    function _addClaim(uint64 blockNumber, address recipient, uint32 rewardUnits) external; // onlyTrustee\\\\n    function _updateFirstBlockNumber(uint64 blockNumber) external; // onlyAdmin\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe5ffa5a99c551fc5d68b334fee66b7c566aa7f7600cf275c251c208d8a1560b2\\",\\"license\\":\\"MIT\\"},\\"contracts/LuminaRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./ILuminaRecords.sol\\\\\\";\\\\nimport \\\\\\"./Parameters.sol\\\\\\";\\\\nimport \\\\\\"./OnlyToken.sol\\\\\\";\\\\nimport \\\\\\"./OnlyTrustee.sol\\\\\\";\\\\nimport \\\\\\"./OnlyAdmin.sol\\\\\\";\\\\n\\\\ncontract LuminaRecords is ILuminaRecords, Parameters, OnlyToken, OnlyTrustee, OnlyAdmin {\\\\n\\\\n    uint8 private constant BALANCE_RECORDS_CNT = 5;\\\\n    uint8 private constant DEFAULT_COMMISION_PRC = 22;\\\\n    uint8 private constant ZERO_COMMISION_PRC = 255;\\\\n    uint8 private constant MIN_COMMISION_PRC = 10;\\\\n    uint8 private constant MAX_COMMISION_PRC = 90;\\\\n\\\\n    struct AddrBalanceRecord {\\\\n        uint256 balance;\\\\n        uint64 blockNumber;\\\\n    }\\\\n\\\\n    struct AddrBalanceRecords {\\\\n        AddrBalanceRecord[BALANCE_RECORDS_CNT] records;\\\\n        uint8 recordsCnt;\\\\n    }\\\\n\\\\n    // Mapping blockNumber to Balance Records\\\\n    uint64 private _firstBlockNumber;\\\\n    mapping (address => AddrBalanceRecords) private _balanceRecords;\\\\n\\\\n    // Mapping blockNumber to claimsCnt\\\\n    mapping (uint64 => uint16) private _claimsCnt;\\\\n\\\\n    // Mapping blockNumber to address to uint32 (number of reward units)\\\\n    mapping (uint64 => mapping (address => uint32)) private _claimed;\\\\n\\\\n    // Mapping wallet address to commision rate\\\\n    // Special internal encodings: 0 means default commision, 255 means no commision (0%)\\\\n    mapping (address => uint8) private _commisions;\\\\n\\\\n    event Commision(address indexed wallet, uint8 commisionPrc);\\\\n    event RegisteredBalance(address indexed wallet, uint64 blockNumber, uint256 balance);\\\\n\\\\n    constructor() {\\\\n        _firstBlockNumber = 0;\\\\n    }\\\\n\\\\n    function getBalances() external view returns (uint256[] memory balances, uint64[] memory blockNumbers) {\\\\n        AddrBalanceRecords memory brs = _balanceRecords[msg.sender];\\\\n        uint8 cnt = brs.recordsCnt;\\\\n        balances = new uint256[](cnt);\\\\n        blockNumbers = new uint64[](cnt);\\\\n        for(uint8 i = 0; i < brs.recordsCnt; i++) {\\\\n            balances[i] = brs.records[i].balance;\\\\n            blockNumbers[i] = brs.records[i].blockNumber;\\\\n        }\\\\n    }\\\\n\\\\n    function findBalance(address wallet, uint64 blockNumber) external view returns (uint256 balance) {\\\\n        balance = 0;\\\\n\\\\n        AddrBalanceRecords memory brs = _balanceRecords[wallet];\\\\n        for(uint8 i = 0; i < brs.recordsCnt; i++) {\\\\n            if(blockNumber >= brs.records[i].blockNumber) {\\\\n                balance = brs.records[i].balance;\\\\n                return (balance);\\\\n            }\\\\n        }\\\\n\\\\n        require(balance == 0, \\\\\\"_balanceFind: corrupt balance\\\\\\");\\\\n        return (balance);\\\\n    }\\\\n\\\\n    function getClaimsCnt(uint64 blockNumber) public view returns (uint16) {\\\\n        return _claimsCnt[blockNumber];\\\\n    }\\\\n\\\\n    function hasClaimed(uint64 blockNumber, address recipient) public view returns (uint32 rewardUnits) {\\\\n        rewardUnits = _claimed[blockNumber][recipient];\\\\n    }\\\\n\\\\n    function getClaims(uint64[] memory blockNumbers, address recipient) external view returns (uint16[] memory claimsCnt, bool[] memory claimed) {\\\\n        uint8 cnt = uint8(blockNumbers.length);\\\\n        claimsCnt = new uint16[](cnt);\\\\n        claimed = new bool[](cnt);\\\\n\\\\n        for(uint8 i = 0; i < cnt; i++) {\\\\n            claimsCnt[i] = getClaimsCnt(blockNumbers[i]);\\\\n            claimed[i] = hasClaimed(blockNumbers[i], recipient) != 0;\\\\n        }\\\\n    }\\\\n\\\\n    function setCommision(uint8 commisionPrc) external {\\\\n        address wallet = msg.sender;\\\\n        require(commisionPrc == 0 || (MIN_COMMISION_PRC <= commisionPrc && commisionPrc <= MAX_COMMISION_PRC), \\\\\\"Commision value is out of allowed range: [10-90] or 0\\\\\\");\\\\n        uint8 c = commisionPrc == 0 ? ZERO_COMMISION_PRC : commisionPrc;\\\\n        _commisions[wallet] = c;\\\\n        emit Commision(wallet, commisionPrc);\\\\n    }\\\\n\\\\n    function getCommision(address wallet) external view returns (uint8 commisionPrc) {\\\\n        uint8 c = _commisions[wallet];\\\\n        commisionPrc = c == 0 ? DEFAULT_COMMISION_PRC : c == ZERO_COMMISION_PRC ? 0 : c;\\\\n        require(commisionPrc == 0 || (MIN_COMMISION_PRC <= commisionPrc && commisionPrc <= MAX_COMMISION_PRC), \\\\\\"Commision value is out of allowed range: [10-90] or 0\\\\\\");\\\\n    }\\\\n\\\\n    function _cleanupBalances(AddrBalanceRecords storage brs) private {\\\\n        if(brs.recordsCnt > 1) {\\\\n            for(uint8 i = brs.recordsCnt-1; i > 0; i--) {\\\\n                AddrBalanceRecord storage br = brs.records[i-1];\\\\n                if(br.blockNumber <= _firstBlockNumber) {\\\\n                    // We can remove the last record\\\\n                    brs.recordsCnt--;\\\\n                }\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    function _registerBalance(address wallet, uint256 balance, bool force) external onlyToken returns (bool registered) {\\\\n        AddrBalanceRecords storage brs = _balanceRecords[wallet];\\\\n        _cleanupBalances(brs);\\\\n        if(balance < REWARD_UNIT) {\\\\n            // There is not sense if recording less than 0.001 LUMI, make it zero\\\\n            balance = 0;\\\\n            if(brs.recordsCnt == 0) {\\\\n                return false;\\\\n            }\\\\n        }\\\\n        uint64 blockNumber = uint64(block.number);\\\\n        if(brs.recordsCnt > 0 && brs.records[0].balance == balance) {\\\\n            registered = true;\\\\n        } else if(brs.recordsCnt < BALANCE_RECORDS_CNT || force) {\\\\n            uint8 n = brs.recordsCnt < BALANCE_RECORDS_CNT ? brs.recordsCnt : BALANCE_RECORDS_CNT - 1;\\\\n            for(uint8 i = n; i > 0; i--) {\\\\n                brs.records[i] = brs.records[i-1];\\\\n            }\\\\n            brs.records[0].balance = balance;\\\\n            brs.records[0].blockNumber = blockNumber;\\\\n            if(brs.recordsCnt < BALANCE_RECORDS_CNT) {\\\\n                brs.recordsCnt++;\\\\n            }\\\\n            registered = true;\\\\n            emit RegisteredBalance(wallet, blockNumber, balance);\\\\n        } else {\\\\n            registered = false;\\\\n        }\\\\n    }\\\\n\\\\n    function _updateBalance(address wallet, uint256 balance) external onlyToken {\\\\n        AddrBalanceRecords storage brs = _balanceRecords[wallet];\\\\n        _cleanupBalances(brs);\\\\n        uint64 blockNumber = uint64(block.number);\\\\n        if(brs.recordsCnt == 0) {\\\\n            brs.records[0].balance = balance;\\\\n            brs.records[0].blockNumber = blockNumber;\\\\n            brs.recordsCnt++;\\\\n        } else if(brs.records[0].balance > balance) {\\\\n            brs.records[0].balance = balance;\\\\n            blockNumber = brs.records[0].blockNumber;\\\\n        }\\\\n        emit RegisteredBalance(wallet, blockNumber, balance);\\\\n    }\\\\n\\\\n    function _addClaim(uint64 blockNumber, address recipient, uint32 rewardUnits) external onlyTrustee {\\\\n        _claimsCnt[blockNumber]++;\\\\n        _claimed[blockNumber][recipient] = rewardUnits;\\\\n    }\\\\n\\\\n    function _updateFirstBlockNumber(uint64 firstBlockNumber_) external onlyAdmin {\\\\n        _firstBlockNumber = firstBlockNumber_;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd97cf9a78b9af629fe90ffcf43e86cd328962dcb43bd76a3bbcce542cb917cc1\\",\\"license\\":\\"MIT\\"},\\"contracts/OnlyAdmin.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyAdmin`, which can be applied to your functions to restrict their use to\\\\n * the admin contract.\\\\n */\\\\nabstract contract OnlyAdmin is Context {\\\\n    address private _creatorAddr;\\\\n    address private _adminAddr;\\\\n\\\\n    constructor() {\\\\n        _creatorAddr = _msgSender();\\\\n    }\\\\n\\\\n    // OnlyCreator, OnlyOnce\\\\n    function attachAdmin(address adminAddr_) external {\\\\n        require(_creatorAddr == _msgSender(), \\\\\\"OnlyAdmin: only creator can attach a admin contract\\\\\\");\\\\n        require(_adminAddr == address(0), \\\\\\"OnlyAdmin: the admin contract has already been attached\\\\\\");\\\\n        _creatorAddr = address(0);\\\\n        _adminAddr = adminAddr_;\\\\n    }\\\\n\\\\n    function adminAddr() public view returns (address) {\\\\n        return _adminAddr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the admin.\\\\n     */\\\\n    modifier onlyAdmin() {\\\\n        require(adminAddr() == _msgSender(), \\\\\\"OnlyAdmin: conly admin can execute this function\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x10cbbb90f6a01a3d19119e405d727a41803c8a23b342ec221d41e67b2083ea22\\",\\"license\\":\\"MIT\\"},\\"contracts/OnlyToken.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyToken`, which can be applied to your functions to restrict their use to\\\\n * the token contract.\\\\n */\\\\nabstract contract OnlyToken is Context {\\\\n    address private _creatorAddr;\\\\n    address private _tokenAddr;\\\\n\\\\n    constructor() {\\\\n        _creatorAddr = _msgSender();\\\\n    }\\\\n\\\\n    // OnlyCreator, OnlyOnce\\\\n    function attachToken(address tokenAddr_) external {\\\\n        require(_creatorAddr == _msgSender(), \\\\\\"OnlyToken: only creator can attach a token contract\\\\\\");\\\\n        require(_tokenAddr == address(0), \\\\\\"OnlyToken: the token contract has already been attached\\\\\\");\\\\n        _creatorAddr = address(0);\\\\n        _tokenAddr = tokenAddr_;\\\\n    }\\\\n\\\\n    function tokenAddr() public view returns (address) {\\\\n        return _tokenAddr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the token.\\\\n     */\\\\n    modifier onlyToken() {\\\\n        require(tokenAddr() == _msgSender(), \\\\\\"OnlyToken: only token can execute this function\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x00aed4c146f8db327b2aed3b3ffb4846cd67e8a5b0fd226d8a42d17116db0e31\\",\\"license\\":\\"MIT\\"},\\"contracts/OnlyTrustee.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyTrustee`, which can be applied to your functions to restrict their use to\\\\n * the trustee contract.\\\\n */\\\\nabstract contract OnlyTrustee is Context {\\\\n    address private _creatorAddr;\\\\n    address private _trusteeAddr;\\\\n\\\\n    constructor() {\\\\n        _creatorAddr = _msgSender();\\\\n    }\\\\n\\\\n    // OnlyCreator, OnlyOnce\\\\n    function attachTrustee(address trusteeAddr_) external {\\\\n        require(_creatorAddr == _msgSender(), \\\\\\"OnlyTrustee: only creator can attach a trustee contract\\\\\\");\\\\n        require(_trusteeAddr == address(0), \\\\\\"OnlyTrustee: the trustee contract has already been attached\\\\\\");\\\\n        _creatorAddr = address(0);\\\\n        _trusteeAddr = trusteeAddr_;\\\\n    }\\\\n\\\\n    function trusteeAddr() public view returns (address) {\\\\n        return _trusteeAddr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the trustee.\\\\n     */\\\\n    modifier onlyTrustee() {\\\\n        require(trusteeAddr() == _msgSender(), \\\\\\"OnlyTrustee: only trustee can execute this function\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x12eb746297b9190789abb1b6b3fe3014c1bc186a89034858d385611256932e10\\",\\"license\\":\\"MIT\\"},\\"contracts/Parameters.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nabstract contract Parameters {\\\\n    // The DEMO mode limits rewards to 1 per challenge and limits blocks per challenge to 2\\\\n    bool public constant DEMO = true;\\\\n\\\\n    // Number of decimals in reward token\\\\n    uint8 public constant TOKEN_DECIMALS = 18;\\\\n    uint256 public constant TOKEN_UNIT = 10 ** TOKEN_DECIMALS; // 1 LUMI\\\\n\\\\n    // The lucky number determines the premium challenges\\\\n    uint8 public constant LUCKY_NUMBER = 2;\\\\n\\\\n    // Challenges\\\\n    uint8 public constant CHALLENGE_NULL = 255;\\\\n    uint8 public constant MAX_CHALLENGE_CNT = 100;\\\\n    uint8 public constant MIN_CHALLENGE_DIFFICULTY = DEMO ? 10 : 20;\\\\n    uint8 public constant MAX_CHALLENGE_DIFFICULTY = DEMO ? 208 : 218;\\\\n    uint8 public constant CHALLENGE_DIFFICULTY_STEP = 2;\\\\n\\\\n    // Creating new challenges\\\\n    uint64 public constant BLOCKS_PER_WEEK = 11454; // 3600*24*7 / 2.2\\\\n    uint64 public constant MAX_DONOR_BLOCKS = 200; // number of most recent consecutive blocks that can be used as donors\\\\n\\\\n    // Number of blocks we need to wait for a new challenge\\\\n    uint8 public constant BLOCKS_PER_CHALLENGE = DEMO ? 2 : 100;\\\\n\\\\n    // Hard limit on number of claims per challenge\\\\n    uint16 public constant REWARDS_CNT_LIMIT = DEMO ? 2 : 500;\\\\n\\\\n    // Ramp-up in Newton Epoch\\\\n    uint256 public constant REWARD_UNIT = 10 ** (TOKEN_DECIMALS-3); // 0.001 LUMI\\\\n    uint16 public constant REWARD_UNITS_START = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_INC = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_STANDARD = 1000; // 1 LUMI\\\\n    uint16 public constant REWARD_INC_INTERVAL = DEMO ? 5 : 2700; // One increase per 2700 regular challenges, ~ add reward unit every week\\\\n\\\\n    // external miners can only make claims on addresses with at least 0.001 LUMI\\\\n    uint256 public constant MINERS_CLAIM_MIN_RECIPIENT_BALANCE = REWARD_UNIT; // 0.001 LUMI\\\\n\\\\n    // Cooldown in Einstein Epoch\\\\n    // Increase BLOCKS_PER_CHALLENGE by 2 blocks every week\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC = 2;\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xfdf05776b8f8536a7ed140fa82dc569eb9a32f177c1cf9c7bd8fd02bafdf67a7\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x608060405234801561001057600080fd5b5060008054336001600160a01b031991821681178355600280548316821790556004805490921617905560058054600160a01b600160e01b0319169055611a3b90819061005d90396000f3fe608060405234801561001057600080fd5b50600436106102265760003560e01c8063609eb1c311610130578063ad6e3318116100b8578063c6088d971161007c578063c6088d971461043d578063d045d5ae14610446578063d7a8a2b714610473578063f883fcaa146103de578063fc47e2091461049b57600080fd5b8063ad6e33181461041a578063b313bd621461042d578063b91268e81461031d578063c28bd11c146103de578063c28cedf31461043557600080fd5b806381830593116100ff57806381830593146103e6578063910eb1ce146103f75780639d941362146103d6578063a21577671461040a578063a5c9cd821461041257600080fd5b8063609eb1c3146103a2578063731fd3f7146103b557806373d6aafa146103d65780637fb01232146103de57600080fd5b80633e6e387c116101b3578063504b366211610182578063504b36621461035b578063552ba3331461036357806356656875146103765780635b7f415c146103895780635fbe4d1d1461039157600080fd5b80633e6e387c14610325578063406a6f601461032d578063479e92c814610340578063480414df1461034857600080fd5b80631df55679116101fa5780631df55679146102a457806322a0c348146102b957806330db4fa0146102da578063362b8b32146102fa5780633a3a7c531461031d57600080fd5b8062113e081461022b57806306e386321461024a5780630bf433091461026557806314270b651461027f575b600080fd5b6102336104a4565b60405161024192919061143f565b60405180910390f35b610252600581565b60405161ffff9091168152602001610241565b61026d60d081565b60405160ff9091168152602001610241565b6003546001600160a01b03165b6040516001600160a01b039091168152602001610241565b6102b76102b23660046114df565b610674565b005b6102cc6102c7366004611511565b6107a6565b604051908152602001610241565b6102e260c881565b6040516001600160401b039091168152602001610241565b61030d610308366004611544565b61090b565b6040519015158152602001610241565b6102cc610b54565b610252600281565b6102b761033b3660046114df565b610b6e565b61026d600a81565b6102b76103563660046114df565b610c8b565b61026d606481565b6102b7610371366004611589565b610da8565b61026d6103843660046114df565b610ec4565b61026d601281565b6001546001600160a01b031661028c565b6102b76103b03660046115b3565b610f47565b6103c86103c336600461160e565b61104b565b6040516102419291906116e4565b610252600a81565b61026d600281565b6005546001600160a01b031661028c565b6102b7610405366004611758565b6111cb565b61026d60ff81565b6102cc61126b565b6102b7610428366004611773565b611277565b6102e2600281565b61030d600181565b6102526103e881565b610252610454366004611758565b6001600160401b031660009081526007602052604090205461ffff1690565b610486610481366004611796565b61133c565b60405163ffffffff9091168152602001610241565b6102e2612cbe81565b33600090815260066020526040808220815160e08101835260609384939092908290810182600586835b8282101561050f5760408051808201909152600283028501805482526001908101546001600160401b031660208084019190915291835290920191016104ce565b50505090825250600a919091015460ff9081166020928301529082015191925081166001600160401b03811115610548576105486115f8565b604051908082528060200260200182016040528015610571578160200160208202803683370190505b5093508060ff166001600160401b0381111561058f5761058f6115f8565b6040519080825280602002602001820160405280156105b8578160200160208202803683370190505b50925060005b826020015160ff168160ff16101561066d57825160ff8216600581106105e6576105e66117c0565b602002015160000151858260ff1681518110610604576106046117c0565b6020908102919091010152825160ff821660058110610625576106256117c0565b602002015160200151848260ff1681518110610643576106436117c0565b6001600160401b039092166020928302919091019091015280610665816117ec565b9150506105be565b5050509091565b6002546001600160a01b031633146106f95760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79547275737465653a206f6e6c792063726561746f722063616e20617460448201527f746163682061207472757374656520636f6e747261637400000000000000000060648201526084015b60405180910390fd5b6003546001600160a01b0316156107785760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c79547275737465653a20746865207472757374656520636f6e7472616360448201527f742068617320616c7265616479206265656e206174746163686564000000000060648201526084016106f0565b600280546001600160a01b0319908116909155600380549091166001600160a01b0392909216919091179055565b6001600160a01b038216600090815260066020526040808220815160e08101835283929091908290810182600586835b828210156108175760408051808201909152600283028501805482526001908101546001600160401b031660208084019190915291835290920191016107d6565b50505090825250600a919091015460ff16602090910152905060005b816020015160ff168160ff1610156108b457815160ff82166005811061085b5761085b6117c0565b6020020151602001516001600160401b0316846001600160401b0316106108a257815160ff821660058110610892576108926117c0565b6020020151519250610905915050565b806108ac816117ec565b915050610833565b5081156109035760405162461bcd60e51b815260206004820152601d60248201527f5f62616c616e636546696e643a20636f72727570742062616c616e636500000060448201526064016106f0565b505b92915050565b6001546000906001600160a01b031633146109385760405162461bcd60e51b81526004016106f09061180c565b6001600160a01b038416600090815260066020526040902061095981611373565b6109656003601261185b565b61097090600a611962565b84101561099157600a8101546000945060ff16610991576000915050610b4d565b600a810154439060ff16158015906109a95750815485145b156109b75760019250610b4a565b600a820154600560ff90911610806109cc5750835b15610b4557600a820154600090600560ff909116106109f6576109f16001600561185b565b6109ff565b600a83015460ff165b9050805b60ff811615610a8b5783610a1860018361185b565b60ff1660058110610a2b57610a2b6117c0565b600202018460ff831660058110610a4457610a446117c0565b8254600291909102919091019081556001918201549101805467ffffffffffffffff19166001600160401b0390921691909117905580610a8381611971565b915050610a03565b5085835560018301805467ffffffffffffffff19166001600160401b038416179055600a830154600560ff9091161015610aee57600a8301805460ff16906000610ad4836117ec565b91906101000a81548160ff021916908360ff160217905550505b604080516001600160401b038416815260208101889052600195506001600160a01b038916917f0794a217cb61f365d81276ab2903aebd9d4d2c6d326af7deba31fce55ca8c48a910160405180910390a250610b4a565b600092505b50505b9392505050565b610b606003601261185b565b610b6b90600a611962565b81565b6000546001600160a01b03163314610be45760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79546f6b656e3a206f6e6c792063726561746f722063616e206174746160448201527218da0818481d1bdad95b8818dbdb9d1c9858dd606a1b60648201526084016106f0565b6001546001600160a01b031615610c5d5760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79546f6b656e3a2074686520746f6b656e20636f6e74726163742068616044820152761cc8185b1c9958591e481899595b88185d1d1858da1959604a1b60648201526084016106f0565b600080546001600160a01b0319908116909155600180549091166001600160a01b0392909216919091179055565b6004546001600160a01b03163314610d015760405162461bcd60e51b815260206004820152603360248201527f4f6e6c7941646d696e3a206f6e6c792063726561746f722063616e206174746160448201527218da08184818591b5a5b8818dbdb9d1c9858dd606a1b60648201526084016106f0565b6005546001600160a01b031615610d7a5760405162461bcd60e51b815260206004820152603760248201527f4f6e6c7941646d696e3a207468652061646d696e20636f6e74726163742068616044820152761cc8185b1c9958591e481899595b88185d1d1858da1959604a1b60648201526084016106f0565b600480546001600160a01b0319908116909155600580549091166001600160a01b0392909216919091179055565b6001546001600160a01b03163314610dd25760405162461bcd60e51b81526004016106f09061180c565b6001600160a01b0382166000908152600660205260409020610df381611373565b600a810154439060ff16610e555782825560018201805467ffffffffffffffff19166001600160401b038316179055600a8201805460ff16906000610e37836117ec565b91906101000a81548160ff021916908360ff16021790555050610e71565b8154831015610e71575081815560018101546001600160401b03165b604080516001600160401b0383168152602081018590526001600160a01b038616917f0794a217cb61f365d81276ab2903aebd9d4d2c6d326af7deba31fce55ca8c48a910160405180910390a250505050565b6001600160a01b03811660009081526009602052604081205460ff168015610efd5760ff81811614610ef65780610f00565b6000610f00565b60165b915060ff82161580610f25575060ff8216600a11801590610f255750605a60ff831611155b610f415760405162461bcd60e51b81526004016106f09061198e565b50919050565b6003546001600160a01b03163314610fbd5760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79547275737465653a206f6e6c7920747275737465652063616e20657860448201527232b1baba32903a3434b990333ab731ba34b7b760691b60648201526084016106f0565b6001600160401b0383166000908152600760205260408120805461ffff1691610fe5836119e3565b825461ffff9182166101009390930a9283029190920219909116179055506001600160401b0390921660009081526008602090815260408083206001600160a01b03909416835292905220805463ffffffff90921663ffffffff19909216919091179055565b8151606090819060ff81166001600160401b0381111561106d5761106d6115f8565b604051908082528060200260200182016040528015611096578160200160208202803683370190505b5092508060ff166001600160401b038111156110b4576110b46115f8565b6040519080825280602002602001820160405280156110dd578160200160208202803683370190505b50915060005b8160ff168160ff1610156111c257611130868260ff1681518110611109576111096117c0565b60200260200101516001600160401b031660009081526007602052604090205461ffff1690565b848260ff1681518110611145576111456117c0565b602002602001019061ffff16908161ffff1681525050611181868260ff1681518110611173576111736117c0565b60200260200101518661133c565b63ffffffff1660001415838260ff16815181106111a0576111a06117c0565b91151560209283029190910190910152806111ba816117ec565b9150506110e3565b50509250929050565b6005546001600160a01b0316331461123e5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c7941646d696e3a20636f6e6c792061646d696e2063616e20657865637560448201526f3a32903a3434b990333ab731ba34b7b760811b60648201526084016106f0565b600580546001600160401b03909216600160a01b0267ffffffffffffffff60a01b19909216919091179055565b610b6b6012600a611962565b3360ff8216158061129b575060ff8216600a1180159061129b5750605a60ff831611155b6112b75760405162461bcd60e51b81526004016106f09061198e565b600060ff8316156112c857826112cb565b60ff5b6001600160a01b03831660008181526009602052604090819020805460ff851660ff1990911617905551919250907f51a5c3921364280218d7e7926208d254f2ce18260cf6f45e7bb9432b044fe20b9061132f90869060ff91909116815260200190565b60405180910390a2505050565b6001600160401b0390911660009081526008602090815260408083206001600160a01b039094168352929052205463ffffffff1690565b600a810154600160ff909116111561143c57600a81015460009061139c9060019060ff1661185b565b90505b60ff81161561143a576000826113b660018461185b565b60ff16600581106113c9576113c96117c0565b600554600160029290920292909201908101549092506001600160401b03600160a01b909204821691161161142757600a8301805460ff1690600061140d83611971565b91906101000a81548160ff021916908360ff160217905550505b508061143281611971565b91505061139f565b505b50565b604080825283519082018190526000906020906060840190828701845b828110156114785781518452928401929084019060010161145c565b5050508381038285015284518082528583019183019060005b818110156114b65783516001600160401b031683529284019291840191600101611491565b5090979650505050505050565b80356001600160a01b03811681146114da57600080fd5b919050565b6000602082840312156114f157600080fd5b610b4d826114c3565b80356001600160401b03811681146114da57600080fd5b6000806040838503121561152457600080fd5b61152d836114c3565b915061153b602084016114fa565b90509250929050565b60008060006060848603121561155957600080fd5b611562846114c3565b9250602084013591506040840135801515811461157e57600080fd5b809150509250925092565b6000806040838503121561159c57600080fd5b6115a5836114c3565b946020939093013593505050565b6000806000606084860312156115c857600080fd5b6115d1846114fa565b92506115df602085016114c3565b9150604084013563ffffffff8116811461157e57600080fd5b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561162157600080fd5b82356001600160401b038082111561163857600080fd5b818501915085601f83011261164c57600080fd5b8135602082821115611660576116606115f8565b8160051b604051601f19603f83011681018181108682111715611685576116856115f8565b6040529283528183019350848101820192898411156116a357600080fd5b948201945b838610156116c8576116b9866114fa565b855294820194938201936116a8565b96506116d790508782016114c3565b9450505050509250929050565b604080825283519082018190526000906020906060840190828701845b8281101561172157815161ffff1684529284019290840190600101611701565b5050508381038285015284518082528583019183019060005b818110156114b657835115158352928401929184019160010161173a565b60006020828403121561176a57600080fd5b610b4d826114fa565b60006020828403121561178557600080fd5b813560ff81168114610b4d57600080fd5b600080604083850312156117a957600080fd5b6117b2836114fa565b915061153b602084016114c3565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff811415611803576118036117d6565b60010192915050565b6020808252602f908201527f4f6e6c79546f6b656e3a206f6e6c7920746f6b656e2063616e2065786563757460408201526e32903a3434b990333ab731ba34b7b760891b606082015260800190565b600060ff821660ff841680821015611875576118756117d6565b90039392505050565b600181815b808511156118b957816000190482111561189f5761189f6117d6565b808516156118ac57918102915b93841c9390800290611883565b509250929050565b6000826118d057506001610905565b816118dd57506000610905565b81600181146118f357600281146118fd57611919565b6001915050610905565b60ff84111561190e5761190e6117d6565b50506001821b610905565b5060208310610133831016604e8410600b841016171561193c575081810a610905565b611946838361187e565b806000190482111561195a5761195a6117d6565b029392505050565b6000610b4d60ff8416836118c1565b600060ff821680611984576119846117d6565b6000190192915050565b60208082526035908201527f436f6d6d6973696f6e2076616c7565206973206f7574206f6620616c6c6f77656040820152740642072616e67653a205b31302d39305d206f72203605c1b606082015260800190565b600061ffff808316818114156119fb576119fb6117d6565b600101939250505056fea26469706673582212203bbd01010ac8023f3ce02a864f4765034e0c92e956db208258f345aedf78d8d864736f6c634300080b0033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106102265760003560e01c8063609eb1c311610130578063ad6e3318116100b8578063c6088d971161007c578063c6088d971461043d578063d045d5ae14610446578063d7a8a2b714610473578063f883fcaa146103de578063fc47e2091461049b57600080fd5b8063ad6e33181461041a578063b313bd621461042d578063b91268e81461031d578063c28bd11c146103de578063c28cedf31461043557600080fd5b806381830593116100ff57806381830593146103e6578063910eb1ce146103f75780639d941362146103d6578063a21577671461040a578063a5c9cd821461041257600080fd5b8063609eb1c3146103a2578063731fd3f7146103b557806373d6aafa146103d65780637fb01232146103de57600080fd5b80633e6e387c116101b3578063504b366211610182578063504b36621461035b578063552ba3331461036357806356656875146103765780635b7f415c146103895780635fbe4d1d1461039157600080fd5b80633e6e387c14610325578063406a6f601461032d578063479e92c814610340578063480414df1461034857600080fd5b80631df55679116101fa5780631df55679146102a457806322a0c348146102b957806330db4fa0146102da578063362b8b32146102fa5780633a3a7c531461031d57600080fd5b8062113e081461022b57806306e386321461024a5780630bf433091461026557806314270b651461027f575b600080fd5b6102336104a4565b60405161024192919061143f565b60405180910390f35b610252600581565b60405161ffff9091168152602001610241565b61026d60d081565b60405160ff9091168152602001610241565b6003546001600160a01b03165b6040516001600160a01b039091168152602001610241565b6102b76102b23660046114df565b610674565b005b6102cc6102c7366004611511565b6107a6565b604051908152602001610241565b6102e260c881565b6040516001600160401b039091168152602001610241565b61030d610308366004611544565b61090b565b6040519015158152602001610241565b6102cc610b54565b610252600281565b6102b761033b3660046114df565b610b6e565b61026d600a81565b6102b76103563660046114df565b610c8b565b61026d606481565b6102b7610371366004611589565b610da8565b61026d6103843660046114df565b610ec4565b61026d601281565b6001546001600160a01b031661028c565b6102b76103b03660046115b3565b610f47565b6103c86103c336600461160e565b61104b565b6040516102419291906116e4565b610252600a81565b61026d600281565b6005546001600160a01b031661028c565b6102b7610405366004611758565b6111cb565b61026d60ff81565b6102cc61126b565b6102b7610428366004611773565b611277565b6102e2600281565b61030d600181565b6102526103e881565b610252610454366004611758565b6001600160401b031660009081526007602052604090205461ffff1690565b610486610481366004611796565b61133c565b60405163ffffffff9091168152602001610241565b6102e2612cbe81565b33600090815260066020526040808220815160e08101835260609384939092908290810182600586835b8282101561050f5760408051808201909152600283028501805482526001908101546001600160401b031660208084019190915291835290920191016104ce565b50505090825250600a919091015460ff9081166020928301529082015191925081166001600160401b03811115610548576105486115f8565b604051908082528060200260200182016040528015610571578160200160208202803683370190505b5093508060ff166001600160401b0381111561058f5761058f6115f8565b6040519080825280602002602001820160405280156105b8578160200160208202803683370190505b50925060005b826020015160ff168160ff16101561066d57825160ff8216600581106105e6576105e66117c0565b602002015160000151858260ff1681518110610604576106046117c0565b6020908102919091010152825160ff821660058110610625576106256117c0565b602002015160200151848260ff1681518110610643576106436117c0565b6001600160401b039092166020928302919091019091015280610665816117ec565b9150506105be565b5050509091565b6002546001600160a01b031633146106f95760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79547275737465653a206f6e6c792063726561746f722063616e20617460448201527f746163682061207472757374656520636f6e747261637400000000000000000060648201526084015b60405180910390fd5b6003546001600160a01b0316156107785760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c79547275737465653a20746865207472757374656520636f6e7472616360448201527f742068617320616c7265616479206265656e206174746163686564000000000060648201526084016106f0565b600280546001600160a01b0319908116909155600380549091166001600160a01b0392909216919091179055565b6001600160a01b038216600090815260066020526040808220815160e08101835283929091908290810182600586835b828210156108175760408051808201909152600283028501805482526001908101546001600160401b031660208084019190915291835290920191016107d6565b50505090825250600a919091015460ff16602090910152905060005b816020015160ff168160ff1610156108b457815160ff82166005811061085b5761085b6117c0565b6020020151602001516001600160401b0316846001600160401b0316106108a257815160ff821660058110610892576108926117c0565b6020020151519250610905915050565b806108ac816117ec565b915050610833565b5081156109035760405162461bcd60e51b815260206004820152601d60248201527f5f62616c616e636546696e643a20636f72727570742062616c616e636500000060448201526064016106f0565b505b92915050565b6001546000906001600160a01b031633146109385760405162461bcd60e51b81526004016106f09061180c565b6001600160a01b038416600090815260066020526040902061095981611373565b6109656003601261185b565b61097090600a611962565b84101561099157600a8101546000945060ff16610991576000915050610b4d565b600a810154439060ff16158015906109a95750815485145b156109b75760019250610b4a565b600a820154600560ff90911610806109cc5750835b15610b4557600a820154600090600560ff909116106109f6576109f16001600561185b565b6109ff565b600a83015460ff165b9050805b60ff811615610a8b5783610a1860018361185b565b60ff1660058110610a2b57610a2b6117c0565b600202018460ff831660058110610a4457610a446117c0565b8254600291909102919091019081556001918201549101805467ffffffffffffffff19166001600160401b0390921691909117905580610a8381611971565b915050610a03565b5085835560018301805467ffffffffffffffff19166001600160401b038416179055600a830154600560ff9091161015610aee57600a8301805460ff16906000610ad4836117ec565b91906101000a81548160ff021916908360ff160217905550505b604080516001600160401b038416815260208101889052600195506001600160a01b038916917f0794a217cb61f365d81276ab2903aebd9d4d2c6d326af7deba31fce55ca8c48a910160405180910390a250610b4a565b600092505b50505b9392505050565b610b606003601261185b565b610b6b90600a611962565b81565b6000546001600160a01b03163314610be45760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79546f6b656e3a206f6e6c792063726561746f722063616e206174746160448201527218da0818481d1bdad95b8818dbdb9d1c9858dd606a1b60648201526084016106f0565b6001546001600160a01b031615610c5d5760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79546f6b656e3a2074686520746f6b656e20636f6e74726163742068616044820152761cc8185b1c9958591e481899595b88185d1d1858da1959604a1b60648201526084016106f0565b600080546001600160a01b0319908116909155600180549091166001600160a01b0392909216919091179055565b6004546001600160a01b03163314610d015760405162461bcd60e51b815260206004820152603360248201527f4f6e6c7941646d696e3a206f6e6c792063726561746f722063616e206174746160448201527218da08184818591b5a5b8818dbdb9d1c9858dd606a1b60648201526084016106f0565b6005546001600160a01b031615610d7a5760405162461bcd60e51b815260206004820152603760248201527f4f6e6c7941646d696e3a207468652061646d696e20636f6e74726163742068616044820152761cc8185b1c9958591e481899595b88185d1d1858da1959604a1b60648201526084016106f0565b600480546001600160a01b0319908116909155600580549091166001600160a01b0392909216919091179055565b6001546001600160a01b03163314610dd25760405162461bcd60e51b81526004016106f09061180c565b6001600160a01b0382166000908152600660205260409020610df381611373565b600a810154439060ff16610e555782825560018201805467ffffffffffffffff19166001600160401b038316179055600a8201805460ff16906000610e37836117ec565b91906101000a81548160ff021916908360ff16021790555050610e71565b8154831015610e71575081815560018101546001600160401b03165b604080516001600160401b0383168152602081018590526001600160a01b038616917f0794a217cb61f365d81276ab2903aebd9d4d2c6d326af7deba31fce55ca8c48a910160405180910390a250505050565b6001600160a01b03811660009081526009602052604081205460ff168015610efd5760ff81811614610ef65780610f00565b6000610f00565b60165b915060ff82161580610f25575060ff8216600a11801590610f255750605a60ff831611155b610f415760405162461bcd60e51b81526004016106f09061198e565b50919050565b6003546001600160a01b03163314610fbd5760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79547275737465653a206f6e6c7920747275737465652063616e20657860448201527232b1baba32903a3434b990333ab731ba34b7b760691b60648201526084016106f0565b6001600160401b0383166000908152600760205260408120805461ffff1691610fe5836119e3565b825461ffff9182166101009390930a9283029190920219909116179055506001600160401b0390921660009081526008602090815260408083206001600160a01b03909416835292905220805463ffffffff90921663ffffffff19909216919091179055565b8151606090819060ff81166001600160401b0381111561106d5761106d6115f8565b604051908082528060200260200182016040528015611096578160200160208202803683370190505b5092508060ff166001600160401b038111156110b4576110b46115f8565b6040519080825280602002602001820160405280156110dd578160200160208202803683370190505b50915060005b8160ff168160ff1610156111c257611130868260ff1681518110611109576111096117c0565b60200260200101516001600160401b031660009081526007602052604090205461ffff1690565b848260ff1681518110611145576111456117c0565b602002602001019061ffff16908161ffff1681525050611181868260ff1681518110611173576111736117c0565b60200260200101518661133c565b63ffffffff1660001415838260ff16815181106111a0576111a06117c0565b91151560209283029190910190910152806111ba816117ec565b9150506110e3565b50509250929050565b6005546001600160a01b0316331461123e5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c7941646d696e3a20636f6e6c792061646d696e2063616e20657865637560448201526f3a32903a3434b990333ab731ba34b7b760811b60648201526084016106f0565b600580546001600160401b03909216600160a01b0267ffffffffffffffff60a01b19909216919091179055565b610b6b6012600a611962565b3360ff8216158061129b575060ff8216600a1180159061129b5750605a60ff831611155b6112b75760405162461bcd60e51b81526004016106f09061198e565b600060ff8316156112c857826112cb565b60ff5b6001600160a01b03831660008181526009602052604090819020805460ff851660ff1990911617905551919250907f51a5c3921364280218d7e7926208d254f2ce18260cf6f45e7bb9432b044fe20b9061132f90869060ff91909116815260200190565b60405180910390a2505050565b6001600160401b0390911660009081526008602090815260408083206001600160a01b039094168352929052205463ffffffff1690565b600a810154600160ff909116111561143c57600a81015460009061139c9060019060ff1661185b565b90505b60ff81161561143a576000826113b660018461185b565b60ff16600581106113c9576113c96117c0565b600554600160029290920292909201908101549092506001600160401b03600160a01b909204821691161161142757600a8301805460ff1690600061140d83611971565b91906101000a81548160ff021916908360ff160217905550505b508061143281611971565b91505061139f565b505b50565b604080825283519082018190526000906020906060840190828701845b828110156114785781518452928401929084019060010161145c565b5050508381038285015284518082528583019183019060005b818110156114b65783516001600160401b031683529284019291840191600101611491565b5090979650505050505050565b80356001600160a01b03811681146114da57600080fd5b919050565b6000602082840312156114f157600080fd5b610b4d826114c3565b80356001600160401b03811681146114da57600080fd5b6000806040838503121561152457600080fd5b61152d836114c3565b915061153b602084016114fa565b90509250929050565b60008060006060848603121561155957600080fd5b611562846114c3565b9250602084013591506040840135801515811461157e57600080fd5b809150509250925092565b6000806040838503121561159c57600080fd5b6115a5836114c3565b946020939093013593505050565b6000806000606084860312156115c857600080fd5b6115d1846114fa565b92506115df602085016114c3565b9150604084013563ffffffff8116811461157e57600080fd5b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561162157600080fd5b82356001600160401b038082111561163857600080fd5b818501915085601f83011261164c57600080fd5b8135602082821115611660576116606115f8565b8160051b604051601f19603f83011681018181108682111715611685576116856115f8565b6040529283528183019350848101820192898411156116a357600080fd5b948201945b838610156116c8576116b9866114fa565b855294820194938201936116a8565b96506116d790508782016114c3565b9450505050509250929050565b604080825283519082018190526000906020906060840190828701845b8281101561172157815161ffff1684529284019290840190600101611701565b5050508381038285015284518082528583019183019060005b818110156114b657835115158352928401929184019160010161173a565b60006020828403121561176a57600080fd5b610b4d826114fa565b60006020828403121561178557600080fd5b813560ff81168114610b4d57600080fd5b600080604083850312156117a957600080fd5b6117b2836114fa565b915061153b602084016114c3565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff811415611803576118036117d6565b60010192915050565b6020808252602f908201527f4f6e6c79546f6b656e3a206f6e6c7920746f6b656e2063616e2065786563757460408201526e32903a3434b990333ab731ba34b7b760891b606082015260800190565b600060ff821660ff841680821015611875576118756117d6565b90039392505050565b600181815b808511156118b957816000190482111561189f5761189f6117d6565b808516156118ac57918102915b93841c9390800290611883565b509250929050565b6000826118d057506001610905565b816118dd57506000610905565b81600181146118f357600281146118fd57611919565b6001915050610905565b60ff84111561190e5761190e6117d6565b50506001821b610905565b5060208310610133831016604e8410600b841016171561193c575081810a610905565b611946838361187e565b806000190482111561195a5761195a6117d6565b029392505050565b6000610b4d60ff8416836118c1565b600060ff821680611984576119846117d6565b6000190192915050565b60208082526035908201527f436f6d6d6973696f6e2076616c7565206973206f7574206f6620616c6c6f77656040820152740642072616e67653a205b31302d39305d206f72203605c1b606082015260800190565b600061ffff808316818114156119fb576119fb6117d6565b600101939250505056fea26469706673582212203bbd01010ac8023f3ce02a864f4765034e0c92e956db208258f345aedf78d8d864736f6c634300080b0033","devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":6239,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_creatorAddr","offset":0,"slot":"0","type":"t_address"},{"astId":6241,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_tokenAddr","offset":0,"slot":"1","type":"t_address"},{"astId":6316,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_creatorAddr","offset":0,"slot":"2","type":"t_address"},{"astId":6318,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_trusteeAddr","offset":0,"slot":"3","type":"t_address"},{"astId":6121,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_creatorAddr","offset":0,"slot":"4","type":"t_address"},{"astId":6123,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_adminAddr","offset":0,"slot":"5","type":"t_address"},{"astId":4470,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_firstBlockNumber","offset":20,"slot":"5","type":"t_uint64"},{"astId":4475,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_balanceRecords","offset":0,"slot":"6","type":"t_mapping(t_address,t_struct(AddrBalanceRecords)4468_storage)"},{"astId":4479,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_claimsCnt","offset":0,"slot":"7","type":"t_mapping(t_uint64,t_uint16)"},{"astId":4485,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_claimed","offset":0,"slot":"8","type":"t_mapping(t_uint64,t_mapping(t_address,t_uint32))"},{"astId":4489,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"_commisions","offset":0,"slot":"9","type":"t_mapping(t_address,t_uint8)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(AddrBalanceRecord)4460_storage)5_storage":{"base":"t_struct(AddrBalanceRecord)4460_storage","encoding":"inplace","label":"struct LuminaRecords.AddrBalanceRecord[5]","numberOfBytes":"320"},"t_mapping(t_address,t_struct(AddrBalanceRecords)4468_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct LuminaRecords.AddrBalanceRecords)","numberOfBytes":"32","value":"t_struct(AddrBalanceRecords)4468_storage"},"t_mapping(t_address,t_uint32)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint32)","numberOfBytes":"32","value":"t_uint32"},"t_mapping(t_address,t_uint8)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint8)","numberOfBytes":"32","value":"t_uint8"},"t_mapping(t_uint64,t_mapping(t_address,t_uint32))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(address => uint32))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint32)"},"t_mapping(t_uint64,t_uint16)":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => uint16)","numberOfBytes":"32","value":"t_uint16"},"t_struct(AddrBalanceRecord)4460_storage":{"encoding":"inplace","label":"struct LuminaRecords.AddrBalanceRecord","members":[{"astId":4457,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"balance","offset":0,"slot":"0","type":"t_uint256"},{"astId":4459,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"blockNumber","offset":0,"slot":"1","type":"t_uint64"}],"numberOfBytes":"64"},"t_struct(AddrBalanceRecords)4468_storage":{"encoding":"inplace","label":"struct LuminaRecords.AddrBalanceRecords","members":[{"astId":4465,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"records","offset":0,"slot":"0","type":"t_array(t_struct(AddrBalanceRecord)4460_storage)5_storage"},{"astId":4467,"contract":"contracts/LuminaRecords.sol:LuminaRecords","label":"recordsCnt","offset":0,"slot":"10","type":"t_uint8"}],"numberOfBytes":"352"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint32":{"encoding":"inplace","label":"uint32","numberOfBytes":"4"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}}}')},185:function(e){e.exports=JSON.parse('{"address":"0x77A8dE2d74e1328B989a3f4D8C4aEAB1e2A186fD","abi":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint256","name":"initSupply","type":"uint256"},{"internalType":"address","name":"recordsAddr_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"recordsAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"registerBalance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"transactionHash":"0x7f03b221691682e7a91768ec337cf3ea4c5a9416425baa8914257b43501edd91","receipt":{"to":null,"from":"0xC72E6D4E629F1C89d57f4D7Ad511d1b221D1d757","contractAddress":"0x77A8dE2d74e1328B989a3f4D8C4aEAB1e2A186fD","transactionIndex":0,"gasUsed":"825192","logsBloom":"0xblockHash":"0x95e9a3a968b7e06b6e45c092c7c2d1570338a79cc0e1e288c3ff31ba20d8d69e","transactionHash":"0x7f03b221691682e7a91768ec337cf3ea4c5a9416425baa8914257b43501edd91","logs":[{"transactionIndex":0,"blockNumber":24340032,"transactionHash":"0x7f03b221691682e7a91768ec337cf3ea4c5a9416425baa8914257b43501edd91","address":"0x77A8dE2d74e1328B989a3f4D8C4aEAB1e2A186fD","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757"],"data":"0x000000000000000000000000000000000000000000115eec47f6cf7e35000000","logIndex":0,"blockHash":"0x95e9a3a968b7e06b6e45c092c7c2d1570338a79cc0e1e288c3ff31ba20d8d69e"},{"transactionIndex":0,"blockNumber":24340032,"transactionHash":"0x7f03b221691682e7a91768ec337cf3ea4c5a9416425baa8914257b43501edd91","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"],"data":"0x0000000000000000000000000000000000000000000000000057f33b8873f5f00000000000000000000000000000000000000000000000000c4da8daf37f85190000000000000000000000000000000000000000000005a8c2397efa277f78a60000000000000000000000000000000000000000000000000bf5b59f6b0b8f290000000000000000000000000000000000000000000005a8c2917235aff36e96","logIndex":1,"blockHash":"0x95e9a3a968b7e06b6e45c092c7c2d1570338a79cc0e1e288c3ff31ba20d8d69e"}],"blockNumber":24340032,"cumulativeGasUsed":"825192","status":1,"byzantium":true},"args":["Lumina","LUMI",21000000,"0x368be2112082181528B2ce74B342dAb4e1762607"],"solcInputHash":"93d9a3e5beccfe46ed35f40bd3a64522","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.11+commit.d7f03943\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"symbol\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"initSupply\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recordsAddr_\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Approval\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Transfer\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"}],\\"name\\":\\"allowance\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"approve\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"balanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"decimals\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"subtractedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"decreaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"addedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"increaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"recordsAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"registerBalance\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"symbol\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"totalSupply\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transfer\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"sender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transferFrom\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"allowance(address,address)\\":{\\"details\\":\\"See {IERC20-allowance}.\\"},\\"approve(address,uint256)\\":{\\"details\\":\\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\\"},\\"balanceOf(address)\\":{\\"details\\":\\"See {IERC20-balanceOf}.\\"},\\"decimals()\\":{\\"details\\":\\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\\"},\\"decreaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\\"},\\"increaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\\"},\\"name()\\":{\\"details\\":\\"Returns the name of the token.\\"},\\"symbol()\\":{\\"details\\":\\"Returns the symbol of the token, usually a shorter version of the name.\\"},\\"totalSupply()\\":{\\"details\\":\\"See {IERC20-totalSupply}.\\"},\\"transfer(address,uint256)\\":{\\"details\\":\\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\\"},\\"transferFrom(address,address,uint256)\\":{\\"details\\":\\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/LuminaToken.sol\\":\\"LuminaToken\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./IERC20.sol\\\\\\";\\\\nimport \\\\\\"./extensions/IERC20Metadata.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC20} interface.\\\\n *\\\\n * This implementation is agnostic to the way tokens are created. This means\\\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\\\n *\\\\n * TIP: For a detailed writeup see our guide\\\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\\\n * to implement supply mechanisms].\\\\n *\\\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\\\n * instead returning `false` on failure. This behavior is nonetheless\\\\n * conventional and does not conflict with the expectations of ERC20\\\\n * applications.\\\\n *\\\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\\\n * This allows applications to reconstruct the allowance for all accounts just\\\\n * by listening to said events. Other implementations of the EIP may not emit\\\\n * these events, as it isn\'t required by the specification.\\\\n *\\\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\\\n * functions have been added to mitigate the well-known issues around setting\\\\n * allowances. See {IERC20-approve}.\\\\n */\\\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\\\n    mapping(address => uint256) private _balances;\\\\n\\\\n    mapping(address => mapping(address => uint256)) private _allowances;\\\\n\\\\n    uint256 private _totalSupply;\\\\n\\\\n    string private _name;\\\\n    string private _symbol;\\\\n\\\\n    /**\\\\n     * @dev Sets the values for {name} and {symbol}.\\\\n     *\\\\n     * The default value of {decimals} is 18. To select a different value for\\\\n     * {decimals} you should overload it.\\\\n     *\\\\n     * All two of these values are immutable: they can only be set once during\\\\n     * construction.\\\\n     */\\\\n    constructor(string memory name_, string memory symbol_) {\\\\n        _name = name_;\\\\n        _symbol = symbol_;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() public view virtual override returns (string memory) {\\\\n        return _name;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\\\n     * name.\\\\n     */\\\\n    function symbol() public view virtual override returns (string memory) {\\\\n        return _symbol;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of decimals used to get its user representation.\\\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\\\n     *\\\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\\\n     * overridden;\\\\n     *\\\\n     * NOTE: This information is only used for _display_ purposes: it in\\\\n     * no way affects any of the arithmetic of the contract, including\\\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\\\n     */\\\\n    function decimals() public view virtual override returns (uint8) {\\\\n        return 18;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-totalSupply}.\\\\n     */\\\\n    function totalSupply() public view virtual override returns (uint256) {\\\\n        return _totalSupply;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-balanceOf}.\\\\n     */\\\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\\\n        return _balances[account];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transfer}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - the caller must have a balance of at least `amount`.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(_msgSender(), recipient, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-allowance}.\\\\n     */\\\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\\\n        return _allowances[owner][spender];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-approve}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\\\n        _approve(_msgSender(), spender, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transferFrom}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` and `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     * - the caller must have allowance for ``sender``\'s tokens of at least\\\\n     * `amount`.\\\\n     */\\\\n    function transferFrom(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) public virtual override returns (bool) {\\\\n        _transfer(sender, recipient, amount);\\\\n\\\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\\\n        require(currentAllowance >= amount, \\\\\\"ERC20: transfer amount exceeds allowance\\\\\\");\\\\n        unchecked {\\\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\\\n        }\\\\n\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     * - `spender` must have allowance for the caller of at least\\\\n     * `subtractedValue`.\\\\n     */\\\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\\\n        require(currentAllowance >= subtractedValue, \\\\\\"ERC20: decreased allowance below zero\\\\\\");\\\\n        unchecked {\\\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\\\n        }\\\\n\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\\\n     *\\\\n     * This internal function is equivalent to {transfer}, and can be used to\\\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` cannot be the zero address.\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     */\\\\n    function _transfer(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal virtual {\\\\n        require(sender != address(0), \\\\\\"ERC20: transfer from the zero address\\\\\\");\\\\n        require(recipient != address(0), \\\\\\"ERC20: transfer to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(sender, recipient, amount);\\\\n\\\\n        uint256 senderBalance = _balances[sender];\\\\n        require(senderBalance >= amount, \\\\\\"ERC20: transfer amount exceeds balance\\\\\\");\\\\n        unchecked {\\\\n            _balances[sender] = senderBalance - amount;\\\\n        }\\\\n        _balances[recipient] += amount;\\\\n\\\\n        emit Transfer(sender, recipient, amount);\\\\n\\\\n        _afterTokenTransfer(sender, recipient, amount);\\\\n    }\\\\n\\\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\\\n     * the total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `from` set to the zero address.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     */\\\\n    function _mint(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: mint to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(address(0), account, amount);\\\\n\\\\n        _totalSupply += amount;\\\\n        _balances[account] += amount;\\\\n        emit Transfer(address(0), account, amount);\\\\n\\\\n        _afterTokenTransfer(address(0), account, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\\\n     * total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `to` set to the zero address.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     * - `account` must have at least `amount` tokens.\\\\n     */\\\\n    function _burn(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: burn from the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(account, address(0), amount);\\\\n\\\\n        uint256 accountBalance = _balances[account];\\\\n        require(accountBalance >= amount, \\\\\\"ERC20: burn amount exceeds balance\\\\\\");\\\\n        unchecked {\\\\n            _balances[account] = accountBalance - amount;\\\\n        }\\\\n        _totalSupply -= amount;\\\\n\\\\n        emit Transfer(account, address(0), amount);\\\\n\\\\n        _afterTokenTransfer(account, address(0), amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\\\n     *\\\\n     * This internal function is equivalent to `approve`, and can be used to\\\\n     * e.g. set automatic allowances for certain subsystems, etc.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `owner` cannot be the zero address.\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function _approve(\\\\n        address owner,\\\\n        address spender,\\\\n        uint256 amount\\\\n    ) internal virtual {\\\\n        require(owner != address(0), \\\\\\"ERC20: approve from the zero address\\\\\\");\\\\n        require(spender != address(0), \\\\\\"ERC20: approve to the zero address\\\\\\");\\\\n\\\\n        _allowances[owner][spender] = amount;\\\\n        emit Approval(owner, spender, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Hook that is called before any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * will be transferred to `to`.\\\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens will be burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _beforeTokenTransfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 amount\\\\n    ) internal virtual {}\\\\n\\\\n    /**\\\\n     * @dev Hook that is called after any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * has been transferred to `to`.\\\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens have been burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _afterTokenTransfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 amount\\\\n    ) internal virtual {}\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../IERC20.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\\\n *\\\\n * _Available since v4.1._\\\\n */\\\\ninterface IERC20Metadata is IERC20 {\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token.\\\\n     */\\\\n    function symbol() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the decimals places of the token.\\\\n     */\\\\n    function decimals() external view returns (uint8);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaRecords {\\\\n\\\\n    function getBalances() external view returns (uint256[] memory balances, uint64[] memory blockNumbers);\\\\n    function findBalance(address wallet, uint64 blockNumber) external view returns (uint256 balance);\\\\n    function getClaimsCnt(uint64 blockNumber) external view returns (uint16);\\\\n    function hasClaimed(uint64 blockNumber, address recipient) external view returns (uint32 rewardUnits);\\\\n    function getClaims(uint64[] memory blockNumbers, address recipient) external view returns (uint16[] memory claimsCnt, bool[] memory claimed);\\\\n    function setCommision(uint8 commisionPrc) external;\\\\n    function getCommision(address wallet) external view returns (uint8 commisionPrc);\\\\n    function _registerBalance(address sender, uint256 balance, bool force) external returns (bool registered); // onlyToken\\\\n    function _updateBalance(address sender, uint256 balance) external; // onlyToken\\\\n    function _addClaim(uint64 blockNumber, address recipient, uint32 rewardUnits) external; // onlyTrustee\\\\n    function _updateFirstBlockNumber(uint64 blockNumber) external; // onlyAdmin\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe5ffa5a99c551fc5d68b334fee66b7c566aa7f7600cf275c251c208d8a1560b2\\",\\"license\\":\\"MIT\\"},\\"contracts/LuminaToken.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./ILuminaRecords.sol\\\\\\";\\\\n\\\\ncontract LuminaToken is ERC20 {\\\\n    // Public address of the linked token contract\\\\n    address public recordsAddr;\\\\n    // Link to the records contract\\\\n    ILuminaRecords private records;\\\\n\\\\n    constructor(string memory name, string memory symbol, uint initSupply, address recordsAddr_) ERC20(name, symbol) {\\\\n        // Mint initial supply to msg.sender\\\\n        uint8 decimals = decimals();\\\\n        require(decimals == 18);\\\\n        _mint(msg.sender, initSupply * (10**decimals));\\\\n\\\\n        // Register the records contract address\\\\n        recordsAddr = recordsAddr_;\\\\n        records = ILuminaRecords(recordsAddr_);\\\\n     }\\\\n\\\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\\\\n        super._transfer(sender, recipient, amount);\\\\n\\\\n        try records._updateBalance(sender, balanceOf(sender)) {\\\\n        } catch {\\\\n        }\\\\n\\\\n        try records._registerBalance(recipient, balanceOf(recipient), false) {\\\\n        } catch {\\\\n        }\\\\n    }\\\\n\\\\n    function registerBalance() public {\\\\n        uint256 balance = balanceOf(msg.sender);\\\\n        records._registerBalance(msg.sender, balance, true);\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5f87dbf57391bdcea10dd041f042ba892331ed207bcb1dab9a037a0c625f0c3d\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b50604051620010a3380380620010a3833981016040819052620000349162000344565b8351849084906200004d906003906020850190620001d1565b50805162000063906004906020840190620001d1565b505050600062000078620000e460201b60201c565b90508060ff166012146200008b57600080fd5b620000af336200009d83600a620004ee565b620000a9908662000506565b620000e9565b50600580546001600160a01b039092166001600160a01b03199283168117909155600680549092161790555062000580915050565b601290565b6001600160a01b038216620001445760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b806002600082825462000158919062000528565b90915550506001600160a01b038216600090815260208190526040812080548392906200018790849062000528565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620001df9062000543565b90600052602060002090601f0160209004810192826200020357600085556200024e565b82601f106200021e57805160ff19168380011785556200024e565b828001600101855582156200024e579182015b828111156200024e57825182559160200191906001019062000231565b506200025c92915062000260565b5090565b5b808211156200025c576000815560010162000261565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200029f57600080fd5b81516001600160401b0380821115620002bc57620002bc62000277565b604051601f8301601f19908116603f01168101908282118183101715620002e757620002e762000277565b816040528381526020925086838588010111156200030457600080fd5b600091505b8382101562000328578582018301518183018401529082019062000309565b838211156200033a5760008385830101525b9695505050505050565b600080600080608085870312156200035b57600080fd5b84516001600160401b03808211156200037357600080fd5b62000381888389016200028d565b955060208701519150808211156200039857600080fd5b50620003a7878288016200028d565b60408701516060880151919550935090506001600160a01b0381168114620003ce57600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000430578160001904821115620004145762000414620003d9565b808516156200042257918102915b93841c9390800290620003f4565b509250929050565b6000826200044957506001620004e8565b816200045857506000620004e8565b81600181146200047157600281146200047c576200049c565b6001915050620004e8565b60ff841115620004905762000490620003d9565b50506001821b620004e8565b5060208310610133831016604e8410600b8410161715620004c1575081810a620004e8565b620004cd8383620003ef565b8060001904821115620004e457620004e4620003d9565b0290505b92915050565b6000620004ff60ff84168362000438565b9392505050565b6000816000190483118215151615620005235762000523620003d9565b500290565b600082198211156200053e576200053e620003d9565b500190565b600181811c908216806200055857607f821691505b602082108114156200057a57634e487b7160e01b600052602260045260246000fd5b50919050565b610b1380620005906000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c578063a457c2d711610066578063a457c2d7146101b8578063a9059cbb146101cb578063c2cf1cdc146101de578063dd62ed3e146101e857600080fd5b8063395093511461017457806370a082311461018757806395d89b41146101b057600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd146101155780631e7bfd601461012757806323b872dd14610152578063313ce56714610165575b600080fd5b6100dc610221565b6040516100e9919061092e565b60405180910390f35b61010561010036600461099f565b6102b3565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b60055461013a906001600160a01b031681565b6040516001600160a01b0390911681526020016100e9565b6101056101603660046109c9565b6102c9565b604051601281526020016100e9565b61010561018236600461099f565b610378565b610119610195366004610a05565b6001600160a01b031660009081526020819052604090205490565b6100dc6103b4565b6101056101c636600461099f565b6103c3565b6101056101d936600461099f565b61045c565b6101e6610469565b005b6101196101f6366004610a27565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461023090610a5a565b80601f016020809104026020016040519081016040528092919081815260200182805461025c90610a5a565b80156102a95780601f1061027e576101008083540402835291602001916102a9565b820191906000526020600020905b81548152906001019060200180831161028c57829003601f168201915b5050505050905090565b60006102c03384846104fa565b50600192915050565b60006102d684848461061e565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103605760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61036d85338584036104fa565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102c09185906103af908690610a95565b6104fa565b60606004805461023090610a5a565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104455760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610357565b61045233858584036104fa565b5060019392505050565b60006102c033848461061e565b33600090815260208190526040812054600654604051631b15c59960e11b815233600482015260248101839052600160448201529192506001600160a01b03169063362b8b32906064016020604051808303816000875af11580156104d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f69190610abb565b5050565b6001600160a01b03831661055c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610357565b6001600160a01b0382166105bd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610357565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b610629838383610760565b6006546001600160a01b031663552ba3338461065a816001600160a01b031660009081526020819052604090205490565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156106a057600080fd5b505af19250505080156106b1575060015b506006546001600160a01b031663362b8b32836106e3816001600160a01b031660009081526020819052604090205490565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152600060448201526064016020604051808303816000875af1925050508015610751575060408051601f3d908101601f1916820190925261074e91810190610abb565b60015b61075a57505050565b50505050565b6001600160a01b0383166107c45760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610357565b6001600160a01b0382166108265760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610357565b6001600160a01b0383166000908152602081905260409020548181101561089e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610357565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906108d5908490610a95565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161092191815260200190565b60405180910390a361075a565b600060208083528351808285015260005b8181101561095b5785810183015185820160400152820161093f565b8181111561096d576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461099a57600080fd5b919050565b600080604083850312156109b257600080fd5b6109bb83610983565b946020939093013593505050565b6000806000606084860312156109de57600080fd5b6109e784610983565b92506109f560208501610983565b9150604084013590509250925092565b600060208284031215610a1757600080fd5b610a2082610983565b9392505050565b60008060408385031215610a3a57600080fd5b610a4383610983565b9150610a5160208401610983565b90509250929050565b600181811c90821680610a6e57607f821691505b60208210811415610a8f57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610ab657634e487b7160e01b600052601160045260246000fd5b500190565b600060208284031215610acd57600080fd5b81518015158114610a2057600080fdfea26469706673582212209c3f96b4504cef7d73ba137cba03e598e0c6c339c9805d18e5422456a47b06cc64736f6c634300080b0033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c578063a457c2d711610066578063a457c2d7146101b8578063a9059cbb146101cb578063c2cf1cdc146101de578063dd62ed3e146101e857600080fd5b8063395093511461017457806370a082311461018757806395d89b41146101b057600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd146101155780631e7bfd601461012757806323b872dd14610152578063313ce56714610165575b600080fd5b6100dc610221565b6040516100e9919061092e565b60405180910390f35b61010561010036600461099f565b6102b3565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b60055461013a906001600160a01b031681565b6040516001600160a01b0390911681526020016100e9565b6101056101603660046109c9565b6102c9565b604051601281526020016100e9565b61010561018236600461099f565b610378565b610119610195366004610a05565b6001600160a01b031660009081526020819052604090205490565b6100dc6103b4565b6101056101c636600461099f565b6103c3565b6101056101d936600461099f565b61045c565b6101e6610469565b005b6101196101f6366004610a27565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461023090610a5a565b80601f016020809104026020016040519081016040528092919081815260200182805461025c90610a5a565b80156102a95780601f1061027e576101008083540402835291602001916102a9565b820191906000526020600020905b81548152906001019060200180831161028c57829003601f168201915b5050505050905090565b60006102c03384846104fa565b50600192915050565b60006102d684848461061e565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103605760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61036d85338584036104fa565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102c09185906103af908690610a95565b6104fa565b60606004805461023090610a5a565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104455760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610357565b61045233858584036104fa565b5060019392505050565b60006102c033848461061e565b33600090815260208190526040812054600654604051631b15c59960e11b815233600482015260248101839052600160448201529192506001600160a01b03169063362b8b32906064016020604051808303816000875af11580156104d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f69190610abb565b5050565b6001600160a01b03831661055c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610357565b6001600160a01b0382166105bd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610357565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b610629838383610760565b6006546001600160a01b031663552ba3338461065a816001600160a01b031660009081526020819052604090205490565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156106a057600080fd5b505af19250505080156106b1575060015b506006546001600160a01b031663362b8b32836106e3816001600160a01b031660009081526020819052604090205490565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152600060448201526064016020604051808303816000875af1925050508015610751575060408051601f3d908101601f1916820190925261074e91810190610abb565b60015b61075a57505050565b50505050565b6001600160a01b0383166107c45760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610357565b6001600160a01b0382166108265760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610357565b6001600160a01b0383166000908152602081905260409020548181101561089e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610357565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906108d5908490610a95565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161092191815260200190565b60405180910390a361075a565b600060208083528351808285015260005b8181101561095b5785810183015185820160400152820161093f565b8181111561096d576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461099a57600080fd5b919050565b600080604083850312156109b257600080fd5b6109bb83610983565b946020939093013593505050565b6000806000606084860312156109de57600080fd5b6109e784610983565b92506109f560208501610983565b9150604084013590509250925092565b600060208284031215610a1757600080fd5b610a2082610983565b9392505050565b60008060408385031215610a3a57600080fd5b610a4383610983565b9150610a5160208401610983565b90509250929050565b600181811c90821680610a6e57607f821691505b60208210811415610a8f57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610ab657634e487b7160e01b600052601160045260246000fd5b500190565b600060208284031215610acd57600080fd5b81518015158114610a2057600080fdfea26469706673582212209c3f96b4504cef7d73ba137cba03e598e0c6c339c9805d18e5422456a47b06cc64736f6c634300080b0033","devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":212,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":218,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":220,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":222,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":224,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"},{"astId":5185,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"recordsAddr","offset":0,"slot":"5","type":"t_address"},{"astId":5188,"contract":"contracts/LuminaToken.sol:LuminaToken","label":"records","offset":0,"slot":"6","type":"t_contract(ILuminaRecords)2379"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_contract(ILuminaRecords)2379":{"encoding":"inplace","label":"contract ILuminaRecords","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},186:function(e){e.exports=JSON.parse('{"address":"0x4512dDC51F1A46de3b92E9BD61fEC02765c8DA8b","abi":[{"inputs":[{"internalType":"address","name":"tokenAddr_","type":"address"},{"internalType":"address","name":"recordsAddr_","type":"address"},{"internalType":"address","name":"adminAddr_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"blockNumber","type":"uint64"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"address","name":"miner","type":"address"},{"indexed":false,"internalType":"uint256","name":"solution","type":"uint256"},{"indexed":false,"internalType":"uint8","name":"commisionPrc","type":"uint8"},{"indexed":false,"internalType":"uint16","name":"claimNo","type":"uint16"}],"name":"Claim","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"marketingAddr","type":"address"},{"indexed":false,"internalType":"uint64","name":"blockNumber","type":"uint64"},{"indexed":false,"internalType":"string","name":"message","type":"string"}],"name":"MarketingCallFailed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_CHALLENGE_INC","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BLOCKS_PER_WEEK","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_DIFFICULTY_STEP","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CHALLENGE_NULL","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEMO","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LUCKY_NUMBER","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_CNT","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_DONOR_BLOCKS","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINERS_CLAIM_MIN_RECIPIENT_BALANCE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_CHALLENGE_DIFFICULTY","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARDS_CNT_LIMIT","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_INC_INTERVAL","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_INC","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_STANDARD","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_UNITS_START","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_DECIMALS","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_UNIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"adminAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"miner","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"solution","type":"uint256"}],"name":"claimReward","outputs":[{"internalType":"uint32","name":"rewardUnits","type":"uint32"},{"internalType":"uint8","name":"reason","type":"uint8"},{"internalType":"bool","name":"premium","type":"bool"},{"internalType":"uint16","name":"claimsCnt","type":"uint16"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getClaimedTokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProgress","outputs":[{"internalType":"uint256","name":"progress","type":"uint256"},{"internalType":"uint256","name":"progressMax","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"marketingAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"recordsAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"marketingAddr_","type":"address"}],"name":"setMarketingAddr","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tokenAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"miner","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"solution","type":"uint256"}],"name":"verifyClaim","outputs":[{"internalType":"uint32","name":"rewardUnits","type":"uint32"},{"internalType":"uint8","name":"reason","type":"uint8"},{"internalType":"bool","name":"premium","type":"bool"},{"internalType":"uint16","name":"rewardsCnt","type":"uint16"},{"internalType":"uint16","name":"claimsCnt","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"miner","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"solution","type":"uint256"}],"name":"verifySolution","outputs":[{"internalType":"uint16","name":"solvedDifficulty","type":"uint16"}],"stateMutability":"view","type":"function"}],"transactionHash":"0xa4f19c090d00a9e0512293600b8f1ecbc53417c3454fd438fa7672f4a9e82838","receipt":{"to":null,"from":"0xC72E6D4E629F1C89d57f4D7Ad511d1b221D1d757","contractAddress":"0x4512dDC51F1A46de3b92E9BD61fEC02765c8DA8b","transactionIndex":0,"gasUsed":"2257692","logsBloom":"0xblockHash":"0x81983006cdc3eb62c846a10b2c44e8730b24f2695a8fb86f66c6c3a87ca89dd7","transactionHash":"0xa4f19c090d00a9e0512293600b8f1ecbc53417c3454fd438fa7672f4a9e82838","logs":[{"transactionIndex":0,"blockNumber":24340040,"transactionHash":"0xa4f19c090d00a9e0512293600b8f1ecbc53417c3454fd438fa7672f4a9e82838","address":"0x4512dDC51F1A46de3b92E9BD61fEC02765c8DA8b","topics":["0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757"],"data":"0x","logIndex":0,"blockHash":"0x81983006cdc3eb62c846a10b2c44e8730b24f2695a8fb86f66c6c3a87ca89dd7"},{"transactionIndex":0,"blockNumber":24340040,"transactionHash":"0xa4f19c090d00a9e0512293600b8f1ecbc53417c3454fd438fa7672f4a9e82838","address":"0x4512dDC51F1A46de3b92E9BD61fEC02765c8DA8b","topics":["0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258"],"data":"0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","logIndex":1,"blockHash":"0x81983006cdc3eb62c846a10b2c44e8730b24f2695a8fb86f66c6c3a87ca89dd7"},{"transactionIndex":0,"blockNumber":24340040,"transactionHash":"0xa4f19c090d00a9e0512293600b8f1ecbc53417c3454fd438fa7672f4a9e82838","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"],"data":"0x00000000000000000000000000000000000000000000000000f0a0c470d250e800000000000000000000000000000000000000000000000008db3cadf2ca59190000000000000000000000000000000000000000000005a8c7490abd23b865ab00000000000000000000000000000000000000000000000007ea9be981f808310000000000000000000000000000000000000000000005a8c839ab81948ab693","logIndex":2,"blockHash":"0x81983006cdc3eb62c846a10b2c44e8730b24f2695a8fb86f66c6c3a87ca89dd7"}],"blockNumber":24340040,"cumulativeGasUsed":"2257692","status":1,"byzantium":true},"args":["0x77A8dE2d74e1328B989a3f4D8C4aEAB1e2A186fD","0x368be2112082181528B2ce74B342dAb4e1762607","0x2db729A6708b9b17960dB4864b5f371e9E2FD2d4"],"solcInputHash":"93d9a3e5beccfe46ed35f40bd3a64522","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.11+commit.d7f03943\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"tokenAddr_\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recordsAddr_\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"adminAddr_\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"miner\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"solution\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint8\\",\\"name\\":\\"commisionPrc\\",\\"type\\":\\"uint8\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint16\\",\\"name\\":\\"claimNo\\",\\"type\\":\\"uint16\\"}],\\"name\\":\\"Claim\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"marketingAddr\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"indexed\\":false,\\"internalType\\":\\"string\\",\\"name\\":\\"message\\",\\"type\\":\\"string\\"}],\\"name\\":\\"MarketingCallFailed\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"previousOwner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"OwnershipTransferred\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Paused\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Unpaused\\",\\"type\\":\\"event\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_CHALLENGE_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"BLOCKS_PER_WEEK\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_DIFFICULTY_STEP\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"CHALLENGE_NULL\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"DEMO\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"LUCKY_NUMBER\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_CNT\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MAX_DONOR_BLOCKS\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MINERS_CLAIM_MIN_RECIPIENT_BALANCE\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"MIN_CHALLENGE_DIFFICULTY\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARDS_CNT_LIMIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_INC_INTERVAL\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_INC\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_STANDARD\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"REWARD_UNITS_START\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_DECIMALS\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"TOKEN_UNIT\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"adminAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"miner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"solution\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"claimReward\\",\\"outputs\\":[{\\"internalType\\":\\"uint32\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint32\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"reason\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"uint16\\",\\"name\\":\\"claimsCnt\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getClaimedTokens\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getProgress\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"progress\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"progressMax\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"marketingAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"owner\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"pause\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"paused\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"recordsAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"renounceOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"marketingAddr_\\",\\"type\\":\\"address\\"}],\\"name\\":\\"setMarketingAddr\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"tokenAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"transferOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"unpause\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"miner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"solution\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"verifyClaim\\",\\"outputs\\":[{\\"internalType\\":\\"uint32\\",\\"name\\":\\"rewardUnits\\",\\"type\\":\\"uint32\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"reason\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"premium\\",\\"type\\":\\"bool\\"},{\\"internalType\\":\\"uint16\\",\\"name\\":\\"rewardsCnt\\",\\"type\\":\\"uint16\\"},{\\"internalType\\":\\"uint16\\",\\"name\\":\\"claimsCnt\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"blockNumber\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"miner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"solution\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"verifySolution\\",\\"outputs\\":[{\\"internalType\\":\\"uint16\\",\\"name\\":\\"solvedDifficulty\\",\\"type\\":\\"uint16\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"owner()\\":{\\"details\\":\\"Returns the address of the current owner.\\"},\\"paused()\\":{\\"details\\":\\"Returns true if the contract is paused, and false otherwise.\\"},\\"renounceOwnership()\\":{\\"details\\":\\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\\"},\\"transferOwnership(address)\\":{\\"details\\":\\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/LuminaTrustee.sol\\":\\"LuminaTrustee\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/access/Ownable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * By default, the owner account will be the one that deploys the contract. This\\\\n * can later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\nabstract contract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\\\n     */\\\\n    constructor() {\\\\n        _transferOwnership(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view virtual returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        require(owner() == _msgSender(), \\\\\\"Ownable: caller is not the owner\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby removing any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        _transferOwnership(address(0));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        require(newOwner != address(0), \\\\\\"Ownable: new owner is the zero address\\\\\\");\\\\n        _transferOwnership(newOwner);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Internal function without access restriction.\\\\n     */\\\\n    function _transferOwnership(address newOwner) internal virtual {\\\\n        address oldOwner = _owner;\\\\n        _owner = newOwner;\\\\n        emit OwnershipTransferred(oldOwner, newOwner);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/security/Pausable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which allows children to implement an emergency stop\\\\n * mechanism that can be triggered by an authorized account.\\\\n *\\\\n * This module is used through inheritance. It will make available the\\\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\\\n * the functions of your contract. Note that they will not be pausable by\\\\n * simply including this module, only once the modifiers are put in place.\\\\n */\\\\nabstract contract Pausable is Context {\\\\n    /**\\\\n     * @dev Emitted when the pause is triggered by `account`.\\\\n     */\\\\n    event Paused(address account);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the pause is lifted by `account`.\\\\n     */\\\\n    event Unpaused(address account);\\\\n\\\\n    bool private _paused;\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract in unpaused state.\\\\n     */\\\\n    constructor() {\\\\n        _paused = false;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns true if the contract is paused, and false otherwise.\\\\n     */\\\\n    function paused() public view virtual returns (bool) {\\\\n        return _paused;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must not be paused.\\\\n     */\\\\n    modifier whenNotPaused() {\\\\n        require(!paused(), \\\\\\"Pausable: paused\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Modifier to make a function callable only when the contract is paused.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must be paused.\\\\n     */\\\\n    modifier whenPaused() {\\\\n        require(paused(), \\\\\\"Pausable: not paused\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Triggers stopped state.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must not be paused.\\\\n     */\\\\n    function _pause() internal virtual whenNotPaused {\\\\n        _paused = true;\\\\n        emit Paused(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns to normal state.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The contract must be paused.\\\\n     */\\\\n    function _unpause() internal virtual whenPaused {\\\\n        _paused = false;\\\\n        emit Unpaused(_msgSender());\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n// CAUTION\\\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\\\n// because it relies on the compiler\'s built in overflow checks.\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations.\\\\n *\\\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\\\n * now has built in overflow checking.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            uint256 c = a + b;\\\\n            if (c < a) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b > a) return (false, 0);\\\\n            return (true, a - b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n            // benefit is lost if \'b\' is also tested.\\\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n            if (a == 0) return (true, 0);\\\\n            uint256 c = a * b;\\\\n            if (c / a != b) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a / b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a % b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a + b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a - b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a * b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a / b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a % b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b <= a, errorMessage);\\\\n            return a - b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a / b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting with custom message when dividing by zero.\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a % b;\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\\",\\"license\\":\\"MIT\\"},\\"contracts/ChallengeRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./Parameters.sol\\\\\\";\\\\nimport \\\\\\"./Utils.sol\\\\\\";\\\\n\\\\nabstract contract ChallengeRecords is Parameters, Utils {\\\\n\\\\n    struct Challenge {\\\\n        uint256 challengeHash;\\\\n        uint64 blockNumber;\\\\n        uint16 rewardUnits; // 1 - 1000\\\\n        uint8 index;\\\\n        bool valid;\\\\n        uint8 prev;\\\\n        uint8 next;\\\\n    }\\\\n\\\\n    struct ChallengeSet {\\\\n        Challenge[MAX_CHALLENGE_CNT] ch;\\\\n        uint8 cnt;\\\\n        uint8 freeIndex;\\\\n        uint8 head;\\\\n        uint8 tail;\\\\n    }\\\\n\\\\n    function _challengeSetInit(ChallengeSet storage chs) internal {\\\\n\\\\n        require(CHALLENGE_NULL < 256, \\\\\\"ChallengeRecords: Invalid configuration: CHALLENGE_NULL\\\\\\");\\\\n        require(MAX_CHALLENGE_CNT <= CHALLENGE_NULL, \\\\\\"ChallengeRecords: Invalid configuration: MAX_CHALLENGE_CNT\\\\\\");\\\\n\\\\n        for(uint8 i = 0; i < MAX_CHALLENGE_CNT; i++) {\\\\n            Challenge storage ch = chs.ch[i];\\\\n            ch.challengeHash = 0;\\\\n            ch.blockNumber = 0;\\\\n            ch.valid = false;\\\\n            ch.prev = CHALLENGE_NULL;\\\\n            ch.next = i+1 < MAX_CHALLENGE_CNT ? i+1 : CHALLENGE_NULL;\\\\n            ch.index = i;\\\\n        }\\\\n\\\\n        chs.cnt = 0;\\\\n        chs.freeIndex = 0;\\\\n        chs.head = CHALLENGE_NULL;\\\\n        chs.tail = CHALLENGE_NULL;\\\\n    }\\\\n\\\\n    // Returns CHALLENGE_NULL  if not found\\\\n    function _challengeFind(ChallengeSet storage chs, uint64 blockNumber) internal view returns (uint8 index, uint8 generalDifficulty) {\\\\n        uint8 cnt = chs.cnt;\\\\n        require(cnt <= MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords: Invalid configuration: cnt <= MAX_CHALLENGE_CNT failed\\\\\\");\\\\n        index = chs.head;\\\\n        generalDifficulty = 0;\\\\n        for(uint8 i = 0; i < cnt; i++) {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n\\\\n            if(ch.blockNumber == blockNumber) {\\\\n                require(index == ch.index, \\\\\\"ChallengeRecords._challengeFind(): corrupt list\\\\\\");\\\\n                generalDifficulty = MAX_CHALLENGE_DIFFICULTY - CHALLENGE_DIFFICULTY_STEP * (cnt - i - 1);\\\\n                require(MIN_CHALLENGE_DIFFICULTY <= generalDifficulty && generalDifficulty <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"ChallengeRecords._challengeFind(): generalDifficulty out of range\\\\\\");\\\\n                return (index, generalDifficulty);\\\\n            }\\\\n\\\\n            index = ch.next;\\\\n        }\\\\n        require(index == CHALLENGE_NULL, \\\\\\"ChallengeRecords._challengeFind(): corrupt list\\\\\\");\\\\n    }\\\\n\\\\n    function _challengeGet(ChallengeSet storage chs, uint8 index) internal view returns (Challenge storage) {\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords._challengeGet(): index is out of range\\\\\\");\\\\n\\\\n        Challenge storage ch = chs.ch[index];\\\\n        require(ch.index == index, \\\\\\"ChallengeRecords: corrupt challenge index\\\\\\");\\\\n\\\\n        return ch;\\\\n    }\\\\n\\\\n    function _challengesGet(ChallengeSet storage chs, uint8 limit)\\\\n    internal view returns (uint8 totalCnt, uint8[] memory indexes, uint64[] memory blockNumbers, uint16[] memory rewardUnits, uint256[] memory challengeHashes, uint8[] memory nexts) {\\\\n        uint8 cnt = limit < chs.cnt ? limit : chs.cnt;\\\\n        totalCnt = chs.cnt;\\\\n        indexes = new uint8[](cnt);\\\\n        blockNumbers = new uint64[](cnt);\\\\n        challengeHashes = new uint256[](cnt);\\\\n        nexts = new uint8[](cnt);\\\\n        rewardUnits = new uint16[](cnt);\\\\n        uint8 index = chs.head;\\\\n        for(uint8 i = 0; i < cnt; i++) {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n            indexes[i] = ch.index;\\\\n            blockNumbers[i] = ch.blockNumber;\\\\n            rewardUnits[i] = ch.rewardUnits;\\\\n            challengeHashes[i] = ch.challengeHash;\\\\n            nexts[i] = ch.next;\\\\n            index = ch.next;\\\\n        }\\\\n        require(limit < chs.cnt || index == CHALLENGE_NULL, \\\\\\"ChallengeRecords._challengeGetAll(): corrupt list\\\\\\");\\\\n    }\\\\n\\\\n    function _challengeSetIsFull(ChallengeSet storage chs) internal view returns (bool) {\\\\n        return chs.cnt >= MAX_CHALLENGE_CNT;\\\\n    }\\\\n\\\\n    function _challengeSetIsEmpty(ChallengeSet storage chs) internal view returns (bool) {\\\\n        return chs.cnt == 0;\\\\n    }\\\\n\\\\n    function _challengeGetFirstBlock(ChallengeSet storage chs) internal view returns (uint64 blockNumber) {\\\\n        uint8 index = chs.head;\\\\n        if(index == CHALLENGE_NULL) {\\\\n            blockNumber = uint64(block.number);\\\\n        } else {\\\\n            Challenge memory ch = _challengeGet(chs, index);\\\\n            require(ch.valid, \\\\\\"ChallengeRecords: corrupt challenge item in the list\\\\\\");\\\\n            blockNumber = ch.blockNumber;\\\\n        }\\\\n    }\\\\n\\\\n    function _challengeInsertHead(ChallengeSet storage chs, uint64 blockNumber, uint256 challengeHash, uint16 rewardUnits) internal {\\\\n        require(!_challengeSetIsFull(chs), \\\\\\"ChallengeRecords: Challenge set is full\\\\\\");\\\\n\\\\n        uint8 index = chs.freeIndex;\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords: corrupt freeIndex\\\\\\");\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(!ch.valid, \\\\\\"ChallengeRecords: corrupt challenge item in freeList\\\\\\");\\\\n        chs.freeIndex = ch.next;\\\\n\\\\n        ch.challengeHash = challengeHash;\\\\n        ch.blockNumber = blockNumber;\\\\n        ch.rewardUnits = rewardUnits;\\\\n        ch.valid = true;\\\\n        ch.prev = CHALLENGE_NULL;\\\\n        ch.next = chs.head;\\\\n        if(chs.head != CHALLENGE_NULL) {\\\\n            Challenge storage head = _challengeGet(chs, chs.head);\\\\n            head.prev = index;\\\\n        }\\\\n        chs.head = index;\\\\n        if(chs.tail == CHALLENGE_NULL) {\\\\n            chs.tail = index;\\\\n        }\\\\n        chs.cnt++;\\\\n    }\\\\n\\\\n    function _challengeInsertTail(ChallengeSet storage chs, uint64 blockNumber, uint256 challengeHash, uint16 rewardUnits) internal {\\\\n        require(!_challengeSetIsFull(chs), \\\\\\"ChallengeRecords: Challenge set is full\\\\\\");\\\\n\\\\n        uint8 index = chs.freeIndex;\\\\n        require(index < MAX_CHALLENGE_CNT, \\\\\\"ChallengeRecords: corrupt freeIndex\\\\\\");\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(!ch.valid, \\\\\\"ChallengeRecords: corrupt challenge item in freeList\\\\\\");\\\\n        chs.freeIndex = ch.next;\\\\n\\\\n        ch.challengeHash = challengeHash;\\\\n        ch.blockNumber = blockNumber;\\\\n        ch.rewardUnits = rewardUnits;\\\\n        ch.valid = true;\\\\n        ch.prev = chs.tail;\\\\n        ch.next = CHALLENGE_NULL;\\\\n        if(chs.tail != CHALLENGE_NULL) {\\\\n            Challenge storage tail = _challengeGet(chs, chs.tail);\\\\n            tail.next = index;\\\\n        }\\\\n        chs.tail = index;\\\\n        if(chs.head == CHALLENGE_NULL) {\\\\n            chs.head = index;\\\\n        }\\\\n        chs.cnt++;\\\\n    }\\\\n\\\\n    function _challengeRemove(ChallengeSet storage chs, uint8 index) internal {\\\\n        require(!_challengeSetIsEmpty(chs), \\\\\\"ChallengeRecords: Challenge set is empty\\\\\\");\\\\n\\\\n        Challenge storage ch = _challengeGet(chs, index);\\\\n        require(ch.valid, \\\\\\"ChallengeRecords: removing invalid item\\\\\\");\\\\n\\\\n        // Reconnect the double linked list\\\\n        if(ch.prev != CHALLENGE_NULL) {\\\\n            Challenge storage prev = _challengeGet(chs, ch.prev);\\\\n            prev.next = ch.next;\\\\n        }\\\\n        if(ch.next != CHALLENGE_NULL) {\\\\n            Challenge storage next = _challengeGet(chs, ch.next);\\\\n            next.prev = ch.prev;\\\\n        }\\\\n\\\\n        if(index == chs.head) {\\\\n            chs.head = ch.next;\\\\n        }\\\\n\\\\n        if(index == chs.tail) {\\\\n            chs.tail = ch.prev;\\\\n        }\\\\n\\\\n        // Put the removed item back into the free list\\\\n        uint8 freeIndex = chs.freeIndex;\\\\n        require(freeIndex < MAX_CHALLENGE_CNT || freeIndex == CHALLENGE_NULL, \\\\\\"ChallengeRecords: corrupt freeIndex\\\\\\");\\\\n        ch.challengeHash = 0;\\\\n        ch.blockNumber = 0;\\\\n        ch.rewardUnits = 0;\\\\n        ch.valid = false;\\\\n        ch.prev = CHALLENGE_NULL;\\\\n        ch.next = freeIndex;\\\\n        chs.freeIndex = index;\\\\n        chs.cnt--;\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x0a32fa576bce5932ee2266d001c54c1cf66be17487e7f9502ece077999ea321b\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaAdmin.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./ChallengeRecords.sol\\\\\\";\\\\n\\\\ninterface ILuminaAdmin {\\\\n\\\\n    function readChallenges(bool premium, uint8 limit) external view returns (uint8 totalCnt, uint8[] memory indexes, uint64[] memory blockNumbers, uint16[] memory rewardUnits, uint256[] memory challengeHashes, uint8[] memory nexts, uint16[] memory claimsCnt, bool[] memory claimed);\\\\n    function getChallengesAllowance() external view returns (uint8);\\\\n    function addChallenges(uint8 limit) external returns (uint8);\\\\n    function retrieveChallenge(uint64 blockNumber) external view returns (ChallengeRecords.Challenge memory ch, bool premium, uint8 generalDifficulty);\\\\n    function _cleanupChallenge(uint64 blockNumber, bool premium) external; // onlyTrustee\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb57064ec2e022737a5cc56ce66ee65bedc1c2e28e2f16520c976a4783b7d5305\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaMarketing.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaMarketing {\\\\n\\\\n    function owner() external view returns (address);\\\\n    function _claim(uint64 blockNumber, address miner, address recipient, uint32 rewardUnits, uint8 commisionPrc) external; // onlyTrustee\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xc44193582232f924e25c27851cc5fc3dec1fb12b8299ef8b76d6cef4a0528e9d\\",\\"license\\":\\"MIT\\"},\\"contracts/ILuminaRecords.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\ninterface ILuminaRecords {\\\\n\\\\n    function getBalances() external view returns (uint256[] memory balances, uint64[] memory blockNumbers);\\\\n    function findBalance(address wallet, uint64 blockNumber) external view returns (uint256 balance);\\\\n    function getClaimsCnt(uint64 blockNumber) external view returns (uint16);\\\\n    function hasClaimed(uint64 blockNumber, address recipient) external view returns (uint32 rewardUnits);\\\\n    function getClaims(uint64[] memory blockNumbers, address recipient) external view returns (uint16[] memory claimsCnt, bool[] memory claimed);\\\\n    function setCommision(uint8 commisionPrc) external;\\\\n    function getCommision(address wallet) external view returns (uint8 commisionPrc);\\\\n    function _registerBalance(address sender, uint256 balance, bool force) external returns (bool registered); // onlyToken\\\\n    function _updateBalance(address sender, uint256 balance) external; // onlyToken\\\\n    function _addClaim(uint64 blockNumber, address recipient, uint32 rewardUnits) external; // onlyTrustee\\\\n    function _updateFirstBlockNumber(uint64 blockNumber) external; // onlyAdmin\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe5ffa5a99c551fc5d68b334fee66b7c566aa7f7600cf275c251c208d8a1560b2\\",\\"license\\":\\"MIT\\"},\\"contracts/LuminaTrustee.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/security/Pausable.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./Progressing.sol\\\\\\";\\\\nimport \\\\\\"./Rules.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaRecords.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaAdmin.sol\\\\\\";\\\\nimport \\\\\\"./ILuminaMarketing.sol\\\\\\";\\\\n\\\\ncontract LuminaTrustee is Ownable, Pausable, Progressing, Rules {\\\\n    using SafeMath for uint256;\\\\n\\\\n    // Public address of the linked token contract\\\\n    address public tokenAddr;\\\\n    // Public address of the linked records contract\\\\n    address public recordsAddr;\\\\n    // Public address of the linked administrator contract\\\\n    address public adminAddr;\\\\n    // Public address of the linked marketing contract\\\\n    address public marketingAddr;\\\\n\\\\n    // Link to ERC20 tokens contract\\\\n    IERC20 private token;\\\\n    // Link to LuminaRecords contract\\\\n    ILuminaRecords private records;\\\\n    // Link to LuminaAdministator contract\\\\n    ILuminaAdmin private admin;\\\\n\\\\n    uint64 private _claimedChallenges;\\\\n    uint256 private _claimedTokens;\\\\n    uint64 private _marketingCallSuccessCnt;\\\\n    uint64 private _marketingCallFailedCnt;\\\\n\\\\n    event Claim(uint64 indexed blockNumber, address indexed recipient, address indexed miner, uint256 solution, uint8 commisionPrc, uint16 claimNo);\\\\n    event MarketingCallFailed(address marketingAddr, uint64 blockNumber, string message);\\\\n\\\\n    constructor(address tokenAddr_, address recordsAddr_, address adminAddr_) {\\\\n        pause();\\\\n\\\\n        tokenAddr = tokenAddr_;\\\\n        recordsAddr = recordsAddr_;\\\\n        adminAddr = adminAddr_;\\\\n        token = IERC20(tokenAddr);\\\\n        records = ILuminaRecords(recordsAddr);\\\\n        admin = ILuminaAdmin(adminAddr);\\\\n\\\\n        _claimedChallenges = 0;\\\\n        _claimedTokens = 0;\\\\n    }\\\\n\\\\n    function pause() public onlyOwner {\\\\n        super._pause();\\\\n    }\\\\n\\\\n    function unpause() public onlyOwner {\\\\n        super._unpause();\\\\n    }\\\\n\\\\n    function renounceOwnership() public virtual override onlyOwner whenNotPaused {\\\\n        super.renounceOwnership();\\\\n    }\\\\n\\\\n    function getProgress() public view override returns (uint256 progress, uint256 progressMax) {\\\\n        progress = _claimedTokens;\\\\n        progressMax = _claimedTokens+token.balanceOf(address(this));\\\\n    }\\\\n\\\\n    function getClaimedTokens() public view returns (uint256) {\\\\n        return _claimedTokens;\\\\n    }\\\\n\\\\n    function setMarketingAddr(address marketingAddr_) external onlyOwner {\\\\n        require(marketingAddr_ == address(0) || ILuminaMarketing(marketingAddr_).owner() == owner(), \\\\\\"The marketing contract address must point to a contract with the same owner\\\\\\");\\\\n        marketingAddr = marketingAddr_;\\\\n    }\\\\n\\\\n    function _getAdjustedDifficulty(uint64 blockNumber, address recipient, uint8 generalDifficulty, uint256 challengeHash) private view returns (uint8 adjustedDifficulty) {\\\\n        uint256 registeredBalance = records.findBalance(recipient, blockNumber);\\\\n\\\\n        uint8 walletDiscount = _getWalletDifficultyDiscount(challengeHash, recipient, registeredBalance);\\\\n        uint8 balanceDiscount = _getBalanceDifficultyDiscount(registeredBalance);\\\\n\\\\n        // Calculate Adjusted Difficulty\\\\n        require(MIN_CHALLENGE_DIFFICULTY <= generalDifficulty && generalDifficulty <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"verifyClaim(): generalDifficulty out of range\\\\\\");\\\\n        uint8 totalDiscount = walletDiscount + balanceDiscount;\\\\n        adjustedDifficulty = generalDifficulty >= totalDiscount ? generalDifficulty - totalDiscount : 0;\\\\n        if(adjustedDifficulty < MIN_CHALLENGE_DIFFICULTY) {\\\\n            adjustedDifficulty = MIN_CHALLENGE_DIFFICULTY;\\\\n        }\\\\n        require(MIN_CHALLENGE_DIFFICULTY <= adjustedDifficulty && adjustedDifficulty <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"verifyClaim(): adjustedDifficulty out of range\\\\\\");\\\\n    }\\\\n\\\\n    function verifySolution(uint64 blockNumber, address miner, address recipient, uint256 solution) public view whenNotPaused returns (uint16 solvedDifficulty) {\\\\n        (ChallengeRecords.Challenge memory ch, bool premium, uint8 generalDifficulty) = admin.retrieveChallenge(blockNumber);\\\\n\\\\n        require(MIN_CHALLENGE_DIFFICULTY <= generalDifficulty && generalDifficulty <= MAX_CHALLENGE_DIFFICULTY, \\\\\\"Difficulty is out of range\\\\\\");\\\\n        require(premium == false || premium == true);\\\\n\\\\n        bytes memory data = abi.encodePacked(solution, ch.challengeHash, uint256(uint160(recipient)), uint256(uint160(miner)));\\\\n        require(data.length == 128, \\\\\\"Invalid solution data\\\\\\");\\\\n        bytes32 digest = keccak256(data);\\\\n\\\\n        solvedDifficulty = 256 - _findHsb(uint256(digest));\\\\n    }\\\\n\\\\n    // Reasons\\\\n    // 0 - satisfies all criteria, at this moment, to claim the tokens\\\\n    // 1 - blockNumber does not exist or has no live challenge assigned right now\\\\n    // 2 - solvedDifficulty doesn\'t safisfy the current requirements\\\\n    // 3 - this challenge has already been claimed by this address\\\\n    // 4 - all available rewards have been already claimed\\\\n    // 5 - insufficient balance on recipient\'s address, external miners can only make claims on addresses with at least 0.001 LUMI\\\\n    function verifyClaim(uint64 blockNumber, address miner, address recipient, uint256 solution) public view whenNotPaused\\\\n        returns (uint32 rewardUnits, uint8 reason, bool premium, uint16 rewardsCnt, uint16 claimsCnt)\\\\n    {\\\\n        ChallengeRecords.Challenge memory ch;\\\\n\\\\n        // Retrieve the challenge information\\\\n        uint8 generalDifficulty;\\\\n        (ch, premium, generalDifficulty) = admin.retrieveChallenge(blockNumber);\\\\n\\\\n        require(ch.valid, \\\\\\"Invalid challenge record\\\\\\");\\\\n\\\\n        // Get adjustd difficulty\\\\n        uint8 adjustedDifficulty = _getAdjustedDifficulty(blockNumber, recipient, generalDifficulty, ch.challengeHash);\\\\n\\\\n        // Get actual solved difficulty\\\\n        uint16 solvedDifficulty = verifySolution(blockNumber, miner, recipient, solution);\\\\n\\\\n        // Calculate Reward Tokens\\\\n        rewardUnits = 0;\\\\n        if(solvedDifficulty >= adjustedDifficulty) {\\\\n            // Allow bots to make multiple claims in benefit of trustee contract\\\\n            if(records.hasClaimed(blockNumber, recipient) != 0) {\\\\n                reason = 3;\\\\n            } else if(miner != recipient && token.balanceOf(recipient) < MINERS_CLAIM_MIN_RECIPIENT_BALANCE) {\\\\n                reason = 5;\\\\n            } else {\\\\n                uint16 units;\\\\n                (rewardsCnt, units) = _getRewardUnits(ch.challengeHash);\\\\n\\\\n                if(rewardsCnt > REWARDS_CNT_LIMIT) {\\\\n                    rewardsCnt = REWARDS_CNT_LIMIT;\\\\n                }\\\\n\\\\n               claimsCnt = records.getClaimsCnt(blockNumber);\\\\n                if(claimsCnt < rewardsCnt) {\\\\n                    rewardUnits = uint32(units) * uint32(ch.rewardUnits);\\\\n                    reason = 0;\\\\n                } else {\\\\n                    reason = 4;\\\\n                }\\\\n            }\\\\n        } else {\\\\n            reason = 2;\\\\n        }\\\\n    }\\\\n\\\\n    function claimReward(uint64 blockNumber, address miner, address recipient, uint256 solution) external whenNotPaused\\\\n        returns (uint32 rewardUnits, uint8 reason, bool premium, uint16 claimsCnt)\\\\n    {\\\\n        uint16 rewardsCnt;\\\\n\\\\n        (rewardUnits, reason, premium, rewardsCnt, claimsCnt) = verifyClaim(blockNumber, miner, recipient, solution);\\\\n\\\\n        if(reason == 0) {\\\\n            // Extra check that we don\'t have some unexpected leak\\\\n            require(rewardUnits > 0, \\\\\\"Invalid reward amount\\\\\\");\\\\n            require(rewardUnits <= uint256(2000).mul(REWARD_UNITS_STANDARD), \\\\\\"Invalid reward, amount too big\\\\\\");\\\\n\\\\n            // Transfer reward to msg.sender\\\\n            uint256 rewardAmount = uint256(rewardUnits).mul(REWARD_UNIT);\\\\n\\\\n            uint8 commisionPrc = records.getCommision(recipient);\\\\n            if(miner != recipient) {\\\\n                uint256 commisionAmount = rewardAmount.mul(commisionPrc).div(100);\\\\n                uint256 recipientAmount = rewardAmount.sub(commisionAmount);\\\\n                token.transfer(recipient, recipientAmount);\\\\n                token.transfer(miner, commisionAmount);\\\\n                emit Claim(blockNumber, recipient, miner, solution, commisionPrc, claimsCnt);\\\\n            } else {\\\\n                token.transfer(recipient, rewardAmount);\\\\n                emit Claim(blockNumber, recipient, miner, solution, 0, claimsCnt);\\\\n            }\\\\n\\\\n            _claimedTokens = _claimedTokens.add(rewardAmount);\\\\n\\\\n            // Extra check that we don\'t have some unexpected leak\\\\n            require(claimsCnt < REWARDS_CNT_LIMIT, \\\\\\"claim count is too big\\\\\\");\\\\n            require(claimsCnt < rewardsCnt, \\\\\\"claim count is too big\\\\\\");\\\\n            claimsCnt++;\\\\n            records._addClaim(blockNumber, recipient, rewardUnits);\\\\n\\\\n            if(claimsCnt >= rewardsCnt) {\\\\n                _claimedChallenges++;\\\\n                admin._cleanupChallenge(blockNumber, premium);\\\\n            }\\\\n\\\\n            // Notify the marketing contract\\\\n            if(marketingAddr != address(0)) {\\\\n                ILuminaMarketing marketing = ILuminaMarketing(marketingAddr);\\\\n                try marketing._claim(blockNumber, miner, recipient, rewardUnits, commisionPrc) {\\\\n                } catch Error(string memory message) {\\\\n                    _marketingCallSuccessCnt++;\\\\n                    emit MarketingCallFailed(marketingAddr, blockNumber, message);\\\\n                } catch {\\\\n                    _marketingCallFailedCnt++;\\\\n                    emit MarketingCallFailed(marketingAddr, blockNumber, \\\\\\"\\\\\\");\\\\n                }\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xef1fef79c180012192cad4219f2e29ac7924d5884444e93a217a29d02a2d60be\\",\\"license\\":\\"MIT\\"},\\"contracts/Parameters.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nabstract contract Parameters {\\\\n    // The DEMO mode limits rewards to 1 per challenge and limits blocks per challenge to 2\\\\n    bool public constant DEMO = true;\\\\n\\\\n    // Number of decimals in reward token\\\\n    uint8 public constant TOKEN_DECIMALS = 18;\\\\n    uint256 public constant TOKEN_UNIT = 10 ** TOKEN_DECIMALS; // 1 LUMI\\\\n\\\\n    // The lucky number determines the premium challenges\\\\n    uint8 public constant LUCKY_NUMBER = 2;\\\\n\\\\n    // Challenges\\\\n    uint8 public constant CHALLENGE_NULL = 255;\\\\n    uint8 public constant MAX_CHALLENGE_CNT = 100;\\\\n    uint8 public constant MIN_CHALLENGE_DIFFICULTY = DEMO ? 10 : 20;\\\\n    uint8 public constant MAX_CHALLENGE_DIFFICULTY = DEMO ? 208 : 218;\\\\n    uint8 public constant CHALLENGE_DIFFICULTY_STEP = 2;\\\\n\\\\n    // Creating new challenges\\\\n    uint64 public constant BLOCKS_PER_WEEK = 11454; // 3600*24*7 / 2.2\\\\n    uint64 public constant MAX_DONOR_BLOCKS = 200; // number of most recent consecutive blocks that can be used as donors\\\\n\\\\n    // Number of blocks we need to wait for a new challenge\\\\n    uint8 public constant BLOCKS_PER_CHALLENGE = DEMO ? 2 : 100;\\\\n\\\\n    // Hard limit on number of claims per challenge\\\\n    uint16 public constant REWARDS_CNT_LIMIT = DEMO ? 2 : 500;\\\\n\\\\n    // Ramp-up in Newton Epoch\\\\n    uint256 public constant REWARD_UNIT = 10 ** (TOKEN_DECIMALS-3); // 0.001 LUMI\\\\n    uint16 public constant REWARD_UNITS_START = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_INC = 10; // 0.01 LUMI\\\\n    uint16 public constant REWARD_UNITS_STANDARD = 1000; // 1 LUMI\\\\n    uint16 public constant REWARD_INC_INTERVAL = DEMO ? 5 : 2700; // One increase per 2700 regular challenges, ~ add reward unit every week\\\\n\\\\n    // external miners can only make claims on addresses with at least 0.001 LUMI\\\\n    uint256 public constant MINERS_CLAIM_MIN_RECIPIENT_BALANCE = REWARD_UNIT; // 0.001 LUMI\\\\n\\\\n    // Cooldown in Einstein Epoch\\\\n    // Increase BLOCKS_PER_CHALLENGE by 2 blocks every week\\\\n    uint64 public constant BLOCKS_PER_CHALLENGE_INC = 2;\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xfdf05776b8f8536a7ed140fa82dc569eb9a32f177c1cf9c7bd8fd02bafdf67a7\\",\\"license\\":\\"MIT\\"},\\"contracts/Progressing.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n* @dev Interface that provides a progress indicator expressed a pair of two numbers, a progress number and a progresMax number representing 100%.\\\\n*\\\\n* Progress(%): p = progress * 100 / progressMax\\\\n*/\\\\ninterface Progressing {\\\\n    function getProgress() external view returns (uint256 progress, uint256 progressMax);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x1bbf8e296a6677c6755fe742fd372d5c72505a34b15ae06224725d0cb5abe886\\",\\"license\\":\\"MIT\\"},\\"contracts/Rules.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./Parameters.sol\\\\\\";\\\\nimport \\\\\\"./Utils.sol\\\\\\";\\\\n\\\\nabstract contract Rules is Parameters, Utils {\\\\n    using SafeMath for uint256;\\\\n\\\\n    function _getWalletDifficultyDiscount(uint256 challengeHash, address addr, uint256 balance) internal pure returns (uint8) {\\\\n        uint256 h1 = challengeHash;\\\\n        uint256 h2 = uint256(uint160(addr));\\\\n\\\\n        uint256 o = h1 ^ h2;\\\\n        uint16 lsb = _findLsb(o);\\\\n        if(lsb == 0) {\\\\n            lsb = 256;\\\\n        } else {\\\\n            lsb--;\\\\n        }\\\\n\\\\n        uint256 b1 = balance.div(TOKEN_UNIT);\\\\n        uint8 n = 0;\\\\n        if(b1 >= 1) {\\\\n            if(lsb >= 20) {\\\\n                n = 30;\\\\n            } else if(lsb >= 10) {\\\\n                n = 20 + (uint8(lsb) - 10);\\\\n            } else {\\\\n                n = 2 * uint8(lsb);\\\\n            }\\\\n        } else {\\\\n            if(lsb > 10) {\\\\n                n = 10;\\\\n            } else {\\\\n                n = uint8(lsb);\\\\n            }\\\\n        }\\\\n\\\\n        return n;\\\\n    }\\\\n\\\\n   function _getBalanceDifficultyDiscount(uint256 balance) internal pure returns (uint8) {\\\\n        uint256 b1 = balance.div(TOKEN_UNIT);\\\\n        uint256 b2 = balance.mod(TOKEN_UNIT).div(REWARD_UNIT);\\\\n\\\\n        uint8 discount;\\\\n        if(b1 >= 1) {\\\\n            if(b1 >= 1000) {\\\\n                discount = 2 * 10 + 10;\\\\n            } else if(b1 >= 500) {\\\\n                discount = 2 * 9 + 10;\\\\n            } else if(b1 >= 200) {\\\\n                discount = 2 * 8 + 10;\\\\n            } else if(b1 >= 100) {\\\\n                discount = 2 * 7 + 10;\\\\n            } else if(b1 >= 50) {\\\\n                discount = 2 * 6 + 10;\\\\n            } else if(b1 >= 20) {\\\\n                discount = 2 * 5 + 10;\\\\n            } else if(b1 >= 10) {\\\\n                discount = 2 * 4 + 10;\\\\n            } else if(b1 >= 5) {\\\\n                discount = 2 * 3 + 10;\\\\n            } else if(b1 >= 3) {\\\\n                discount = 2 * 2 + 10;\\\\n            } else if(b1 >= 2) {\\\\n                discount = 2 * 1 + 10;\\\\n            } else {\\\\n                discount = 2 * 0 + 10;\\\\n            }\\\\n        } else {\\\\n            if(b2 >= 500) {\\\\n                discount = 9;\\\\n            } else if(b2 >= 200) {\\\\n                discount = 8;\\\\n            } else if(b2 >= 100) {\\\\n                discount = 7;\\\\n            } else if(b2 >= 50) {\\\\n                discount = 6;\\\\n            } else if(b2 >= 20) {\\\\n                discount = 5;\\\\n            } else if(b2 >= 10) {\\\\n                discount = 4;\\\\n            } else if(b2 >= 5) {\\\\n                discount = 3;\\\\n            } else if(b2 >= 2) {\\\\n                discount = 2;\\\\n            } else if(b2 >= 1) {\\\\n                discount = 1;\\\\n            } else {\\\\n                discount = 0;\\\\n            }\\\\n        }\\\\n        return discount;\\\\n    }\\\\n\\\\n    function _getRewardUnits(uint256 challengeHash) internal pure returns (uint16 rewardsCnt, uint16 units) {\\\\n        uint256 h = challengeHash;\\\\n\\\\n        if(((h >> (256-20)) & 0xFFFFF) == 0x22222) {\\\\n            return (500, 2000);\\\\n        } else if(((h >> (256-16)) & 0xFFFF) == 0x2222) {\\\\n            return (200, 500);\\\\n        } else if(((h >> (256-12)) & 0xFFF) == 0x222) {\\\\n            return (100, 100);\\\\n        } else if(((h >> (256-2)) & 0xFF) == 0x22) {\\\\n            return (50, 20);\\\\n        } else if(((h >> (256-4)) & 0xF) == 0x2) {\\\\n            return (20, 5);\\\\n        } else {\\\\n            return (10, 1);\\\\n        }\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xbce9d57b41ef247fea077ca20c287004f245edd7c3832c67b160265050534c59\\",\\"license\\":\\"MIT\\"},\\"contracts/Utils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nabstract contract Utils {\\\\n\\\\n    // finds the highest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findHsb of 0 returns 0\\\\n    //      findHsb of 1 returns 1\\\\n    //      findHsb of 2 returns 2\\\\n    //      findHsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findHsb(uint256 n) internal pure returns (uint16) {\\\\n        uint16 from = 0;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if(n <= mask) {\\\\n                to = middle;\\\\n            } else {\\\\n                from = middle+1;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n    // finds the lowest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findLsb of 0 returns 0\\\\n    //      findLsb of 1 returns 1\\\\n    //      findLsb of 2 returns 2\\\\n    //      findLsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findLsb(uint256 n) internal pure returns (uint16) {\\\\n        if(n == 0) {\\\\n            return 0;\\\\n        }\\\\n        uint16 from = 1;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if((n & mask) == 0) {\\\\n                from = middle+1;\\\\n            } else {\\\\n                to = middle;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n    function concat(string memory _a, string memory _b) internal pure returns (string memory) {\\\\n        bytes memory _ba = bytes(_a);\\\\n        bytes memory _bb = bytes(_b);\\\\n        string memory ab = new string(_ba.length + _bb.length);\\\\n        bytes memory bab = bytes(ab);\\\\n        uint k = 0;\\\\n        for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];\\\\n        for (uint i = 0; i < _bb.length; i++) bab[k++] = _bb[i];\\\\n        return string(bab);\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe36cd6cc097c0e71bb4144f304da71147692c8e2a93f583692390e7416c6d51c\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b506040516200277a3803806200277a83398101604081905262000034916200025d565b6200003f33620000ca565b6000805460ff60a01b19169055620000566200011a565b600180546001600160a01b039485166001600160a01b03199182168117909255600280549486169482168517905560038054939095169281168317909455600580548516909117905560068054909316909117909155600780546001600160e01b03191690911790556000600855620002a7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146200017a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6200018f6200019160201b620015e11760201c565b565b620001a5600054600160a01b900460ff1690565b15620001e75760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640162000171565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620002233390565b6040516001600160a01b03909116815260200160405180910390a1565b80516001600160a01b03811681146200025857600080fd5b919050565b6000806000606084860312156200027357600080fd5b6200027e8462000240565b92506200028e6020850162000240565b91506200029e6040850162000240565b90509250925092565b6124c380620002b76000396000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c80638183059311610125578063b91268e8116100ad578063c6088d971161007c578063c6088d9714610427578063f2fde38b14610430578063f668bee514610443578063f883fcaa1461039b578063fc47e2091461048957600080fd5b8063b91268e814610307578063b915dec214610417578063c28bd11c1461039b578063c28cedf31461041f57600080fd5b80639d941362116100f45780639d94136214610393578063a2157767146103ec578063a5c9cd82146103f4578063a7c1d590146103fc578063b313bd621461040f57600080fd5b806381830593146103a35780638456cb59146103b65780638da5cb5b146103be578063939c4456146103cf57600080fd5b80633ff42b92116101a85780635c975abb116101775780635c975abb1461035a5780635fbe4d1d14610378578063715018a61461038b57806373d6aafa146103935780637fb012321461039b57600080fd5b80633ff42b921461032f578063479e92c814610342578063504b36621461034a5780635b7f415c1461035257600080fd5b80631e7bfd60116101ef5780631e7bfd60146102bc57806330db4fa0146102e75780633a3a7c53146103075780633e6e387c1461031d5780633f4ba83a1461032557600080fd5b806306e38632146102215780630bf43309146102415780630e7d8db91461025b5780630ff8a7eb146102a9575b600080fd5b610229600581565b60405161ffff90911681526020015b60405180910390f35b61024960d081565b60405160ff9091168152602001610238565b61026e610269366004611da9565b610492565b6040805163ffffffff909616865260ff90941660208601529115159284019290925261ffff918216606084015216608082015260a001610238565b6102296102b7366004611da9565b610862565b6002546102cf906001600160a01b031681565b6040516001600160a01b039091168152602001610238565b6102ef60c881565b6040516001600160401b039091168152602001610238565b61030f610a50565b604051908152602001610238565b610229600281565b61032d610a6a565b005b6004546102cf906001600160a01b031681565b610249600a81565b610249606481565b610249601281565b600054600160a01b900460ff165b6040519015158152602001610238565b6001546102cf906001600160a01b031681565b61032d610a9e565b610229600a81565b610249600281565b6003546102cf906001600160a01b031681565b61032d610afa565b6000546001600160a01b03166102cf565b6103d7610b2c565b60408051928352602083019190915201610238565b61024960ff81565b61030f610baf565b61032d61040a366004611dfa565b610bbb565b6102ef600281565b60085461030f565b610368600181565b6102296103e881565b61032d61043e366004611dfa565b610d20565b610456610451366004611da9565b610dbb565b6040805163ffffffff909516855260ff90931660208501529015159183019190915261ffff166060820152608001610238565b6102ef612cbe81565b60008060008060006104ae60005460ff600160a01b9091041690565b156104d45760405162461bcd60e51b81526004016104cb90611e1e565b60405180910390fd5b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915260075460405163f5d4d8a160e01b81526001600160401b038c1660048201526000916001600160a01b03169063f5d4d8a19060240161012060405180830381865afa158015610560573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105849190611eed565b60808301519197509193509091506105de5760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206368616c6c656e6765207265636f7264000000000000000060448201526064016104cb565b60006105f08c8b848660000151611663565b905060006106008d8d8d8d610862565b9050600098508160ff168161ffff161061084e5760065460405163d7a8a2b760e01b81526001600160401b038f1660048201526001600160a01b038d811660248301529091169063d7a8a2b790604401602060405180830381865afa15801561066d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106919190611fb1565b63ffffffff16156106a55760039750610853565b8a6001600160a01b03168c6001600160a01b03161415801561074957506106ce60036012611fed565b6106d990600a6120f4565b6005546040516370a0823160e01b81526001600160a01b038e81166004830152909116906370a0823190602401602060405180830381865afa158015610723573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107479190612103565b105b156107575760059750610853565b60006107668560000151611843565b9097509050600261ffff8816111561077d57600296505b600660009054906101000a90046001600160a01b03166001600160a01b031663d045d5ae8f6040518263ffffffff1660e01b81526004016107cd91906001600160401b0391909116815260200190565b602060405180830381865afa1580156107ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080e919061211c565b95508661ffff168661ffff16101561084357846040015161ffff168161ffff166108389190612137565b995060009850610848565b600498505b50610853565b600297505b50505050945094509450945094565b60008054600160a01b900460ff161561088d5760405162461bcd60e51b81526004016104cb90611e1e565b60075460405163f5d4d8a160e01b81526001600160401b0387166004820152600091829182916001600160a01b03169063f5d4d8a19060240161012060405180830381865afa1580156108e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109089190611eed565b9250925092508060ff16600161091f576014610922565b600a5b60ff1611158015610937575060d060ff821611155b6109835760405162461bcd60e51b815260206004820152601a60248201527f446966666963756c7479206973206f7574206f662072616e676500000000000060448201526064016104cb565b81158061099257506001821515145b61099b57600080fd5b82516040805160208101889052908101919091526001600160a01b0380881660608301528816608082015260009060a00160405160208183030381529060405290508051608014610a265760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420736f6c7574696f6e206461746160581b60448201526064016104cb565b80516020820120610a36816118dc565b610a4290610100612163565b9a9950505050505050505050565b610a5c60036012611fed565b610a6790600a6120f4565b81565b6000546001600160a01b03163314610a945760405162461bcd60e51b81526004016104cb90612186565b610a9c61194f565b565b6000546001600160a01b03163314610ac85760405162461bcd60e51b81526004016104cb90612186565b600054600160a01b900460ff1615610af25760405162461bcd60e51b81526004016104cb90611e1e565b610a9c6119d3565b6000546001600160a01b03163314610b245760405162461bcd60e51b81526004016104cb90612186565b610a9c6115e1565b6008546005546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610b78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9c9190612103565b600854610ba991906121bb565b90509091565b610a676012600a6120f4565b6000546001600160a01b03163314610be55760405162461bcd60e51b81526004016104cb90612186565b6001600160a01b0381161580610c7857506000546001600160a01b03166001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6d91906121d3565b6001600160a01b0316145b610cfe5760405162461bcd60e51b815260206004820152604b60248201527f546865206d61726b6574696e6720636f6e74726163742061646472657373206d60448201527f75737420706f696e7420746f206120636f6e747261637420776974682074686560648201526a1039b0b6b29037bbb732b960a91b608482015260a4016104cb565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610d4a5760405162461bcd60e51b81526004016104cb90612186565b6001600160a01b038116610daf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104cb565b610db881611a03565b50565b600080600080610dd560005460ff600160a01b9091041690565b15610df25760405162461bcd60e51b81526004016104cb90611e1e565b6000610e0089898989610492565b9398509196509450909250905060ff84166115d55760008563ffffffff1611610e635760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081c995dd85c9908185b5bdd5b9d605a1b60448201526064016104cb565b610e716107d06103e8611a53565b8563ffffffff161115610ec65760405162461bcd60e51b815260206004820152601e60248201527f496e76616c6964207265776172642c20616d6f756e7420746f6f20626967000060448201526064016104cb565b6000610ef2610ed760036012611fed565b610ee290600a6120f4565b63ffffffff8089169190611a5316565b600654604051635665687560e01b81526001600160a01b038b8116600483015292935060009290911690635665687590602401602060405180830381865afa158015610f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6691906121f0565b9050886001600160a01b03168a6001600160a01b031614611113576000610f9b6064610f958560ff8616611a53565b90611a68565b90506000610fa98483611a74565b60055460405163a9059cbb60e01b81526001600160a01b038e811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af1158015610ffe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611022919061220b565b5060055460405163a9059cbb60e01b81526001600160a01b038e81166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af1158015611076573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109a919061220b565b508b6001600160a01b03168b6001600160a01b03168e6001600160401b03167f302c08954cd01f3e9a025e113b28fe1600afb14599ebd20d4447981c78fa958e8d878b6040516111049392919092835260ff91909116602083015261ffff16604082015260600190565b60405180910390a450506111eb565b60055460405163a9059cbb60e01b81526001600160a01b038b81166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af1158015611166573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118a919061220b565b50604080518981526000602082015261ffff86168183015290516001600160a01b038c811692908c16916001600160401b038f16917f302c08954cd01f3e9a025e113b28fe1600afb14599ebd20d4447981c78fa958e919081900360600190a45b6008546111f89083611a80565b600855600261ffff8516106112485760405162461bcd60e51b8152602060048201526016602482015275636c61696d20636f756e7420697320746f6f2062696760501b60448201526064016104cb565b8261ffff168461ffff16106112985760405162461bcd60e51b8152602060048201526016602482015275636c61696d20636f756e7420697320746f6f2062696760501b60448201526064016104cb565b836112a281612226565b60065460405163609eb1c360e01b81526001600160401b038f1660048201526001600160a01b038d8116602483015263ffffffff8c1660448301529297509116915063609eb1c390606401600060405180830381600087803b15801561130757600080fd5b505af115801561131b573d6000803e3d6000fd5b505050508261ffff168461ffff16106113d55760078054600160a01b90046001600160401b031690601461134e83612248565b82546101009290920a6001600160401b0381810219909316918316021790915560075460405163f7f595fb60e01b8152918e16600483015287151560248301526001600160a01b0316915063f7f595fb90604401600060405180830381600087803b1580156113bc57600080fd5b505af11580156113d0573d6000803e3d6000fd5b505050505b6004546001600160a01b0316156115d257600480546040516301389dcb60e51b81526001600160401b038e16928101929092526001600160a01b038c811660248401528b8116604484015263ffffffff8a16606484015260ff8416608484015216908190632713b9609060a401600060405180830381600087803b15801561145c57600080fd5b505af192505050801561146d575060015b6115d057611479612265565b806308c379a0141561152d575061148e612281565b80611499575061152f565b600980546001600160401b03169060006114b283612248565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550507fe4672f4d62a9c8ce07cefba7f97b1e461ca30161fc35c9095d5aab6c3b77e189600460009054906101000a90046001600160a01b03168e8360405161151f9392919061230a565b60405180910390a1506115d0565b505b600980546801000000000000000090046001600160401b031690600861155483612248565b82546101009290920a6001600160401b03818102199093169183160217909155600454604080516001600160a01b039092168252918f16602082015260609181018290526000918101919091527fe4672f4d62a9c8ce07cefba7f97b1e461ca30161fc35c9095d5aab6c3b77e189915060800160405180910390a15b505b50505b50945094509450949050565b600054600160a01b900460ff161561160b5760405162461bcd60e51b81526004016104cb90611e1e565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116463390565b6040516001600160a01b03909116815260200160405180910390a1565b600654604051630454186960e31b81526001600160a01b0385811660048301526001600160401b038716602483015260009283929116906322a0c34890604401602060405180830381865afa1580156116c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e49190612103565b905060006116f3848784611a8c565b9050600061170083611b59565b905060ff8616600a1180159061171a575060d060ff871611155b61177c5760405162461bcd60e51b815260206004820152602d60248201527f766572696679436c61696d28293a2067656e6572616c446966666963756c747960448201526c206f7574206f662072616e676560981b60648201526084016104cb565b6000611788828461237f565b90508060ff168760ff16101561179f5760006117a9565b6117a98188611fed565b9450600a60ff861610156117bc57600a94505b60ff8516600a118015906117d4575060d060ff861611155b6118375760405162461bcd60e51b815260206004820152602e60248201527f766572696679436c61696d28293a2061646a7573746564446966666963756c7460448201526d79206f7574206f662072616e676560901b60648201526084016104cb565b50505050949350505050565b600080826202222260ec82901c141561186557506101f4936107d09350915050565b61222260f082901c1415611881575060c8936101f49350915050565b61022260f482901c141561189b5750606493849350915050565b602260fe82901c14156118b5575060329360149350915050565b600260fc82901c14156118cf575060149360059350915050565b50600a9360019350915050565b6000806101005b8061ffff168261ffff161015611948576000600161190183856123a4565b61ffff16901c9050600060016119188360026123ca565b61192291906123da565b905080861161193357819250611941565b61193e8260016123a4565b93505b50506118e3565b5092915050565b600054600160a01b900460ff1661199f5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104cb565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611646565b6000546001600160a01b031633146119fd5760405162461bcd60e51b81526004016104cb90612186565b610a9c60005b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611a5f82846123f1565b90505b92915050565b6000611a5f8284612426565b6000611a5f82846123da565b6000611a5f82846121bb565b6000836001600160a01b03841680821883611aa682611cf9565b905061ffff8116611aba5750610100611ac8565b80611ac48161243a565b9150505b6000611ae0611ad96012600a6120f4565b8890611a68565b9050600060018210611b345760148361ffff1610611b005750601e611b4c565b600a8361ffff1610611b2957611b17600a84611fed565b611b2290601461237f565b9050611b4c565b611b22836002612458565b600a8361ffff161115611b495750600a611b4c565b50815b9998505050505050505050565b600080611b72611b6b6012600a6120f4565b8490611a68565b90506000611ba6611b8560036012611fed565b611b9090600a6120f4565b610f95611b9f6012600a6120f4565b8790611d73565b9050600060018310611c5c576103e88310611bc35750601e611cf1565b6101f48310611bd45750601c611cf1565b60c88310611be45750601a611cf1565b60648310611bf457506018611cf1565b60328310611c0457506016611cf1565b60148310611c1457506014611cf1565b600a8310611c2457506012611cf1565b60058310611c3457506010611cf1565b60038310611c445750600e611cf1565b60028310611c545750600c611cf1565b50600a611cf1565b6101f48210611c6d57506009611cf1565b60c88210611c7d57506008611cf1565b60648210611c8d57506007611cf1565b60328210611c9d57506006611cf1565b60148210611cad57506005611cf1565b600a8210611cbd57506004611cf1565b60058210611ccd57506003611cf1565b60028210611cdd57506002611cf1565b60018210611ced57506001611cf1565b5060005b949350505050565b600081611d0857506000919050565b60016101005b8061ffff168261ffff1610156119485760006001611d2c83856123a4565b61ffff16901c905060006001611d438360026123ca565b611d4d91906123da565b9050858116611d6857611d618260016123a4565b9350611d6c565b8192505b5050611d0e565b6000611a5f8284612479565b6001600160401b0381168114610db857600080fd5b6001600160a01b0381168114610db857600080fd5b60008060008060808587031215611dbf57600080fd5b8435611dca81611d7f565b93506020850135611dda81611d94565b92506040850135611dea81611d94565b9396929550929360600135925050565b600060208284031215611e0c57600080fd5b8135611e1781611d94565b9392505050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60e081018181106001600160401b0382111715611e7557634e487b7160e01b600052604160045260246000fd5b60405250565b601f8201601f191681016001600160401b0381118282101715611eae57634e487b7160e01b600052604160045260246000fd5b6040525050565b805161ffff81168114611ec757600080fd5b919050565b805160ff81168114611ec757600080fd5b80518015158114611ec757600080fd5b6000806000838503610120811215611f0457600080fd5b60e0811215611f1257600080fd5b50604051611f1f81611e48565b845181526020850151611f3181611d7f565b6020820152611f4260408601611eb5565b6040820152611f5360608601611ecc565b6060820152611f6460808601611edd565b6080820152611f7560a08601611ecc565b60a0820152611f8660c08601611ecc565b60c08201529250611f9960e08501611edd565b9150611fa86101008501611ecc565b90509250925092565b600060208284031215611fc357600080fd5b815163ffffffff81168114611e1757600080fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168082101561200757612007611fd7565b90039392505050565b600181815b8085111561204b57816000190482111561203157612031611fd7565b8085161561203e57918102915b93841c9390800290612015565b509250929050565b60008261206257506001611a62565b8161206f57506000611a62565b8160018114612085576002811461208f576120ab565b6001915050611a62565b60ff8411156120a0576120a0611fd7565b50506001821b611a62565b5060208310610133831016604e8410600b84101617156120ce575081810a611a62565b6120d88383612010565b80600019048211156120ec576120ec611fd7565b029392505050565b6000611a5f60ff841683612053565b60006020828403121561211557600080fd5b5051919050565b60006020828403121561212e57600080fd5b611a5f82611eb5565b600063ffffffff8083168185168183048111821515161561215a5761215a611fd7565b02949350505050565b600061ffff8381169083168181101561217e5761217e611fd7565b039392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156121ce576121ce611fd7565b500190565b6000602082840312156121e557600080fd5b8151611e1781611d94565b60006020828403121561220257600080fd5b611a5f82611ecc565b60006020828403121561221d57600080fd5b611a5f82611edd565b600061ffff8083168181141561223e5761223e611fd7565b6001019392505050565b60006001600160401b038083168181141561223e5761223e611fd7565b600060033d111561227e5760046000803e5060005160e01c5b90565b600060443d101561228f5790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156122be57505050505090565b82850191508151818111156122d65750505050505090565b843d87010160208285010111156122f05750505050505090565b6122ff60208286010187611e7b565b509095945050505050565b60018060a01b0384168152600060206001600160401b0385168184015260606040840152835180606085015260005b8181101561235557858101830151858201608001528201612339565b81811115612367576000608083870101525b50601f01601f19169290920160800195945050505050565b600060ff821660ff84168060ff0382111561239c5761239c611fd7565b019392505050565b600061ffff8083168185168083038211156123c1576123c1611fd7565b01949350505050565b6000611a5f61ffff841683612053565b6000828210156123ec576123ec611fd7565b500390565b600081600019048311821515161561240b5761240b611fd7565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261243557612435612410565b500490565b600061ffff82168061244e5761244e611fd7565b6000190192915050565b600060ff821660ff84168160ff04811182151516156120ec576120ec611fd7565b60008261248857612488612410565b50069056fea26469706673582212204d23160e1ee3f61ca80f12b85beba6576c000300845295ec4aca0f9bbf1a238d64736f6c634300080b0033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061021c5760003560e01c80638183059311610125578063b91268e8116100ad578063c6088d971161007c578063c6088d9714610427578063f2fde38b14610430578063f668bee514610443578063f883fcaa1461039b578063fc47e2091461048957600080fd5b8063b91268e814610307578063b915dec214610417578063c28bd11c1461039b578063c28cedf31461041f57600080fd5b80639d941362116100f45780639d94136214610393578063a2157767146103ec578063a5c9cd82146103f4578063a7c1d590146103fc578063b313bd621461040f57600080fd5b806381830593146103a35780638456cb59146103b65780638da5cb5b146103be578063939c4456146103cf57600080fd5b80633ff42b92116101a85780635c975abb116101775780635c975abb1461035a5780635fbe4d1d14610378578063715018a61461038b57806373d6aafa146103935780637fb012321461039b57600080fd5b80633ff42b921461032f578063479e92c814610342578063504b36621461034a5780635b7f415c1461035257600080fd5b80631e7bfd60116101ef5780631e7bfd60146102bc57806330db4fa0146102e75780633a3a7c53146103075780633e6e387c1461031d5780633f4ba83a1461032557600080fd5b806306e38632146102215780630bf43309146102415780630e7d8db91461025b5780630ff8a7eb146102a9575b600080fd5b610229600581565b60405161ffff90911681526020015b60405180910390f35b61024960d081565b60405160ff9091168152602001610238565b61026e610269366004611da9565b610492565b6040805163ffffffff909616865260ff90941660208601529115159284019290925261ffff918216606084015216608082015260a001610238565b6102296102b7366004611da9565b610862565b6002546102cf906001600160a01b031681565b6040516001600160a01b039091168152602001610238565b6102ef60c881565b6040516001600160401b039091168152602001610238565b61030f610a50565b604051908152602001610238565b610229600281565b61032d610a6a565b005b6004546102cf906001600160a01b031681565b610249600a81565b610249606481565b610249601281565b600054600160a01b900460ff165b6040519015158152602001610238565b6001546102cf906001600160a01b031681565b61032d610a9e565b610229600a81565b610249600281565b6003546102cf906001600160a01b031681565b61032d610afa565b6000546001600160a01b03166102cf565b6103d7610b2c565b60408051928352602083019190915201610238565b61024960ff81565b61030f610baf565b61032d61040a366004611dfa565b610bbb565b6102ef600281565b60085461030f565b610368600181565b6102296103e881565b61032d61043e366004611dfa565b610d20565b610456610451366004611da9565b610dbb565b6040805163ffffffff909516855260ff90931660208501529015159183019190915261ffff166060820152608001610238565b6102ef612cbe81565b60008060008060006104ae60005460ff600160a01b9091041690565b156104d45760405162461bcd60e51b81526004016104cb90611e1e565b60405180910390fd5b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915260075460405163f5d4d8a160e01b81526001600160401b038c1660048201526000916001600160a01b03169063f5d4d8a19060240161012060405180830381865afa158015610560573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105849190611eed565b60808301519197509193509091506105de5760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206368616c6c656e6765207265636f7264000000000000000060448201526064016104cb565b60006105f08c8b848660000151611663565b905060006106008d8d8d8d610862565b9050600098508160ff168161ffff161061084e5760065460405163d7a8a2b760e01b81526001600160401b038f1660048201526001600160a01b038d811660248301529091169063d7a8a2b790604401602060405180830381865afa15801561066d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106919190611fb1565b63ffffffff16156106a55760039750610853565b8a6001600160a01b03168c6001600160a01b03161415801561074957506106ce60036012611fed565b6106d990600a6120f4565b6005546040516370a0823160e01b81526001600160a01b038e81166004830152909116906370a0823190602401602060405180830381865afa158015610723573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107479190612103565b105b156107575760059750610853565b60006107668560000151611843565b9097509050600261ffff8816111561077d57600296505b600660009054906101000a90046001600160a01b03166001600160a01b031663d045d5ae8f6040518263ffffffff1660e01b81526004016107cd91906001600160401b0391909116815260200190565b602060405180830381865afa1580156107ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080e919061211c565b95508661ffff168661ffff16101561084357846040015161ffff168161ffff166108389190612137565b995060009850610848565b600498505b50610853565b600297505b50505050945094509450945094565b60008054600160a01b900460ff161561088d5760405162461bcd60e51b81526004016104cb90611e1e565b60075460405163f5d4d8a160e01b81526001600160401b0387166004820152600091829182916001600160a01b03169063f5d4d8a19060240161012060405180830381865afa1580156108e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109089190611eed565b9250925092508060ff16600161091f576014610922565b600a5b60ff1611158015610937575060d060ff821611155b6109835760405162461bcd60e51b815260206004820152601a60248201527f446966666963756c7479206973206f7574206f662072616e676500000000000060448201526064016104cb565b81158061099257506001821515145b61099b57600080fd5b82516040805160208101889052908101919091526001600160a01b0380881660608301528816608082015260009060a00160405160208183030381529060405290508051608014610a265760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420736f6c7574696f6e206461746160581b60448201526064016104cb565b80516020820120610a36816118dc565b610a4290610100612163565b9a9950505050505050505050565b610a5c60036012611fed565b610a6790600a6120f4565b81565b6000546001600160a01b03163314610a945760405162461bcd60e51b81526004016104cb90612186565b610a9c61194f565b565b6000546001600160a01b03163314610ac85760405162461bcd60e51b81526004016104cb90612186565b600054600160a01b900460ff1615610af25760405162461bcd60e51b81526004016104cb90611e1e565b610a9c6119d3565b6000546001600160a01b03163314610b245760405162461bcd60e51b81526004016104cb90612186565b610a9c6115e1565b6008546005546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610b78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9c9190612103565b600854610ba991906121bb565b90509091565b610a676012600a6120f4565b6000546001600160a01b03163314610be55760405162461bcd60e51b81526004016104cb90612186565b6001600160a01b0381161580610c7857506000546001600160a01b03166001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6d91906121d3565b6001600160a01b0316145b610cfe5760405162461bcd60e51b815260206004820152604b60248201527f546865206d61726b6574696e6720636f6e74726163742061646472657373206d60448201527f75737420706f696e7420746f206120636f6e747261637420776974682074686560648201526a1039b0b6b29037bbb732b960a91b608482015260a4016104cb565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610d4a5760405162461bcd60e51b81526004016104cb90612186565b6001600160a01b038116610daf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104cb565b610db881611a03565b50565b600080600080610dd560005460ff600160a01b9091041690565b15610df25760405162461bcd60e51b81526004016104cb90611e1e565b6000610e0089898989610492565b9398509196509450909250905060ff84166115d55760008563ffffffff1611610e635760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081c995dd85c9908185b5bdd5b9d605a1b60448201526064016104cb565b610e716107d06103e8611a53565b8563ffffffff161115610ec65760405162461bcd60e51b815260206004820152601e60248201527f496e76616c6964207265776172642c20616d6f756e7420746f6f20626967000060448201526064016104cb565b6000610ef2610ed760036012611fed565b610ee290600a6120f4565b63ffffffff8089169190611a5316565b600654604051635665687560e01b81526001600160a01b038b8116600483015292935060009290911690635665687590602401602060405180830381865afa158015610f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6691906121f0565b9050886001600160a01b03168a6001600160a01b031614611113576000610f9b6064610f958560ff8616611a53565b90611a68565b90506000610fa98483611a74565b60055460405163a9059cbb60e01b81526001600160a01b038e811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af1158015610ffe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611022919061220b565b5060055460405163a9059cbb60e01b81526001600160a01b038e81166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af1158015611076573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109a919061220b565b508b6001600160a01b03168b6001600160a01b03168e6001600160401b03167f302c08954cd01f3e9a025e113b28fe1600afb14599ebd20d4447981c78fa958e8d878b6040516111049392919092835260ff91909116602083015261ffff16604082015260600190565b60405180910390a450506111eb565b60055460405163a9059cbb60e01b81526001600160a01b038b81166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af1158015611166573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118a919061220b565b50604080518981526000602082015261ffff86168183015290516001600160a01b038c811692908c16916001600160401b038f16917f302c08954cd01f3e9a025e113b28fe1600afb14599ebd20d4447981c78fa958e919081900360600190a45b6008546111f89083611a80565b600855600261ffff8516106112485760405162461bcd60e51b8152602060048201526016602482015275636c61696d20636f756e7420697320746f6f2062696760501b60448201526064016104cb565b8261ffff168461ffff16106112985760405162461bcd60e51b8152602060048201526016602482015275636c61696d20636f756e7420697320746f6f2062696760501b60448201526064016104cb565b836112a281612226565b60065460405163609eb1c360e01b81526001600160401b038f1660048201526001600160a01b038d8116602483015263ffffffff8c1660448301529297509116915063609eb1c390606401600060405180830381600087803b15801561130757600080fd5b505af115801561131b573d6000803e3d6000fd5b505050508261ffff168461ffff16106113d55760078054600160a01b90046001600160401b031690601461134e83612248565b82546101009290920a6001600160401b0381810219909316918316021790915560075460405163f7f595fb60e01b8152918e16600483015287151560248301526001600160a01b0316915063f7f595fb90604401600060405180830381600087803b1580156113bc57600080fd5b505af11580156113d0573d6000803e3d6000fd5b505050505b6004546001600160a01b0316156115d257600480546040516301389dcb60e51b81526001600160401b038e16928101929092526001600160a01b038c811660248401528b8116604484015263ffffffff8a16606484015260ff8416608484015216908190632713b9609060a401600060405180830381600087803b15801561145c57600080fd5b505af192505050801561146d575060015b6115d057611479612265565b806308c379a0141561152d575061148e612281565b80611499575061152f565b600980546001600160401b03169060006114b283612248565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550507fe4672f4d62a9c8ce07cefba7f97b1e461ca30161fc35c9095d5aab6c3b77e189600460009054906101000a90046001600160a01b03168e8360405161151f9392919061230a565b60405180910390a1506115d0565b505b600980546801000000000000000090046001600160401b031690600861155483612248565b82546101009290920a6001600160401b03818102199093169183160217909155600454604080516001600160a01b039092168252918f16602082015260609181018290526000918101919091527fe4672f4d62a9c8ce07cefba7f97b1e461ca30161fc35c9095d5aab6c3b77e189915060800160405180910390a15b505b50505b50945094509450949050565b600054600160a01b900460ff161561160b5760405162461bcd60e51b81526004016104cb90611e1e565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116463390565b6040516001600160a01b03909116815260200160405180910390a1565b600654604051630454186960e31b81526001600160a01b0385811660048301526001600160401b038716602483015260009283929116906322a0c34890604401602060405180830381865afa1580156116c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e49190612103565b905060006116f3848784611a8c565b9050600061170083611b59565b905060ff8616600a1180159061171a575060d060ff871611155b61177c5760405162461bcd60e51b815260206004820152602d60248201527f766572696679436c61696d28293a2067656e6572616c446966666963756c747960448201526c206f7574206f662072616e676560981b60648201526084016104cb565b6000611788828461237f565b90508060ff168760ff16101561179f5760006117a9565b6117a98188611fed565b9450600a60ff861610156117bc57600a94505b60ff8516600a118015906117d4575060d060ff861611155b6118375760405162461bcd60e51b815260206004820152602e60248201527f766572696679436c61696d28293a2061646a7573746564446966666963756c7460448201526d79206f7574206f662072616e676560901b60648201526084016104cb565b50505050949350505050565b600080826202222260ec82901c141561186557506101f4936107d09350915050565b61222260f082901c1415611881575060c8936101f49350915050565b61022260f482901c141561189b5750606493849350915050565b602260fe82901c14156118b5575060329360149350915050565b600260fc82901c14156118cf575060149360059350915050565b50600a9360019350915050565b6000806101005b8061ffff168261ffff161015611948576000600161190183856123a4565b61ffff16901c9050600060016119188360026123ca565b61192291906123da565b905080861161193357819250611941565b61193e8260016123a4565b93505b50506118e3565b5092915050565b600054600160a01b900460ff1661199f5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104cb565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611646565b6000546001600160a01b031633146119fd5760405162461bcd60e51b81526004016104cb90612186565b610a9c60005b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611a5f82846123f1565b90505b92915050565b6000611a5f8284612426565b6000611a5f82846123da565b6000611a5f82846121bb565b6000836001600160a01b03841680821883611aa682611cf9565b905061ffff8116611aba5750610100611ac8565b80611ac48161243a565b9150505b6000611ae0611ad96012600a6120f4565b8890611a68565b9050600060018210611b345760148361ffff1610611b005750601e611b4c565b600a8361ffff1610611b2957611b17600a84611fed565b611b2290601461237f565b9050611b4c565b611b22836002612458565b600a8361ffff161115611b495750600a611b4c565b50815b9998505050505050505050565b600080611b72611b6b6012600a6120f4565b8490611a68565b90506000611ba6611b8560036012611fed565b611b9090600a6120f4565b610f95611b9f6012600a6120f4565b8790611d73565b9050600060018310611c5c576103e88310611bc35750601e611cf1565b6101f48310611bd45750601c611cf1565b60c88310611be45750601a611cf1565b60648310611bf457506018611cf1565b60328310611c0457506016611cf1565b60148310611c1457506014611cf1565b600a8310611c2457506012611cf1565b60058310611c3457506010611cf1565b60038310611c445750600e611cf1565b60028310611c545750600c611cf1565b50600a611cf1565b6101f48210611c6d57506009611cf1565b60c88210611c7d57506008611cf1565b60648210611c8d57506007611cf1565b60328210611c9d57506006611cf1565b60148210611cad57506005611cf1565b600a8210611cbd57506004611cf1565b60058210611ccd57506003611cf1565b60028210611cdd57506002611cf1565b60018210611ced57506001611cf1565b5060005b949350505050565b600081611d0857506000919050565b60016101005b8061ffff168261ffff1610156119485760006001611d2c83856123a4565b61ffff16901c905060006001611d438360026123ca565b611d4d91906123da565b9050858116611d6857611d618260016123a4565b9350611d6c565b8192505b5050611d0e565b6000611a5f8284612479565b6001600160401b0381168114610db857600080fd5b6001600160a01b0381168114610db857600080fd5b60008060008060808587031215611dbf57600080fd5b8435611dca81611d7f565b93506020850135611dda81611d94565b92506040850135611dea81611d94565b9396929550929360600135925050565b600060208284031215611e0c57600080fd5b8135611e1781611d94565b9392505050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60e081018181106001600160401b0382111715611e7557634e487b7160e01b600052604160045260246000fd5b60405250565b601f8201601f191681016001600160401b0381118282101715611eae57634e487b7160e01b600052604160045260246000fd5b6040525050565b805161ffff81168114611ec757600080fd5b919050565b805160ff81168114611ec757600080fd5b80518015158114611ec757600080fd5b6000806000838503610120811215611f0457600080fd5b60e0811215611f1257600080fd5b50604051611f1f81611e48565b845181526020850151611f3181611d7f565b6020820152611f4260408601611eb5565b6040820152611f5360608601611ecc565b6060820152611f6460808601611edd565b6080820152611f7560a08601611ecc565b60a0820152611f8660c08601611ecc565b60c08201529250611f9960e08501611edd565b9150611fa86101008501611ecc565b90509250925092565b600060208284031215611fc357600080fd5b815163ffffffff81168114611e1757600080fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168082101561200757612007611fd7565b90039392505050565b600181815b8085111561204b57816000190482111561203157612031611fd7565b8085161561203e57918102915b93841c9390800290612015565b509250929050565b60008261206257506001611a62565b8161206f57506000611a62565b8160018114612085576002811461208f576120ab565b6001915050611a62565b60ff8411156120a0576120a0611fd7565b50506001821b611a62565b5060208310610133831016604e8410600b84101617156120ce575081810a611a62565b6120d88383612010565b80600019048211156120ec576120ec611fd7565b029392505050565b6000611a5f60ff841683612053565b60006020828403121561211557600080fd5b5051919050565b60006020828403121561212e57600080fd5b611a5f82611eb5565b600063ffffffff8083168185168183048111821515161561215a5761215a611fd7565b02949350505050565b600061ffff8381169083168181101561217e5761217e611fd7565b039392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156121ce576121ce611fd7565b500190565b6000602082840312156121e557600080fd5b8151611e1781611d94565b60006020828403121561220257600080fd5b611a5f82611ecc565b60006020828403121561221d57600080fd5b611a5f82611edd565b600061ffff8083168181141561223e5761223e611fd7565b6001019392505050565b60006001600160401b038083168181141561223e5761223e611fd7565b600060033d111561227e5760046000803e5060005160e01c5b90565b600060443d101561228f5790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156122be57505050505090565b82850191508151818111156122d65750505050505090565b843d87010160208285010111156122f05750505050505090565b6122ff60208286010187611e7b565b509095945050505050565b60018060a01b0384168152600060206001600160401b0385168184015260606040840152835180606085015260005b8181101561235557858101830151858201608001528201612339565b81811115612367576000608083870101525b50601f01601f19169290920160800195945050505050565b600060ff821660ff84168060ff0382111561239c5761239c611fd7565b019392505050565b600061ffff8083168185168083038211156123c1576123c1611fd7565b01949350505050565b6000611a5f61ffff841683612053565b6000828210156123ec576123ec611fd7565b500390565b600081600019048311821515161561240b5761240b611fd7565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261243557612435612410565b500490565b600061ffff82168061244e5761244e611fd7565b6000190192915050565b600060ff821660ff84168160ff04811182151516156120ec576120ec611fd7565b60008261248857612488612410565b50069056fea26469706673582212204d23160e1ee3f61ca80f12b85beba6576c000300845295ec4aca0f9bbf1a238d64736f6c634300080b0033","devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":7,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":122,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"_paused","offset":20,"slot":"0","type":"t_bool"},{"astId":5325,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"tokenAddr","offset":0,"slot":"1","type":"t_address"},{"astId":5327,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"recordsAddr","offset":0,"slot":"2","type":"t_address"},{"astId":5329,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"adminAddr","offset":0,"slot":"3","type":"t_address"},{"astId":5331,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"marketingAddr","offset":0,"slot":"4","type":"t_address"},{"astId":5334,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"token","offset":0,"slot":"5","type":"t_contract(IERC20)820"},{"astId":5337,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"records","offset":0,"slot":"6","type":"t_contract(ILuminaRecords)2379"},{"astId":5340,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"admin","offset":0,"slot":"7","type":"t_contract(ILuminaAdmin)2207"},{"astId":5342,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"_claimedChallenges","offset":20,"slot":"7","type":"t_uint64"},{"astId":5344,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"_claimedTokens","offset":0,"slot":"8","type":"t_uint256"},{"astId":5346,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"_marketingCallSuccessCnt","offset":0,"slot":"9","type":"t_uint64"},{"astId":5348,"contract":"contracts/LuminaTrustee.sol:LuminaTrustee","label":"_marketingCallFailedCnt","offset":8,"slot":"9","type":"t_uint64"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(IERC20)820":{"encoding":"inplace","label":"contract IERC20","numberOfBytes":"20"},"t_contract(ILuminaAdmin)2207":{"encoding":"inplace","label":"contract ILuminaAdmin","numberOfBytes":"20"},"t_contract(ILuminaRecords)2379":{"encoding":"inplace","label":"contract ILuminaRecords","numberOfBytes":"20"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}}}')},187:function(e){e.exports=JSON.parse('{"address":"0xc7FcaE6deCB6b576d079367aeB797b801a1C39B3","abi":[{"inputs":[{"internalType":"address","name":"erc20Addr_","type":"address"},{"internalType":"address","name":"progressingAddr_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"availableBalanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"erc20Addr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"notAvailableBalanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"progressingAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalLockedBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"withdrawnBalanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x8da66ec1bac839c5ffcf290237f011350e5aa4c2abc8eb1e2f14d3784852e59c","receipt":{"to":null,"from":"0xC72E6D4E629F1C89d57f4D7Ad511d1b221D1d757","contractAddress":"0xc7FcaE6deCB6b576d079367aeB797b801a1C39B3","transactionIndex":0,"gasUsed":"1488814","logsBloom":"0xblockHash":"0x191c23ab180f4a363b206d9badb3b9415928a08c013b16a62dc5113519fb46c4","transactionHash":"0x8da66ec1bac839c5ffcf290237f011350e5aa4c2abc8eb1e2f14d3784852e59c","logs":[{"transactionIndex":0,"blockNumber":24340043,"transactionHash":"0x8da66ec1bac839c5ffcf290237f011350e5aa4c2abc8eb1e2f14d3784852e59c","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000c72e6d4e629f1c89d57f4d7ad511d1b221d1d757","0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"],"data":"0x000000000000000000000000000000000000000000000000009eae0da74fbb3400000000000000000000000000000000000000000000000007ea9be9809f89190000000000000000000000000000000000000000000005a8c8c9f0dcb07d09c9000000000000000000000000000000000000000000000000074beddbd94fcde50000000000000000000000000000000000000000000005a8c9689eea57ccc4fd","logIndex":0,"blockHash":"0x191c23ab180f4a363b206d9badb3b9415928a08c013b16a62dc5113519fb46c4"}],"blockNumber":24340043,"cumulativeGasUsed":"1488814","status":1,"byzantium":true},"args":["0x77A8dE2d74e1328B989a3f4D8C4aEAB1e2A186fD","0x4512dDC51F1A46de3b92E9BD61fEC02765c8DA8b"],"solcInputHash":"93d9a3e5beccfe46ed35f40bd3a64522","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.11+commit.d7f03943\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"erc20Addr_\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"progressingAddr_\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Approval\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Transfer\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"}],\\"name\\":\\"allowance\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"approve\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"availableBalanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"balanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"decimals\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"subtractedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"decreaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"deposit\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"erc20Addr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"addedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"increaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"notAvailableBalanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"progressingAddr\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"symbol\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"totalLockedBalance\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"totalSupply\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transfer\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"sender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transferFrom\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"withdraw\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"withdrawAll\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"withdrawnBalanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"allowance(address,address)\\":{\\"details\\":\\"See {IERC20-allowance}.\\"},\\"approve(address,uint256)\\":{\\"details\\":\\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\\"},\\"balanceOf(address)\\":{\\"details\\":\\"See {IERC20-balanceOf}.\\"},\\"decimals()\\":{\\"details\\":\\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\\"},\\"decreaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\\"},\\"increaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\\"},\\"name()\\":{\\"details\\":\\"Returns the name of the token.\\"},\\"symbol()\\":{\\"details\\":\\"Returns the symbol of the token, usually a shorter version of the name.\\"},\\"totalSupply()\\":{\\"details\\":\\"See {IERC20-totalSupply}.\\"},\\"transfer(address,uint256)\\":{\\"details\\":\\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\\"},\\"transferFrom(address,address,uint256)\\":{\\"details\\":\\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/ProgressContractLocker.sol\\":\\"ProgressContractLocker\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./IERC20.sol\\\\\\";\\\\nimport \\\\\\"./extensions/IERC20Metadata.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC20} interface.\\\\n *\\\\n * This implementation is agnostic to the way tokens are created. This means\\\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\\\n *\\\\n * TIP: For a detailed writeup see our guide\\\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\\\n * to implement supply mechanisms].\\\\n *\\\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\\\n * instead returning `false` on failure. This behavior is nonetheless\\\\n * conventional and does not conflict with the expectations of ERC20\\\\n * applications.\\\\n *\\\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\\\n * This allows applications to reconstruct the allowance for all accounts just\\\\n * by listening to said events. Other implementations of the EIP may not emit\\\\n * these events, as it isn\'t required by the specification.\\\\n *\\\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\\\n * functions have been added to mitigate the well-known issues around setting\\\\n * allowances. See {IERC20-approve}.\\\\n */\\\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\\\n    mapping(address => uint256) private _balances;\\\\n\\\\n    mapping(address => mapping(address => uint256)) private _allowances;\\\\n\\\\n    uint256 private _totalSupply;\\\\n\\\\n    string private _name;\\\\n    string private _symbol;\\\\n\\\\n    /**\\\\n     * @dev Sets the values for {name} and {symbol}.\\\\n     *\\\\n     * The default value of {decimals} is 18. To select a different value for\\\\n     * {decimals} you should overload it.\\\\n     *\\\\n     * All two of these values are immutable: they can only be set once during\\\\n     * construction.\\\\n     */\\\\n    constructor(string memory name_, string memory symbol_) {\\\\n        _name = name_;\\\\n        _symbol = symbol_;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() public view virtual override returns (string memory) {\\\\n        return _name;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\\\n     * name.\\\\n     */\\\\n    function symbol() public view virtual override returns (string memory) {\\\\n        return _symbol;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of decimals used to get its user representation.\\\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\\\n     *\\\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\\\n     * overridden;\\\\n     *\\\\n     * NOTE: This information is only used for _display_ purposes: it in\\\\n     * no way affects any of the arithmetic of the contract, including\\\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\\\n     */\\\\n    function decimals() public view virtual override returns (uint8) {\\\\n        return 18;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-totalSupply}.\\\\n     */\\\\n    function totalSupply() public view virtual override returns (uint256) {\\\\n        return _totalSupply;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-balanceOf}.\\\\n     */\\\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\\\n        return _balances[account];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transfer}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - the caller must have a balance of at least `amount`.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(_msgSender(), recipient, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-allowance}.\\\\n     */\\\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\\\n        return _allowances[owner][spender];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-approve}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\\\n        _approve(_msgSender(), spender, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transferFrom}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` and `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     * - the caller must have allowance for ``sender``\'s tokens of at least\\\\n     * `amount`.\\\\n     */\\\\n    function transferFrom(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) public virtual override returns (bool) {\\\\n        _transfer(sender, recipient, amount);\\\\n\\\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\\\n        require(currentAllowance >= amount, \\\\\\"ERC20: transfer amount exceeds allowance\\\\\\");\\\\n        unchecked {\\\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\\\n        }\\\\n\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     * - `spender` must have allowance for the caller of at least\\\\n     * `subtractedValue`.\\\\n     */\\\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\\\n        require(currentAllowance >= subtractedValue, \\\\\\"ERC20: decreased allowance below zero\\\\\\");\\\\n        unchecked {\\\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\\\n        }\\\\n\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\\\n     *\\\\n     * This internal function is equivalent to {transfer}, and can be used to\\\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` cannot be the zero address.\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     */\\\\n    function _transfer(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal virtual {\\\\n        require(sender != address(0), \\\\\\"ERC20: transfer from the zero address\\\\\\");\\\\n        require(recipient != address(0), \\\\\\"ERC20: transfer to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(sender, recipient, amount);\\\\n\\\\n        uint256 senderBalance = _balances[sender];\\\\n        require(senderBalance >= amount, \\\\\\"ERC20: transfer amount exceeds balance\\\\\\");\\\\n        unchecked {\\\\n            _balances[sender] = senderBalance - amount;\\\\n        }\\\\n        _balances[recipient] += amount;\\\\n\\\\n        emit Transfer(sender, recipient, amount);\\\\n\\\\n        _afterTokenTransfer(sender, recipient, amount);\\\\n    }\\\\n\\\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\\\n     * the total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `from` set to the zero address.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     */\\\\n    function _mint(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: mint to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(address(0), account, amount);\\\\n\\\\n        _totalSupply += amount;\\\\n        _balances[account] += amount;\\\\n        emit Transfer(address(0), account, amount);\\\\n\\\\n        _afterTokenTransfer(address(0), account, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\\\n     * total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `to` set to the zero address.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     * - `account` must have at least `amount` tokens.\\\\n     */\\\\n    function _burn(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: burn from the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(account, address(0), amount);\\\\n\\\\n        uint256 accountBalance = _balances[account];\\\\n        require(accountBalance >= amount, \\\\\\"ERC20: burn amount exceeds balance\\\\\\");\\\\n        unchecked {\\\\n            _balances[account] = accountBalance - amount;\\\\n        }\\\\n        _totalSupply -= amount;\\\\n\\\\n        emit Transfer(account, address(0), amount);\\\\n\\\\n        _afterTokenTransfer(account, address(0), amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\\\n     *\\\\n     * This internal function is equivalent to `approve`, and can be used to\\\\n     * e.g. set automatic allowances for certain subsystems, etc.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `owner` cannot be the zero address.\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function _approve(\\\\n        address owner,\\\\n        address spender,\\\\n        uint256 amount\\\\n    ) internal virtual {\\\\n        require(owner != address(0), \\\\\\"ERC20: approve from the zero address\\\\\\");\\\\n        require(spender != address(0), \\\\\\"ERC20: approve to the zero address\\\\\\");\\\\n\\\\n        _allowances[owner][spender] = amount;\\\\n        emit Approval(owner, spender, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Hook that is called before any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * will be transferred to `to`.\\\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens will be burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _beforeTokenTransfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 amount\\\\n    ) internal virtual {}\\\\n\\\\n    /**\\\\n     * @dev Hook that is called after any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * has been transferred to `to`.\\\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens have been burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _afterTokenTransfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 amount\\\\n    ) internal virtual {}\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../IERC20.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\\\n *\\\\n * _Available since v4.1._\\\\n */\\\\ninterface IERC20Metadata is IERC20 {\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token.\\\\n     */\\\\n    function symbol() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the decimals places of the token.\\\\n     */\\\\n    function decimals() external view returns (uint8);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n// CAUTION\\\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\\\n// because it relies on the compiler\'s built in overflow checks.\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations.\\\\n *\\\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\\\n * now has built in overflow checking.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            uint256 c = a + b;\\\\n            if (c < a) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b > a) return (false, 0);\\\\n            return (true, a - b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n            // benefit is lost if \'b\' is also tested.\\\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n            if (a == 0) return (true, 0);\\\\n            uint256 c = a * b;\\\\n            if (c / a != b) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a / b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a % b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a + b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a - b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a * b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a / b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a % b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b <= a, errorMessage);\\\\n            return a - b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a / b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting with custom message when dividing by zero.\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a % b;\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\\",\\"license\\":\\"MIT\\"},\\"contracts/ProgressContractLocker.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./Progressing.sol\\\\\\";\\\\nimport \\\\\\"./ProgressLocker.sol\\\\\\";\\\\nimport \\\\\\"./Utils.sol\\\\\\";\\\\n\\\\ncontract ProgressContractLocker is ProgressLocker, Utils {\\\\n    address public progressingAddr;\\\\n    address public erc20Addr;\\\\n\\\\n    constructor(address erc20Addr_, address progressingAddr_)\\\\n        ProgressLocker(concat(\\\\\\"Locked \\\\\\", ERC20(erc20Addr_).name()), concat(\\\\\\"L\\\\\\", ERC20(erc20Addr_).symbol()), ERC20(erc20Addr_), Progressing(progressingAddr_)) {\\\\n        erc20Addr = erc20Addr_;\\\\n        progressingAddr = progressingAddr_;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x929be6bb1d9137aa273b8ca4c736ec672eb3225b2ac44d942fb8a6969b5aff18\\",\\"license\\":\\"MIT\\"},\\"contracts/ProgressLocker.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./Progressing.sol\\\\\\";\\\\n\\\\nabstract contract ProgressLocker is ERC20 {\\\\n    using SafeMath for uint256;\\\\n\\\\n    // Link to ERC20 tokens contract\\\\n    IERC20 private erc20;\\\\n\\\\n    // Link to contract or object with progressing indicator\\\\n    Progressing private progressing;\\\\n\\\\n    // Mapping address to adjustment\\\\n    // Adjustment basically relects the amoutn withdrawn form the account\\\\n    // but it gets more compicated opnce you start tranferring locked tokens to other accounts\\\\n    //\\\\n    // available = (balance + adjustment) * progress / progressMax - adjustment\\\\n    //\\\\n    mapping (address => uint256) private _adjustment;\\\\n\\\\n    // True amount withdrawn from each account\\\\n    mapping (address => uint256) private _withdrawn;\\\\n\\\\n    constructor(string memory name_, string memory symbol_, IERC20 erc20_, Progressing progressing_)\\\\n        ERC20(name_, symbol_)\\\\n    {\\\\n        erc20 = erc20_;\\\\n        progressing = progressing_;\\\\n\\\\n        // Just check if all is good\\\\n        progressing.getProgress();\\\\n    }\\\\n\\\\n    function totalLockedBalance() public view returns (uint256) {\\\\n        uint256 total = erc20.balanceOf(address(this));\\\\n        return total;\\\\n    }\\\\n\\\\n    function deposit(uint256 amount) public {\\\\n        address sender = msg.sender;\\\\n        address recipient = address(this);\\\\n        erc20.transferFrom(sender, recipient, amount);\\\\n        _mint(sender, amount);\\\\n        (uint256 progress, uint256 progressMax) = progressing.getProgress();\\\\n        (progress, progressMax) = progressing.getProgress();\\\\n        if(progress > 0) {\\\\n            require(progress < progressMax, \\\\\\"ProgressLocker: progress is 100%, it does not make any sense to deposit anymore\\\\\\");\\\\n            uint256 aamount = depositAdjustment(amount, progress, progressMax, decimals());\\\\n            _adjustment[sender] = _adjustment[sender].add(aamount);\\\\n        }\\\\n    }\\\\n\\\\n    // (amount + adj) * progress / progressMax == adj, therefore\\\\n    // adj = (amount * progress/progressMax) / (1 - progress/progressMax)\\\\n    function depositAdjustment(uint256 amount, uint256 progress, uint256 progressMax, uint8 decimals) private pure returns (uint256) {\\\\n        uint256 a = amount.mul(progress).div(progressMax);\\\\n        uint256 m = 10 ** decimals;\\\\n        uint256 p = m.mul(progress).div(progressMax);\\\\n        uint256 b = m.sub(p);\\\\n        uint256 adj = a.mul(m).div(b);\\\\n        return adj;\\\\n    }\\\\n\\\\n    function withdraw(uint256 amount) public {\\\\n        address sender = msg.sender;\\\\n        uint256 available = availableBalanceOf(sender);\\\\n        require(amount <= available, \\\\\\"ProgressLocker: Withdrawal exceeds the available amount\\\\\\");\\\\n        uint256 adjustment = adjustmentBalanceOf(sender);\\\\n        _adjustment[sender] = adjustment.add(amount);\\\\n        uint256 withdrawn = withdrawnBalanceOf(sender);\\\\n        _withdrawn[sender] = withdrawn.add(amount);\\\\n        _burn(sender, amount);\\\\n        erc20.transfer(sender, amount);\\\\n    }\\\\n\\\\n    function withdrawAll() public {\\\\n        address sender = msg.sender;\\\\n        uint256 amount = availableBalanceOf(sender);\\\\n        uint256 adjustment = adjustmentBalanceOf(sender);\\\\n        _adjustment[sender] = adjustment.add(amount);\\\\n        uint256 withdrawn = withdrawnBalanceOf(sender);\\\\n        _withdrawn[sender] = withdrawn.add(amount);\\\\n        _burn(sender, amount);\\\\n        erc20.transfer(sender, amount);\\\\n    }\\\\n\\\\n    // available = (balance + adjustment) * progress / progressMax - adjustment\\\\n    function availableBalanceOf(address account) public view returns (uint256) {\\\\n        uint256 balance = balanceOf(account);\\\\n        // Let\'s call progressing directly so we can test returned values\\\\n        (uint256 progress, uint256 progressMax) = progressing.getProgress();\\\\n        if(progress == 0) {\\\\n            return 0;\\\\n        }\\\\n        if(progress >= progressMax) {\\\\n            return balance;\\\\n        }\\\\n        uint256 adjustment = adjustmentBalanceOf(account);\\\\n        uint256 totalWithdraw = balance.add(adjustment).mul(progress).div(progressMax, \\\\\\"ProgressLocker: zero progressMax\\\\\\");\\\\n        if(totalWithdraw > adjustment) {\\\\n            return totalWithdraw.sub(adjustment);\\\\n        }\\\\n        return 0;\\\\n    }\\\\n\\\\n    function notAvailableBalanceOf(address account) public view returns (uint256) {\\\\n        uint256 total = balanceOf(account);\\\\n        uint256 available = availableBalanceOf(account);\\\\n        return total.sub(available);\\\\n    }\\\\n\\\\n    function withdrawnBalanceOf(address account) public view returns (uint256) {\\\\n        uint256 withdrawn = _withdrawn[account];\\\\n        return withdrawn;\\\\n    }\\\\n\\\\n    function adjustmentBalanceOf(address account) private view returns (uint256) {\\\\n        uint256 adjustment = _adjustment[account];\\\\n        return adjustment;\\\\n    }\\\\n\\\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\\\\n        uint256 balance = balanceOf(sender);\\\\n        super._transfer(sender, recipient, amount);\\\\n        if(amount > 0) {\\\\n            uint256 adjustment = adjustmentBalanceOf(sender);\\\\n            uint256 aamount = adjustment.mul(amount).div(balance, \\\\\\"ProgressLocker: zero balance\\\\\\");\\\\n            _adjustment[sender] = adjustment.sub(aamount);\\\\n            _adjustment[recipient] = _adjustment[recipient].add(aamount);\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb0cb0afeebeb198b562830bf8886edf9ae9bc739a63900ee04f91400108347ae\\",\\"license\\":\\"MIT\\"},\\"contracts/Progressing.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n* @dev Interface that provides a progress indicator expressed a pair of two numbers, a progress number and a progresMax number representing 100%.\\\\n*\\\\n* Progress(%): p = progress * 100 / progressMax\\\\n*/\\\\ninterface Progressing {\\\\n    function getProgress() external view returns (uint256 progress, uint256 progressMax);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x1bbf8e296a6677c6755fe742fd372d5c72505a34b15ae06224725d0cb5abe886\\",\\"license\\":\\"MIT\\"},\\"contracts/Utils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nabstract contract Utils {\\\\n\\\\n    // finds the highest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findHsb of 0 returns 0\\\\n    //      findHsb of 1 returns 1\\\\n    //      findHsb of 2 returns 2\\\\n    //      findHsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findHsb(uint256 n) internal pure returns (uint16) {\\\\n        uint16 from = 0;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if(n <= mask) {\\\\n                to = middle;\\\\n            } else {\\\\n                from = middle+1;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n    // finds the lowest significant bit of the argument\\\\n    // the result is encoded as if bits were numbered from 1\\\\n    // e.g. findLsb of 0 returns 0\\\\n    //      findLsb of 1 returns 1\\\\n    //      findLsb of 2 returns 2\\\\n    //      findLsb of 4 returns 3\\\\n    //      etc.\\\\n    function _findLsb(uint256 n) internal pure returns (uint16) {\\\\n        if(n == 0) {\\\\n            return 0;\\\\n        }\\\\n        uint16 from = 1;\\\\n        uint16 to = 256;\\\\n\\\\n        while(from < to) {\\\\n            uint16 middle = (from + to) >> 1;\\\\n            uint256 mask = (2 ** middle) - 1;\\\\n            if((n & mask) == 0) {\\\\n                from = middle+1;\\\\n            } else {\\\\n                to = middle;\\\\n            }\\\\n        }\\\\n\\\\n        return from;\\\\n    }\\\\n\\\\n    function concat(string memory _a, string memory _b) internal pure returns (string memory) {\\\\n        bytes memory _ba = bytes(_a);\\\\n        bytes memory _bb = bytes(_b);\\\\n        string memory ab = new string(_ba.length + _bb.length);\\\\n        bytes memory bab = bytes(ab);\\\\n        uint k = 0;\\\\n        for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];\\\\n        for (uint i = 0; i < _bb.length; i++) bab[k++] = _bb[i];\\\\n        return string(bab);\\\\n    }\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe36cd6cc097c0e71bb4144f304da71147692c8e2a93f583692390e7416c6d51c\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b5060405162001cee38038062001cee833981016040819052620000349162000456565b620000c76040518060400160405280600781526020016602637b1b5b2b2160cd1b815250836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000097573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000c19190810190620004a4565b62000223565b62000124604051806040016040528060018152602001601360fa1b815250846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000097573d6000803e3d6000fd5b8383838381600390805190602001906200014092919062000393565b5080516200015690600490602084019062000393565b5050600580546001600160a01b038086166001600160a01b031992831617909255600680549285169290911682179055604080516349ce222b60e11b8152815192935063939c445692600480830193928290030181865afa158015620001c0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001e6919062000580565b5050600a80546001600160a01b039788166001600160a01b0319918216179091556009805496909716951694909417909455506200064792505050565b80518251606091849184916000916200023d9190620005bb565b6001600160401b038111156200025757620002576200048e565b6040519080825280601f01601f19166020018201604052801562000282576020820181803683370190505b509050806000805b85518110156200030657858181518110620002a957620002a9620005d6565b01602001516001600160f81b0319168383620002c581620005ec565b945081518110620002da57620002da620005d6565b60200101906001600160f81b031916908160001a90535080620002fd81620005ec565b9150506200028a565b5060005b84518110156200038657848181518110620003295762000329620005d6565b01602001516001600160f81b03191683836200034581620005ec565b9450815181106200035a576200035a620005d6565b60200101906001600160f81b031916908160001a905350806200037d81620005ec565b9150506200030a565b5090979650505050505050565b828054620003a1906200060a565b90600052602060002090601f016020900481019282620003c5576000855562000410565b82601f10620003e057805160ff191683800117855562000410565b8280016001018555821562000410579182015b8281111562000410578251825591602001919060010190620003f3565b506200041e92915062000422565b5090565b5b808211156200041e576000815560010162000423565b80516001600160a01b03811681146200045157600080fd5b919050565b600080604083850312156200046a57600080fd5b620004758362000439565b9150620004856020840162000439565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215620004b857600080fd5b82516001600160401b0380821115620004d057600080fd5b818501915085601f830112620004e557600080fd5b815181811115620004fa57620004fa6200048e565b604051601f8201601f19908116603f011681019083821181831017156200052557620005256200048e565b8160405282815288868487010111156200053e57600080fd5b600093505b8284101562000562578484018601518185018701529285019262000543565b82841115620005745760008684830101525b98975050505050505050565b600080604083850312156200059457600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b60008219821115620005d157620005d1620005a5565b500190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415620006035762000603620005a5565b5060010190565b600181811c908216806200061f57607f821691505b602082108114156200064157634e487b7160e01b600052602260045260246000fd5b50919050565b61169780620006576000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806362d8908f116100ad578063a457c2d711610071578063a457c2d714610289578063a9059cbb1461029c578063b6b55f25146102af578063c20704af146102c2578063dd62ed3e146102d557600080fd5b806362d8908f1461021457806370a082311461022757806378f77ebf14610250578063853828b61461027957806395d89b411461028157600080fd5b80632d98ac5e116100f45780632d98ac5e146101aa5780632e1a7d4d146101b2578063313ce567146101c7578063317e3ce0146101d6578063395093511461020157600080fd5b806306fdde0314610131578063095ea7b31461014f57806318160ddd1461017257806323b872dd1461018457806325d998bb14610197575b600080fd5b61013961030e565b60405161014691906112fa565b60405180910390f35b61016261015d36600461136b565b6103a0565b6040519015158152602001610146565b6002545b604051908152602001610146565b610162610192366004611395565b6103b7565b6101766101a53660046113d1565b610466565b6101766105bf565b6101c56101c03660046113ec565b610630565b005b60405160128152602001610146565b600a546101e9906001600160a01b031681565b6040516001600160a01b039091168152602001610146565b61016261020f36600461136b565b6107a8565b6101766102223660046113d1565b6107e4565b6101766102353660046113d1565b6001600160a01b031660009081526020819052604090205490565b61017661025e3660046113d1565b6001600160a01b031660009081526008602052604090205490565b6101c561081c565b610139610927565b61016261029736600461136b565b610936565b6101626102aa36600461136b565b6109cf565b6101c56102bd3660046113ec565b6109dc565b6009546101e9906001600160a01b031681565b6101766102e3366004611405565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461031d90611438565b80601f016020809104026020016040519081016040528092919081815260200182805461034990611438565b80156103965780601f1061036b57610100808354040283529160200191610396565b820191906000526020600020905b81548152906001019060200180831161037957829003601f168201915b5050505050905090565b60006103ad338484610c36565b5060015b92915050565b60006103c4848484610d5b565b6001600160a01b03841660009081526001602090815260408083203384529091529020548281101561044e5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61045b8533858403610c36565b506001949350505050565b6001600160a01b0381166000908152602081905260408120548190600654604080516349ce222b60e11b8152815193945060009384936001600160a01b03169263939c445692600480820193918290030181865afa1580156104cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f09190611473565b91509150816000141561050857506000949350505050565b8082106105185750909392505050565b6001600160a01b03851660009081526007602052604081205490506000610593836040518060400160405280602081526020017f50726f67726573734c6f636b65723a207a65726f2070726f67726573734d617881525061058c87610586878b610e3090919063ffffffff16565b90610e43565b9190610e4f565b9050818111156105b2576105a78183610e89565b979650505050505050565b5060009695505050505050565b6005546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561060c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b19190611497565b33600061063c82610466565b9050808311156106b45760405162461bcd60e51b815260206004820152603760248201527f50726f67726573734c6f636b65723a205769746864726177616c20657863656560448201527f64732074686520617661696c61626c6520616d6f756e740000000000000000006064820152608401610445565b6001600160a01b0382166000908152600760205260409020546106d78185610e30565b6001600160a01b0384166000908152600760209081526040808320939093556008905220546107068186610e30565b6001600160a01b0385166000908152600860205260409020556107298486610e95565b60055460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018890529091169063a9059cbb906044016020604051808303816000875af115801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a091906114b0565b505050505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916103ad9185906107df9086906114e8565b610c36565b6001600160a01b038116600090815260208190526040812054600061080884610466565b90506108148282610e89565b949350505050565b33600061082882610466565b9050600061084b836001600160a01b031660009081526007602052604090205490565b90506108578183610e30565b6001600160a01b0384166000908152600760209081526040808320939093556008905220546108868184610e30565b6001600160a01b0385166000908152600860205260409020556108a98484610e95565b60055460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018690529091169063a9059cbb906044016020604051808303816000875af11580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092091906114b0565b5050505050565b60606004805461031d90611438565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156109b85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610445565b6109c53385858403610c36565b5060019392505050565b60006103ad338484610d5b565b6005546040516323b872dd60e01b81523360048201819052306024830181905260448301859052909290916001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5f91906114b0565b50610a6a8284610fdb565b600654604080516349ce222b60e11b8152815160009384936001600160a01b039091169263939c445692600480830193928290030181865afa158015610ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad89190611473565b600654604080516349ce222b60e11b815281519496509294506001600160a01b039091169263939c44569260048082019392918290030181865afa158015610b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b489190611473565b9092509050811561092057808210610be05760405162461bcd60e51b815260206004820152604f60248201527f50726f67726573734c6f636b65723a2070726f6772657373206973203130302560448201527f2c20697420646f6573206e6f74206d616b6520616e792073656e736520746f2060648201526e6465706f73697420616e796d6f726560881b608482015260a401610445565b6000610bef86848460126110ba565b6001600160a01b038616600090815260076020526040902054909150610c159082610e30565b6001600160a01b038616600090815260076020526040902055505050505050565b6001600160a01b038316610c985760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610445565b6001600160a01b038216610cf95760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610445565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316600090815260208190526040902054610d7f848484611120565b8115610e2a576001600160a01b03841660009081526007602052604081205490506000610def836040518060400160405280601c81526020017f50726f67726573734c6f636b65723a207a65726f2062616c616e63650000000081525061058c8786610e4390919063ffffffff16565b9050610dfb8282610e89565b6001600160a01b038088166000908152600760205260408082209390935590871681522054610c159082610e30565b50505050565b6000610e3c82846114e8565b9392505050565b6000610e3c8284611500565b60008183610e705760405162461bcd60e51b815260040161044591906112fa565b50828481610e8057610e8061151f565b04949350505050565b6000610e3c8284611535565b6001600160a01b038216610ef55760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610445565b6001600160a01b03821660009081526020819052604090205481811015610f695760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610445565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610f98908490611535565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610d4e565b6001600160a01b0382166110315760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610445565b806002600082825461104391906114e8565b90915550506001600160a01b038216600090815260208190526040812080548392906110709084906114e8565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000806110d1846110cb8888610e43565b906112ee565b905060006110e084600a611630565b905060006110f2866110cb848a610e43565b905060006111008383610e89565b90506000611112826110cb8787610e43565b9a9950505050505050505050565b6001600160a01b0383166111845760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610445565b6001600160a01b0382166111e65760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610445565b6001600160a01b0383166000908152602081905260409020548181101561125e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610445565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906112959084906114e8565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516112e191815260200190565b60405180910390a3610e2a565b6000610e3c828461163f565b600060208083528351808285015260005b818110156113275785810183015185820160400152820161130b565b81811115611339576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461136657600080fd5b919050565b6000806040838503121561137e57600080fd5b6113878361134f565b946020939093013593505050565b6000806000606084860312156113aa57600080fd5b6113b38461134f565b92506113c16020850161134f565b9150604084013590509250925092565b6000602082840312156113e357600080fd5b610e3c8261134f565b6000602082840312156113fe57600080fd5b5035919050565b6000806040838503121561141857600080fd5b6114218361134f565b915061142f6020840161134f565b90509250929050565b600181811c9082168061144c57607f821691505b6020821081141561146d57634e487b7160e01b600052602260045260246000fd5b50919050565b6000806040838503121561148657600080fd5b505080516020909101519092909150565b6000602082840312156114a957600080fd5b5051919050565b6000602082840312156114c257600080fd5b81518015158114610e3c57600080fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156114fb576114fb6114d2565b500190565b600081600019048311821515161561151a5761151a6114d2565b500290565b634e487b7160e01b600052601260045260246000fd5b600082821015611547576115476114d2565b500390565b600181815b8085111561158757816000190482111561156d5761156d6114d2565b8085161561157a57918102915b93841c9390800290611551565b509250929050565b60008261159e575060016103b1565b816115ab575060006103b1565b81600181146115c157600281146115cb576115e7565b60019150506103b1565b60ff8411156115dc576115dc6114d2565b50506001821b6103b1565b5060208310610133831016604e8410600b841016171561160a575081810a6103b1565b611614838361154c565b8060001904821115611628576116286114d2565b029392505050565b6000610e3c60ff84168361158f565b60008261165c57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220f2d8de076ac6425d79cd8add09ecf132861c731fd1bae6a1259812853c82cae164736f6c634300080b0033","deployedBytecode":"","devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":212,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":218,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":220,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":222,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":224,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"},{"astId":6539,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"erc20","offset":0,"slot":"5","type":"t_contract(IERC20)820"},{"astId":6542,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"progressing","offset":0,"slot":"6","type":"t_contract(Progressing)7065"},{"astId":6546,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_adjustment","offset":0,"slot":"7","type":"t_mapping(t_address,t_uint256)"},{"astId":6550,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"_withdrawn","offset":0,"slot":"8","type":"t_mapping(t_address,t_uint256)"},{"astId":6482,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"progressingAddr","offset":0,"slot":"9","type":"t_address"},{"astId":6484,"contract":"contracts/ProgressContractLocker.sol:ProgressContractLocker","label":"erc20Addr","offset":0,"slot":"10","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_contract(IERC20)820":{"encoding":"inplace","label":"contract IERC20","numberOfBytes":"20"},"t_contract(Progressing)7065":{"encoding":"inplace","label":"contract Progressing","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},191:function(e,n,t){e.exports={cat:"Category_cat__2ALJo",err:"Category_err__1S7hS"}},200:function(e,n,t){e.exports=t(325)},205:function(e,n,t){},206:function(e,n,t){},209:function(e,n){},224:function(e,n){},226:function(e,n){},236:function(e,n){},238:function(e,n){},263:function(e,n){},268:function(e,n){},270:function(e,n){},277:function(e,n){},290:function(e,n){},325:function(e,n,t){"use strict";t.r(n);var a=t(0),b=t.n(a),i=t(75),r=t.n(i),d=(t(205),t(206),t(2)),s=t.n(d),c=t(51),f=t(21),o=t(16),u=t(194),l=t(54),p=t(178),m=t.n(p),y=t(179),h=t(5),g=t(6),v=t(12),T=t(10),w=t(9),_=t(8),C=t(22),E=function(e){Object(w.a)(t,e);var n=Object(_.a)(t);function t(e){return Object(h.a)(this,t),n.call(this,k,A,e)}return Object(g.a)(t,[{key:"deploy",value:function(e,n){return Object(v.a)(Object(T.a)(t.prototype),"deploy",this).call(this,e,n||{})}},{key:"getDeployTransaction",value:function(e,n){return Object(v.a)(Object(T.a)(t.prototype),"getDeployTransaction",this).call(this,e,n||{})}},{key:"attach",value:function(e){return Object(v.a)(Object(T.a)(t.prototype),"attach",this).call(this,e)}},{key:"connect",value:function(e){return Object(v.a)(Object(T.a)(t.prototype),"connect",this).call(this,e)}}],[{key:"connect",value:function(e,n){return new C.b(e,k,n)}}]),t}(C.c),k=[{inputs:[{internalType:"address",name:"recordsAddr_",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint64",name:"blockNumber",type:"uint64"},{indexed:!1,internalType:"uint256",name:"challenge",type:"uint256"},{indexed:!1,internalType:"bool",name:"premium",type:"bool"}],name:"AddChallenge",type:"event"},{inputs:[],name:"BLOCKS_PER_CHALLENGE",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"BLOCKS_PER_CHALLENGE_INC",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"BLOCKS_PER_WEEK",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"CHALLENGE_DIFFICULTY_STEP",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"CHALLENGE_NULL",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"DEMO",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"LUCKY_NUMBER",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_CHALLENGE_CNT",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_CHALLENGE_DIFFICULTY",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_DONOR_BLOCKS",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"MINERS_CLAIM_MIN_RECIPIENT_BALANCE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"MIN_CHALLENGE_DIFFICULTY",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARDS_CNT_LIMIT",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_INC_INTERVAL",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNIT",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNITS_INC",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNITS_STANDARD",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNITS_START",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"TOKEN_DECIMALS",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"TOKEN_UNIT",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint64",name:"blockNumber",type:"uint64"},{internalType:"bool",name:"premium",type:"bool"}],name:"_cleanupChallenge",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint8",name:"limit",type:"uint8"}],name:"addChallenges",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"trusteeAddr_",type:"address"}],name:"attachTrustee",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"getChallengesAllowance",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bool",name:"premium",type:"bool"},{internalType:"uint8",name:"limit",type:"uint8"}],name:"readChallenges",outputs:[{internalType:"uint8",name:"totalCnt",type:"uint8"},{internalType:"uint8[]",name:"indexes",type:"uint8[]"},{internalType:"uint64[]",name:"blockNumbers",type:"uint64[]"},{internalType:"uint16[]",name:"rewardUnits",type:"uint16[]"},{internalType:"uint256[]",name:"challengeHashes",type:"uint256[]"},{internalType:"uint8[]",name:"nexts",type:"uint8[]"},{internalType:"uint16[]",name:"claimsCnt",type:"uint16[]"},{internalType:"bool[]",name:"claimed",type:"bool[]"}],stateMutability:"view",type:"function"},{inputs:[],name:"recordsAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint64",name:"blockNumber",type:"uint64"}],name:"retrieveChallenge",outputs:[{components:[{internalType:"uint256",name:"challengeHash",type:"uint256"},{internalType:"uint64",name:"blockNumber",type:"uint64"},{internalType:"uint16",name:"rewardUnits",type:"uint16"},{internalType:"uint8",name:"index",type:"uint8"},{internalType:"bool",name:"valid",type:"bool"},{internalType:"uint8",name:"prev",type:"uint8"},{internalType:"uint8",name:"next",type:"uint8"}],internalType:"struct ChallengeRecords.Challenge",name:"ch",type:"tuple"},{internalType:"bool",name:"premium",type:"bool"},{internalType:"uint8",name:"generalDifficulty",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"trusteeAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}],A="0x60806040523480156200001157600080fd5b5060405162002b2a38038062002b2a833981016040819052620000349162000279565b600080546001600160a01b031990811633179091556002805482166001600160a01b0384169081179091556003805490921617905562000075600462000175565b6200008160cd62000175565b61019680546001600160801b0319169055620000a0600260c8620002c1565b6001600160401b0316436001600160401b031611620000c1576000620000db565b620000cf600260c8620002c1565b620000db9043620002f3565b61019680546001600160801b0381166001600160c01b036001600160401b03948516600160801b90810291821692909217600160801b600160c01b03199093161704909216600160c01b02919091179055506101978054780a0000000000000000000000000000000200000000000000006001600160d01b031990911617905561019880546001600160401b03191660051790556200037f565b60005b606460ff82161015620002625760008260ff8316606481106200019f576200019f6200031e565b60006002919091029190910190815560018082018054600164ffff00000160401b0319166cff000000000000000000000000179055909150606490620001e790849062000334565b60ff1610620001f85760ff62000205565b6200020582600162000334565b600191909101805463ff0000ff60501b19166d010000000000000000000000000060ff9384160260ff60501b1916176a0100000000000000000000928416929092029190911790558062000259816200035c565b91505062000178565b5060c801805463ffffffff191663ffff0000179055565b6000602082840312156200028c57600080fd5b81516001600160a01b0381168114620002a457600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0382811684821681151582840482111615620002ea57620002ea620002ab565b02949350505050565b60006001600160401b0383811690831681811015620003165762000316620002ab565b039392505050565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff84168060ff03821115620003545762000354620002ab565b019392505050565b600060ff821660ff811415620003765762000376620002ab565b60010192915050565b61279b806200038f6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806373d6aafa116100f9578063c28bd11c11610097578063f5d4d8a111610071578063f5d4d8a114610331578063f7f595fb14610353578063f883fcaa146102f0578063fc47e2091461036657600080fd5b8063c28bd11c146102f0578063c28cedf314610310578063c6088d971461032857600080fd5b8063a2157767116100d3578063a2157767146102f8578063a5c9cd8214610300578063b313bd6214610308578063b91268e81461028b57600080fd5b806373d6aafa146102e85780637fb01232146102f05780639d941362146102e857600080fd5b8063345af97711610166578063479e92c811610140578063479e92c8146102a9578063504b3662146102b157806357dce6ff146102b95780635b7f415c146102e057600080fd5b8063345af977146102785780633a3a7c531461028b5780633e6e387c146102a157600080fd5b806314270b65116101a257806314270b651461020b5780631df55679146102305780631e7bfd601461024557806330db4fa01461025857600080fd5b806306e38632146101c95780630bf43309146101e9578063132e12c414610203575b600080fd5b6101d1600581565b60405161ffff90911681526020015b60405180910390f35b6101f160d081565b60405160ff90911681526020016101e0565b6101f161036f565b6001546001600160a01b03165b6040516001600160a01b0390911681526020016101e0565b61024361023e366004611f68565b610566565b005b600254610218906001600160a01b031681565b61026060c881565b6040516001600160401b0390911681526020016101e0565b6101f1610286366004611fa7565b610693565b610293610cbb565b6040519081526020016101e0565b6101d1600281565b6101f1600a81565b6101f1606481565b6102cc6102c7366004611fda565b610cd5565b6040516101e09897969594939291906120ec565b6101f1601281565b6101d1600a81565b6101f1600281565b6101f160ff81565b610293610d98565b610260600281565b610318600181565b60405190151581526020016101e0565b6101d16103e881565b61034461033f3660046121cb565b610da4565b6040516101e0939291906121e6565b610243610361366004612266565b610f81565b610260612cbe81565b60cc54600090606460ff909116101580610392575061019554606460ff90911610155b1561039d5750600090565b6101965443906001600160401b03600160c01b9091048116908216116103c557600091505090565b61019754610196546000916001600160401b03600160401b909104811691600160c01b90041660016103f783866122b3565b61040191906122de565b61040b91906122de565b6104159190612306565b9050600060c86001600160401b0384161161043157600061043c565b61043c60c8846122de565b610197549091506001600160401b0390811690821681101561045b5750805b836001600160401b0316816001600160401b031611156104d65760405162461bcd60e51b815260206004820152602b60248201527f4661696c65643a206e657874446f6e6f72426c6f636b4e756d626572203c3d2060448201526a313637b1b5a73ab6b132b960a91b60648201526084015b60405180910390fd5b60006104e282866122de565b9050836001600160401b0316816001600160401b03161015610502578093505b60c86001600160401b038516111561055c5760405162461bcd60e51b815260206004820152601f60248201527f4661696c65643a20636e74203c3d204d41585f444f4e4f525f424c4f434b530060448201526064016104cd565b5091949350505050565b6000546001600160a01b031633146105e65760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79547275737465653a206f6e6c792063726561746f722063616e20617460448201527f746163682061207472757374656520636f6e747261637400000000000000000060648201526084016104cd565b6001546001600160a01b0316156106655760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c79547275737465653a20746865207472757374656520636f6e7472616360448201527f742068617320616c7265616479206265656e206174746163686564000000000060648201526084016104cd565b600080546001600160a01b0319908116909155600180549091166001600160a01b0392909216919091179055565b6000438160c86001600160401b038316116106af5760006106ba565b6106ba60c8836122de565b610197549091506001600160401b03808316911610156106f257610197805467ffffffffffffffff19166001600160401b0383161790555b610197546001600160401b03808416911611156107665760405162461bcd60e51b815260206004820152602c60248201527f4661696c65643a205f6e657874446f6e6f72426c6f636b4e756d626572203c3d60448201526b10313637b1b5a73ab6b132b960a11b60648201526084016104cd565b60005b8460ff168160ff1610801561078c5750610197546001600160401b038085169116105b80156107ad5750610196546001600160401b03808516600160c01b90920416105b80156107c0575060cc54606460ff909116105b80156107d4575061019554606460ff909116105b15610cb357610197546001600160401b03168040806108355760405162461bcd60e51b815260206004820152601860248201527f4d697373696e6720626c6f636b68617368206e756d626572000000000000000060448201526064016104cd565b60408051602081018390523391810191909152306060820152466001600160401b03871618608082015260009060a001604051602081830303815290604052905080516080146108c05760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206368616c6c656e6765206461746160501b60448201526064016104cd565b8051602082012060fc81901c600214156109815760408051828152600160208201526001600160401b038916917f0201a994d37c39c51a0f109a274f5d1867257813e46eddac7acbea5ea28341f5910160405180910390a261093660cd858361019760189054906101000a900461ffff16611193565b6101968054600160401b90046001600160401b03169060086109578361233a565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050610a23565b60408051828152600060208201526001600160401b038916917f0201a994d37c39c51a0f109a274f5d1867257813e46eddac7acbea5ea28341f5910160405180910390a26109e36004858361019760189054906101000a900461ffff16611193565b61019680546001600160401b03169060006109fd8361233a565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550505b61019780546001600160401b0316906000610a3d8361233a565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505061019760089054906101000a90046001600160401b031661019660188282829054906101000a90046001600160401b0316610a9d91906122b3565b82546001600160401b039182166101009390930a928302919092021990911617905550610197546103e8600160c01b90910461ffff161015610be95761019854610196546001600160401b03918216911610610be457600a61019760188282829054906101000a900461ffff16610b149190612361565b92506101000a81548161ffff021916908361ffff1602179055506001610b3c57610a8c610b3f565b60055b610198805461ffff9290921691600090610b639084906001600160401b03166122b3565b82546001600160401b039182166101009390930a928302919092021990911617905550610197546103e8600160c01b90910461ffff1610610be457610198805467ffffffffffffffff19169055610bbc612cbe886122b3565b61019760106101000a8154816001600160401b0302191690836001600160401b031602179055505b610c9d565b610197546001600160401b03600160801b909104811690881610610c9d57600261019760088282829054906101000a90046001600160401b0316610c2d91906122b3565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550612cbe61019760108282829054906101000a90046001600160401b0316610c7891906122b3565b92506101000a8154816001600160401b0302191690836001600160401b031602179055505b84610ca78161237e565b95505050505050610769565b949350505050565b610cc76003601261239e565b610cd290600a61249d565b81565b6000606080606080606080606060008a610cf0576004610cf3565b60cd5b9050610cff818b61140d565b60035460405163731fd3f760e01b8152969f50949d50929b50909950975095506001600160a01b03169063731fd3f790610d3f908a9033906004016124ac565b600060405180830381865afa158015610d5c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d8491908101906125b3565b999c989b5096995094979396929594505050565b610cd26012600a61249d565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101829052908080610dea6004866117e6565b9250905060ff8082161415610e0d57610e0460cd866117e6565b60019450925090505b60ff8181161415610e985760405162461bcd60e51b815260206004820152604960248201527f4368616c6c656e67652077697468207468697320626c6f636b4e756d6265722060448201527f646f65736e2774206578697374206f7220686173206265656e20636c61696d656064820152686420616c726561647960b81b608482015260a4016104cd565b610eb083610ea7576004610eaa565b60cd5b82611a64565b6040805160e081018252825481526001909201546001600160401b038082166020850181905261ffff600160401b8404169385019390935260ff600160501b830481166060860152600160581b8304811615156080860152600160601b8304811660a0860152600160681b90920490911660c084015291955090861614610f795760405162461bcd60e51b815260206004820181905260248201527f436f727275707420626c6f636b4e756d62657220696e206368616c6c656e676560448201526064016104cd565b509193909250565b6001546001600160a01b03163314610ff75760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79547275737465653a206f6e6c7920747275737465652063616e20657860448201527232b1baba32903a3434b990333ab731ba34b7b760691b60648201526084016104cd565b600081611005576004611008565b60cd5b905060008061101783866117e6565b909250905060ff808316141561106f5760405162461bcd60e51b815260206004820152601960248201527f436f7272757074206368616c6c656e6765207265636f7264730000000000000060448201526064016104cd565b60ff8116600a11801590611087575060d060ff821611155b6110d35760405162461bcd60e51b815260206004820152601a60248201527f446966666963756c7479206973206f7574206f662072616e676500000000000060448201526064016104cd565b6110dd8383611b7d565b60006110e96004611e4d565b905060006110f760cd611e4d565b6003549091506001600160a01b031663910eb1ce6001600160401b03808416908516106111245782611126565b835b6040516001600160e01b031960e084901b1681526001600160401b039091166004820152602401600060405180830381600087803b15801561116757600080fd5b505af115801561117b573d6000803e3d6000fd5b50505050611189600a610693565b5050505050505050565b60c8840154606460ff909116106111fc5760405162461bcd60e51b815260206004820152602760248201527f4368616c6c656e67655265636f7264733a204368616c6c656e676520736574206044820152661a5cc8199d5b1b60ca1b60648201526084016104cd565b60c8840154610100900460ff16606481106112295760405162461bcd60e51b81526004016104cd9061267f565b60006112358683611a64565b6001810154909150600160581b900460ff16156112b15760405162461bcd60e51b815260206004820152603460248201527f4368616c6c656e67655265636f7264733a20636f7272757074206368616c6c656044820152731b99d9481a5d195b481a5b88199c9959531a5cdd60621b60648201526084016104cd565b60018101805460c88801805461ff001916610100600160681b90930460ff908116939093021781558684558254600160581b6001600160401b038a1669ffffffffffffffffffff1990921691909117600160401b61ffff8916021760ff60581b19811682178555825460ff60681b61ffff60581b199092166301000000918290048616600160601b021790921760ff60681b191617909355549190910481161461138d576000611372878860c80160039054906101000a900460ff16611a64565b600101805460ff60681b1916600160681b60ff861602179055505b60c88601805460ff80851663010000000263ff00000019909216919091179182905562010000909104811614156113d75760c88601805462ff000019166201000060ff8516021790555b60c88601805460ff169060006113ec8361237e565b91906101000a81548160ff021916908360ff16021790555050505050505050565b6000606080606080606060008860c80160009054906101000a900460ff1660ff168860ff16106114445760c889015460ff16611446565b875b60c88a015460ff908116985090915081166001600160401b0381111561146e5761146e6124d6565b604051908082528060200260200182016040528015611497578160200160208202803683370190505b5095508060ff166001600160401b038111156114b5576114b56124d6565b6040519080825280602002602001820160405280156114de578160200160208202803683370190505b5094508060ff166001600160401b038111156114fc576114fc6124d6565b604051908082528060200260200182016040528015611525578160200160208202803683370190505b5092508060ff166001600160401b03811115611543576115436124d6565b60405190808252806020026020018201604052801561156c578160200160208202803683370190505b5091508060ff166001600160401b0381111561158a5761158a6124d6565b6040519080825280602002602001820160405280156115b3578160200160208202803683370190505b5060c88a015490945062010000900460ff1660005b8260ff168160ff1610156117585760006115e28c84611a64565b6040805160e081018252825481526001909201546001600160401b038116602084015261ffff600160401b8204169183019190915260ff600160501b8204811660608401819052600160581b8304821615156080850152600160601b8304821660a0850152600160681b909204811660c08401528b5192935090918b918516908110611670576116706126c2565b602002602001019060ff16908160ff16815250508060200151888360ff168151811061169e5761169e6126c2565b60200260200101906001600160401b031690816001600160401b0316815250508060400151878360ff16815181106116d8576116d86126c2565b602002602001019061ffff16908161ffff16815250508060000151868360ff1681518110611708576117086126c2565b6020026020010181815250508060c00151858360ff168151811061172e5761172e6126c2565b60ff9092166020928302919091019091015260c001519150806117508161237e565b9150506115c8565b5060c88a015460ff908116908a161080611774575060ff818116145b6117da5760405162461bcd60e51b815260206004820152603160248201527f4368616c6c656e67655265636f7264732e5f6368616c6c656e6765476574416c6044820152701b0a0a4e8818dbdc9c9d5c1d081b1a5cdd607a1b60648201526084016104cd565b50509295509295509295565b60c8820154600090819060ff16606481111561187b5760405162461bcd60e51b815260206004820152604860248201527f4368616c6c656e67655265636f7264733a20496e76616c696420636f6e66696760448201527f75726174696f6e3a20636e74203c3d204d41585f4348414c4c454e47455f434e606482015267150819985a5b195960c21b608482015260a4016104cd565b60c885015462010000900460ff16925060009150815b8160ff168160ff161015611a385760006118ab8786611a64565b6040805160e081018252825481526001909201546001600160401b038082166020850181905261ffff600160401b8404169385019390935260ff600160501b830481166060860152600160581b8304811615156080860152600160601b8304811660a0860152600160681b90920490911660c08401529192509087161415611a2057806060015160ff168560ff16146119565760405162461bcd60e51b81526004016104cd906126d8565b6001611962838561239e565b61196c919061239e565b611977906002612727565b6119829060d061239e565b935060ff8416600a1180159061199c575060d060ff851611155b611a185760405162461bcd60e51b815260206004820152604160248201527f4368616c6c656e67655265636f7264732e5f6368616c6c656e676546696e642860448201527f293a2067656e6572616c446966666963756c7479206f7574206f662072616e676064820152606560f81b608482015260a4016104cd565b505050611a5d565b60c00151935080611a308161237e565b915050611891565b5060ff83811614611a5b5760405162461bcd60e51b81526004016104cd906126d8565b505b9250929050565b6000606460ff831610611adf5760405162461bcd60e51b815260206004820152603760248201527f4368616c6c656e67655265636f7264732e5f6368616c6c656e6765476574282960448201527f3a20696e646578206973206f7574206f662072616e676500000000000000000060648201526084016104cd565b60008360ff841660648110611af657611af66126c2565b6002020190508260ff1681600101600a9054906101000a900460ff1660ff1614611b745760405162461bcd60e51b815260206004820152602960248201527f4368616c6c656e67655265636f7264733a20636f7272757074206368616c6c656044820152680dcceca40d2dcc8caf60bb1b60648201526084016104cd565b90505b92915050565b60c882015460ff16611be25760405162461bcd60e51b815260206004820152602860248201527f4368616c6c656e67655265636f7264733a204368616c6c656e67652073657420604482015267697320656d70747960c01b60648201526084016104cd565b6000611bee8383611a64565b6001810154909150600160581b900460ff16611c5c5760405162461bcd60e51b815260206004820152602760248201527f4368616c6c656e67655265636f7264733a2072656d6f76696e6720696e76616c6044820152666964206974656d60c81b60648201526084016104cd565b6001810154600160601b900460ff90811614611cb7576000611c8f8483600101600c9054906101000a900460ff16611a64565b6001838101549101805460ff60681b1916600160681b9283900460ff16909202919091179055505b6001810154600160681b900460ff90811614611d12576000611cea8483600101600d9054906101000a900460ff16611a64565b6001838101549101805460ff60601b1916600160601b9283900460ff16909202919091179055505b60c883015460ff83811662010000909204161415611d5257600181015460c88401805462ff00001916600160681b90920460ff1662010000029190911790555b60c883015460ff8381166301000000909204161415611d9557600181015460c88401805463ff0000001916600160601b90920460ff166301000000029190911790555b60c8830154610100900460ff166064811080611db3575060ff818116145b611dcf5760405162461bcd60e51b81526004016104cd9061267f565b600080835560018301805460ff848116600160681b026dffffff00ffffffffffffffffffff199092169190911760ff60601b1790915560c8860180548683166101000261ff0019821681178355831692169190911791611e2e83612748565b91906101000a81548160ff021916908360ff1602179055505050505050565b60c881015460009060ff62010000909104811690811415611e7057439150611f62565b6000611e7c8483611a64565b6040805160e081018252825481526001909201546001600160401b038116602084015261ffff600160401b8204169183019190915260ff600160501b820481166060840152600160581b82048116151560808401819052600160601b8304821660a0850152600160681b9092041660c0830152909150611f5b5760405162461bcd60e51b815260206004820152603460248201527f4368616c6c656e67655265636f7264733a20636f7272757074206368616c6c656044820152731b99d9481a5d195b481a5b881d1a19481b1a5cdd60621b60648201526084016104cd565b6020015191505b50919050565b600060208284031215611f7a57600080fd5b81356001600160a01b0381168114611b7457600080fd5b803560ff81168114611fa257600080fd5b919050565b600060208284031215611fb957600080fd5b611fc282611f91565b9392505050565b8015158114611fd757600080fd5b50565b60008060408385031215611fed57600080fd5b8235611ff881611fc9565b915061200660208401611f91565b90509250929050565b600081518084526020808501945080840160005b8381101561204257815160ff1687529582019590820190600101612023565b509495945050505050565b600081518084526020808501945080840160005b838110156120425781516001600160401b031687529582019590820190600101612061565b600081518084526020808501945080840160005b8381101561204257815161ffff168752958201959082019060010161209a565b600081518084526020808501945080840160005b838110156120425781511515875295820195908201906001016120ce565b600061010060ff8b1683526020818185015261210a8285018c61200f565b9150838203604085015261211e828b61204d565b91508382036060850152612132828a612086565b84810360808601528851808252828a0193509082019060005b818110156121675784518352938301939183019160010161214b565b505084810360a086015261217b818961200f565b9250505082810360c08401526121918186612086565b905082810360e08401526121a581856120ba565b9b9a5050505050505050505050565b80356001600160401b0381168114611fa257600080fd5b6000602082840312156121dd57600080fd5b611fc2826121b4565b600061012082019050845182526001600160401b03602086015116602083015261ffff604086015116604083015260ff606086015116606083015260808501511515608083015260ff60a08601511660a083015260c085015161224e60c084018260ff169052565b5083151560e083015260ff8316610100830152610cb3565b6000806040838503121561227957600080fd5b612282836121b4565b9150602083013561229281611fc9565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b038083168185168083038211156122d5576122d561229d565b01949350505050565b60006001600160401b03838116908316818110156122fe576122fe61229d565b039392505050565b60006001600160401b038084168061232e57634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b60006001600160401b03808316818114156123575761235761229d565b6001019392505050565b600061ffff8083168185168083038211156122d5576122d561229d565b600060ff821660ff8114156123955761239561229d565b60010192915050565b600060ff821660ff8416808210156123b8576123b861229d565b90039392505050565b600181815b80851115611a5b5781600019048211156123e2576123e261229d565b808516156123ef57918102915b93841c93908002906123c6565b60008261240b57506001611b77565b8161241857506000611b77565b816001811461242e576002811461243857612454565b6001915050611b77565b60ff8411156124495761244961229d565b50506001821b611b77565b5060208310610133831016604e8410600b8410161715612477575081810a611b77565b61248183836123c1565b80600019048211156124955761249561229d565b029392505050565b6000611fc260ff8416836123fc565b6040815260006124bf604083018561204d565b905060018060a01b03831660208301529392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612514576125146124d6565b604052919050565b60006001600160401b03821115612535576125356124d6565b5060051b60200190565b600082601f83011261255057600080fd5b815160206125656125608361251c565b6124ec565b82815260059290921b8401810191818101908684111561258457600080fd5b8286015b848110156125a857805161259b81611fc9565b8352918301918301612588565b509695505050505050565b600080604083850312156125c657600080fd5b82516001600160401b03808211156125dd57600080fd5b818501915085601f8301126125f157600080fd5b815160206126016125608361251c565b82815260059290921b8401810191818101908984111561262057600080fd5b948201945b8386101561264f57855161ffff811681146126405760008081fd5b82529482019490820190612625565b9188015191965090935050508082111561266857600080fd5b506126758582860161253f565b9150509250929050565b60208082526023908201527f4368616c6c656e67655265636f7264733a20636f72727570742066726565496e6040820152620c8caf60eb1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6020808252602f908201527f4368616c6c656e67655265636f7264732e5f6368616c6c656e676546696e642860408201526e0a4e8818dbdc9c9d5c1d081b1a5cdd608a1b606082015260800190565b600060ff821660ff84168160ff04811182151516156124955761249561229d565b600060ff82168061275b5761275b61229d565b600019019291505056fea26469706673582212200046f7d6cebe2f70f916886bed5848ddfd728609afbc3f7ce4417608e9c7e0c964736f6c634300080b0033",L=t(182),M=function(e){Object(w.a)(t,e);var n=Object(_.a)(t);function t(e){return Object(h.a)(this,t),n.call(this,I,x,e)}return Object(g.a)(t,[{key:"deploy",value:function(e,n){return Object(v.a)(Object(T.a)(t.prototype),"deploy",this).call(this,e,n||{})}},{key:"getDeployTransaction",value:function(e,n){return Object(v.a)(Object(T.a)(t.prototype),"getDeployTransaction",this).call(this,e,n||{})}},{key:"attach",value:function(e){return Object(v.a)(Object(T.a)(t.prototype),"attach",this).call(this,e)}},{key:"connect",value:function(e){return Object(v.a)(Object(T.a)(t.prototype),"connect",this).call(this,e)}}],[{key:"connect",value:function(e,n){return new C.b(e,I,n)}}]),t}(C.c),I=[{inputs:[{internalType:"address",name:"marketingAddr_",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[{internalType:"uint64",name:"",type:"uint64"},{internalType:"address",name:"miner",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint32",name:"",type:"uint32"},{internalType:"uint8",name:"",type:"uint8"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"uint256",name:"",type:"uint256"}],name:"_claim",outputs:[{internalType:"address payable[]",name:"recipients",type:"address[]"},{internalType:"uint256[]",name:"tokenCommisions",type:"uint256[]"},{internalType:"uint256[]",name:"ethCommisions",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"user",type:"address"}],name:"_hasReferral",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"referrer",type:"address"},{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"uint256",name:"",type:"uint256"}],name:"_referral",outputs:[{internalType:"address payable[]",name:"recipients",type:"address[]"},{internalType:"uint256[]",name:"tokenCommisions",type:"uint256[]"},{internalType:"uint256[]",name:"ethCommisions",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"claimsCnt",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"hasReferral",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"marketingAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"referralsCnt",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"}],x="0x608060405234801561001057600080fd5b50604051610c27380380610c2783398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610b94806100936000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806348d497c71161005b57806348d497c7146100fa5780634fe309701461010d57806356494faa14610139578063c142fed81461014c57600080fd5b806303c9f1e7146100825780633f2ee795146100ad5780633ff42b92146100df575b600080fd5b6100956100903660046108a8565b61015f565b6040516100a49392919061097d565b60405180910390f35b6000546100c790600160a01b90046001600160401b031681565b6040516001600160401b0390911681526020016100a4565b6000546040516001600160a01b0390911681526020016100a4565b6100956101083660046109f2565b61049e565b336000908152600260205260409020546001600160a01b031615155b60405190151581526020016100a4565b610129610147366004610a34565b610842565b6001546100c7906001600160401b031681565b60608080336001600160a01b031661017f6000546001600160a01b031690565b6001600160a01b0316146101ae5760405162461bcd60e51b81526004016101a590610a56565b60405180910390fd5b600180546001600160401b03169060006101c783610ac9565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050876001600160a01b0316896001600160a01b031614801561022657506001600160a01b03881660009081526003602052604090205460ff16155b15610491576001600160a01b038089166000908152600260205260408120549091169081610255576001610258565b60025b90508060ff166001600160401b0381111561027557610275610af0565b60405190808252806020026020018201604052801561029e578160200160208202803683370190505b5094508060ff166001600160401b038111156102bc576102bc610af0565b6040519080825280602002602001820160405280156102e5578160200160208202803683370190505b5093508060ff166001600160401b0381111561030357610303610af0565b60405190808252806020026020018201604052801561032c578160200160208202803683370190505b50925060008a868260ff168151811061034757610347610b06565b6001600160a01b0390921660209283029190910190910152610372600a670de0b6b3a7640000610b1c565b858260ff168151811061038757610387610b06565b60209081029190910101526103a5600a670de0b6b3a7640000610b1c565b8b6001600160a01b03163110156103eb576103c9600a670de0b6b3a7640000610b1c565b848260ff16815181106103de576103de610b06565b6020026020010181815250505b6001600160a01b0383161561046a578061040481610b3e565b91505082868260ff168151811061041d5761041d610b06565b6001600160a01b0390921660209283029190910190910152610448600a670de0b6b3a7640000610b1c565b858260ff168151811061045d5761045d610b06565b6020026020010181815250505b5050506001600160a01b0388166000908152600360205260409020805460ff191660011790555b9750975097945050505050565b60608080336001600160a01b03166104be6000546001600160a01b031690565b6001600160a01b0316146104e45760405162461bcd60e51b81526004016101a590610a56565b856001600160a01b0316876001600160a01b031614156105515760405162461bcd60e51b815260206004820152602260248201527f52656665727265722063616e6e6f7420626520726566657272616c2073656e6460448201526132b960f11b60648201526084016101a5565b6001600160a01b0386811660009081526002602052604090205416156105c95760405162461bcd60e51b815260206004820152602760248201527f4f6e6c79206f6e6520726566657272616c207065722073656e64657220697320604482015266185b1b1bddd95960ca1b60648201526084016101a5565b60008054600160a01b90046001600160401b03169060146105e983610ac9565b82546001600160401b039182166101009390930a9283029190920219909116179055506040805160028082526060820183529182906020830190803683370190505093508060ff166001600160401b0381111561064857610648610af0565b604051908082528060200260200182016040528015610671578160200160208202803683370190505b5092508060ff166001600160401b0381111561068f5761068f610af0565b6040519080825280602002602001820160405280156106b8578160200160208202803683370190505b509150600088858260ff16815181106106d3576106d3610b06565b6001600160a01b03909216602092830291909101909101526106fe600a670de0b6b3a7640000610b1c565b848260ff168151811061071357610713610b06565b6020026020010181815250506000838260ff168151811061073657610736610b06565b60209081029190910101528061074b81610b3e565b91505087858260ff168151811061076457610764610b06565b6001600160a01b039092166020928302919091019091015261078f600a670de0b6b3a7640000610b1c565b848260ff16815181106107a4576107a4610b06565b60209081029190910101526107c2600a670de0b6b3a7640000610b1c565b886001600160a01b0316311015610808576107e6600a670de0b6b3a7640000610b1c565b838260ff16815181106107fb576107fb610b06565b6020026020010181815250505b50506001600160a01b0395861660009081526002602052604090208054969097166001600160a01b03199096169590951790955594915050565b600080546001600160a01b0316331461086d5760405162461bcd60e51b81526004016101a590610a56565b506001600160a01b038181166000908152600260205260409020541615155b919050565b80356001600160a01b038116811461088c57600080fd5b600080600080600080600060e0888a0312156108c357600080fd5b87356001600160401b03811681146108da57600080fd5b96506108e860208901610891565b95506108f660408901610891565b9450606088013563ffffffff8116811461090f57600080fd5b9350608088013560ff8116811461092557600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600081518084526020808501945080840160005b8381101561097257815187529582019590820190600101610956565b509495945050505050565b606080825284519082018190526000906020906080840190828801845b828110156109bf5781516001600160a01b03168452928401929084019060010161099a565b505050838103828501526109d38187610942565b91505082810360408401526109e88185610942565b9695505050505050565b60008060008060808587031215610a0857600080fd5b610a1185610891565b9350610a1f60208601610891565b93969395505050506040820135916060013590565b600060208284031215610a4657600080fd5b610a4f82610891565b9392505050565b60208082526037908201527f4f6e6c794d61726b6574696e673a206f6e6c79206d61726b6574696e6720636160408201527f6e206578656375746520746869732066756e6374696f6e000000000000000000606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0380831681811415610ae657610ae6610ab3565b6001019392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600082610b3957634e487b7160e01b600052601260045260246000fd5b500490565b600060ff821660ff811415610b5557610b55610ab3565b6001019291505056fea26469706673582212208e7128a19127e553b3b20615da58b8ff7236aca6775145432abb39f8619e425064736f6c634300080b0033",N=t(183),R=function(e){Object(w.a)(t,e);var n=Object(_.a)(t);function t(e){return Object(h.a)(this,t),n.call(this,O,S,e)}return Object(g.a)(t,[{key:"deploy",value:function(e,n){return Object(v.a)(Object(T.a)(t.prototype),"deploy",this).call(this,e,n||{})}},{key:"getDeployTransaction",value:function(e,n){return Object(v.a)(Object(T.a)(t.prototype),"getDeployTransaction",this).call(this,e,n||{})}},{key:"attach",value:function(e){return Object(v.a)(Object(T.a)(t.prototype),"attach",this).call(this,e)}},{key:"connect",value:function(e){return Object(v.a)(Object(T.a)(t.prototype),"connect",this).call(this,e)}}],[{key:"connect",value:function(e,n){return new C.b(e,O,n)}}]),t}(C.c),O=[{inputs:[{internalType:"address",name:"tokenAddr_",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"campaignAddr",type:"address"},{indexed:!1,internalType:"uint64",name:"blockNumber",type:"uint64"},{indexed:!1,internalType:"string",name:"message",type:"string"}],name:"CampaignClaimFailed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"campaignAddr",type:"address"},{indexed:!1,internalType:"address",name:"tokenAddr",type:"address"},{indexed:!1,internalType:"string",name:"message",type:"string"}],name:"TokenCallFailed",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"},{inputs:[],name:"BLOCKS_PER_CHALLENGE",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"BLOCKS_PER_CHALLENGE_INC",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"BLOCKS_PER_WEEK",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"CHALLENGE_DIFFICULTY_STEP",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"CHALLENGE_NULL",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"DEMO",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"LUCKY_NUMBER",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_CHALLENGE_CNT",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_CHALLENGE_DIFFICULTY",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_DONOR_BLOCKS",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"MINERS_CLAIM_MIN_RECIPIENT_BALANCE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"MIN_CHALLENGE_DIFFICULTY",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARDS_CNT_LIMIT",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_INC_INTERVAL",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNIT",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNITS_INC",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNITS_STANDARD",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNITS_START",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"TOKEN_DECIMALS",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"TOKEN_UNIT",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint64",name:"blockNumber",type:"uint64"},{internalType:"address",name:"miner",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint32",name:"rewardUnits",type:"uint32"},{internalType:"uint8",name:"commisionPrc",type:"uint8"}],name:"_claim",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"campaignAddr",type:"address"},{internalType:"uint256",name:"tokenBudget",type:"uint256"},{internalType:"uint256",name:"ethBudget",type:"uint256"}],name:"addBudget",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"campaignAddr",type:"address"}],name:"addCampaign",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"trusteeAddr_",type:"address"}],name:"attachTrustee",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"campaignAddr",type:"address"}],name:"getCampaign",outputs:[{internalType:"uint256",name:"tokenBudget",type:"uint256"},{internalType:"uint256",name:"ethBudget",type:"uint256"},{internalType:"uint8",name:"campaignId",type:"uint8"},{internalType:"bool",name:"valid",type:"bool"},{internalType:"bool",name:"active",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"getCampaigns",outputs:[{internalType:"address[]",name:"campaigns",type:"address[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"campaignAddr",type:"address"}],name:"hasReferral",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"campaignAddr",type:"address"},{internalType:"address",name:"referrer",type:"address"}],name:"referral",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"campaignAddr",type:"address"}],name:"removeBudget",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"campaignAddr",type:"address"}],name:"removeCampaign",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"campaignAddr",type:"address"}],name:"startCampaign",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"campaignAddr",type:"address"}],name:"stopCampaign",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"tokenAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"trusteeAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],S="0x60806040523480156200001157600080fd5b50604051620028ca380380620028ca833981016040819052620000349162000240565b6200003f3362000098565b6000805460ff60a01b19169055600180546001600160a01b0319163317905562000068620000e8565b600380546001600160a01b039092166001600160a01b031992831681179091556004805490921617905562000272565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b33620000f362000166565b6001600160a01b0316146200014f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b620001646200018260201b62001a431760201c565b565b60006200017d6200023160201b62001ae81760201c565b905090565b62000196600054600160a01b900460ff1690565b15620001d85760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640162000146565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620002143390565b6040516001600160a01b03909116815260200160405180910390a1565b6000546001600160a01b031690565b6000602082840312156200025357600080fd5b81516001600160a01b03811681146200026b57600080fd5b9392505050565b61264880620002826000396000f3fe60806040526004361061023f5760003560e01c8063777b0c211161012e578063b313bd62116100ab578063e3eddde21161006f578063e3eddde214610664578063e4663a5b14610684578063f2fde38b146106a4578063f883fcaa14610550578063fc47e209146106c457600080fd5b8063b313bd6214610624578063b91268e8146103a1578063c28bd11c14610550578063c28cedf314610639578063c6088d971461064e57600080fd5b80639d941362116100f25780639d9413621461051b578063a2157767146105b8578063a5c9cd82146105cd578063a6b03633146105e2578063ac9c4fd31461060457600080fd5b8063777b0c21146105305780637fb012321461055057806382e51bd0146105655780638456cb59146105855780638da5cb5b1461059a57600080fd5b80633e6e387c116101bc5780635c975abb116101805780635c975abb1461042d5780635fbe4d1d14610458578063715018a614610478578063731301cf1461048d57806373d6aafa1461051b57600080fd5b80633e6e387c146103c45780633f4ba83a146103d9578063479e92c8146103ee578063504b3662146104035780635b7f415c1461041857600080fd5b80631df55679116102035780631df5567914610313578063270d8e0e146103335780632713b9601461035357806330db4fa0146103735780633a3a7c53146103a157600080fd5b806306e386321461024b5780630bf433091461027857806314270b651461029f57806318f053da146102d15780631c505d1d146102f357600080fd5b3661024657005b600080fd5b34801561025757600080fd5b50610260600581565b60405161ffff90911681526020015b60405180910390f35b34801561028457600080fd5b5061028d60d081565b60405160ff909116815260200161026f565b3480156102ab57600080fd5b506002546001600160a01b03165b6040516001600160a01b03909116815260200161026f565b3480156102dd57600080fd5b506102f16102ec366004611ed8565b6106da565b005b3480156102ff57600080fd5b506102f161030e366004611efc565b610888565b34801561031f57600080fd5b506102f161032e366004611ed8565b6109fe565b34801561033f57600080fd5b506102f161034e366004611f35565b610b2b565b34801561035f57600080fd5b506102f161036e366004611f6a565b610d7e565b34801561037f57600080fd5b5061038860c881565b60405167ffffffffffffffff909116815260200161026f565b3480156103ad57600080fd5b506103b66110a4565b60405190815260200161026f565b3480156103d057600080fd5b50610260600281565b3480156103e557600080fd5b506102f16110be565b3480156103fa57600080fd5b5061028d600a81565b34801561040f57600080fd5b5061028d606481565b34801561042457600080fd5b5061028d601281565b34801561043957600080fd5b50600054600160a01b900460ff165b604051901515815260200161026f565b34801561046457600080fd5b506003546102b9906001600160a01b031681565b34801561048457600080fd5b506102f16110f2565b34801561049957600080fd5b506104e96104a8366004611ed8565b6001600160a01b0316600090815260086020526040902080546001820154600290920154909260ff8083169261010081048216926201000090910490911690565b60408051958652602086019490945260ff9092169284019290925290151560608301521515608082015260a00161026f565b34801561052757600080fd5b50610260600a81565b34801561053c57600080fd5b506102f161054b366004611ed8565b611171565b34801561055c57600080fd5b5061028d600281565b34801561057157600080fd5b506102f1610580366004611ed8565b611244565b34801561059157600080fd5b506102f161131c565b3480156105a657600080fd5b506000546001600160a01b03166102b9565b3480156105c457600080fd5b5061028d60ff81565b3480156105d957600080fd5b506103b661134e565b3480156105ee57600080fd5b506105f761135a565b60405161026f9190611ff7565b34801561061057600080fd5b506102f161061f366004611ed8565b6113bc565b34801561063057600080fd5b50610388600281565b34801561064557600080fd5b50610448600181565b34801561065a57600080fd5b506102606103e881565b34801561067057600080fd5b5061044861067f366004611ed8565b61158a565b34801561069057600080fd5b506102f161069f366004611ed8565b61174a565b3480156106b057600080fd5b506102f16106bf366004611ed8565b6119a8565b3480156106d057600080fd5b50610388612cbe81565b6000546001600160a01b0316331461070d5760405162461bcd60e51b815260040161070490612044565b60405180910390fd5b6001600160a01b03811660009081526008602052604090206002810154610100900460ff1661074e5760405162461bcd60e51b815260040161070490612079565b6002810154600780546001600160a01b0385169260ff16908110610774576107746120b0565b6000918252602090912001546001600160a01b0316146107a65760405162461bcd60e51b8152600401610704906120c6565b805460055410156107f45760405162461bcd60e51b8152602060048201526018602482015277496e636f6e73697374656e7420627564676574206461746160401b6044820152606401610704565b806001015460065410156108455760405162461bcd60e51b8152602060048201526018602482015277496e636f6e73697374656e7420627564676574206461746160401b6044820152606401610704565b805460058054600090610859908490612113565b9091555050600181015460068054600090610875908490612113565b9091555050600080825560019091015550565b600054600160a01b900460ff161561089e575050565b6001600160a01b03821660009081526008602052604090206002810154610100900460ff166108df5760405162461bcd60e51b815260040161070490612079565b6002810154600780546001600160a01b0386169260ff16908110610905576109056120b0565b6000918252602090912001546001600160a01b0316146109375760405162461bcd60e51b8152600401610704906120c6565b600281015462010000900460ff16156109f957805460018201546040516348d497c760e01b81526001600160a01b03858116600483015233602483015260448201939093526064810191909152849160009182918291908516906348d497c7906084016000604051808303816000875af11580156109b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109e19190810190612202565b9250925092506109f48786858585611af7565b505050505b505050565b6001546001600160a01b03163314610a7e5760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79547275737465653a206f6e6c792063726561746f722063616e20617460448201527f746163682061207472757374656520636f6e74726163740000000000000000006064820152608401610704565b6002546001600160a01b031615610afd5760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c79547275737465653a20746865207472757374656520636f6e7472616360448201527f742068617320616c7265616479206265656e20617474616368656400000000006064820152608401610704565b600180546001600160a01b0319908116909155600280549091166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610b555760405162461bcd60e51b815260040161070490612044565b6001600160a01b03831660009081526008602052604090206002810154610100900460ff16610b965760405162461bcd60e51b815260040161070490612079565b6002810154600780546001600160a01b0387169260ff16908110610bbc57610bbc6120b0565b6000918252602090912001546001600160a01b031614610bee5760405162461bcd60e51b8152600401610704906120c6565b82600554610bfc91906122f6565b600480546040516370a0823160e01b815230928101929092526001600160a01b0316906370a0823190602401602060405180830381865afa158015610c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c69919061230e565b1015610cb75760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e63650000000000006044820152606401610704565b81600654610cc591906122f6565b471015610d145760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74206574682062616c616e636500000000000000006044820152606401610704565b8260056000828254610d2691906122f6565b925050819055508160066000828254610d3f91906122f6565b9091555050805483908290600090610d589084906122f6565b9250508190555081816001016000828254610d7391906122f6565b909155505050505050565b6002546001600160a01b03163314610df45760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79547275737465653a206f6e6c7920747275737465652063616e20657860448201527232b1baba32903a3434b990333ab731ba34b7b760691b6064820152608401610704565b600054600160a01b900460ff1615610e0b5761109d565b60005b60075463ffffffff8216101561109b57600060078263ffffffff1681548110610e3957610e396120b0565b60009182526020808320909101546001600160a01b03168083526008909152604090912060028101549192509060ff61010090910416610e8b5760405162461bcd60e51b815260040161070490612079565b6002810154600780546001600160a01b0385169260ff16908110610eb157610eb16120b0565b6000918252602090912001546001600160a01b031614610ee35760405162461bcd60e51b8152600401610704906120c6565b600281015462010000900460ff161561108657805460018201546040516303c9f1e760e01b815267ffffffffffffffff8b1660048201526001600160a01b038a81166024830152898116604483015263ffffffff8916606483015260ff8816608483015260a482019390935260c481019190915283918216906303c9f1e79060e4016000604051808303816000875af1925050508015610fa557506040513d6000823e601f3d908101601f19168201604052610fa29190810190612202565b60015b61107357610fb1612327565b806308c379a014156110125750610fc6612343565b80610fd15750611014565b7f1c78fe569029f719914c6066018a968a8ca4d3810eed21ca6d09951cd0a9f590848b836040516110049392919061241a565b60405180910390a150611084565b505b604080516001600160a01b038516815267ffffffffffffffff8b166020820152606081830181905260009082015290517f1c78fe569029f719914c6066018a968a8ca4d3810eed21ca6d09951cd0a9f5909181900360800190a1611084565b6110808686858585611af7565b5050505b505b5050808061109390612457565b915050610e0e565b505b5050505050565b6110b06003601261247b565b6110bb90600a612584565b81565b6000546001600160a01b031633146110e85760405162461bcd60e51b815260040161070490612044565b6110f0611dbf565b565b6000546001600160a01b0316331461111c5760405162461bcd60e51b815260040161070490612044565b600054600160a01b900460ff16156111695760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610704565b6110f0611e43565b6000546001600160a01b0316331461119b5760405162461bcd60e51b815260040161070490612044565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166111dc5760405162461bcd60e51b815260040161070490612079565b6002810154600780546001600160a01b0385169260ff16908110611202576112026120b0565b6000918252602090912001546001600160a01b0316146112345760405162461bcd60e51b8152600401610704906120c6565b600201805462ff00001916905550565b6000546001600160a01b0316331461126e5760405162461bcd60e51b815260040161070490612044565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166112af5760405162461bcd60e51b815260040161070490612079565b6002810154600780546001600160a01b0385169260ff169081106112d5576112d56120b0565b6000918252602090912001546001600160a01b0316146113075760405162461bcd60e51b8152600401610704906120c6565b600201805462ff000019166201000017905550565b6000546001600160a01b031633146113465760405162461bcd60e51b815260040161070490612044565b6110f0611a43565b6110bb6012600a612584565b606060078054806020026020016040519081016040528092919081815260200182805480156113b257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611394575b5050505050905090565b6000546001600160a01b031633146113e65760405162461bcd60e51b815260040161070490612044565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff16156114775760405162461bcd60e51b815260206004820152603660248201527f5468652063616d706169676e2077697468207468697320636f6e7472616374206044820152756164647265737320616c72656164792065786973747360501b6064820152608401610704565b600754610100116114ca5760405162461bcd60e51b815260206004820152601d60248201527f4e6f206d6f72652063616d706169676e732061726520616c6c6f7765640000006044820152606401610704565b60028101805461010061ff00198216811783556007805461ffff1990931660ff938416179091178355805460018101825560008290527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b03871690811790915592548154919216908110611554576115546120b0565b6000918252602090912001546001600160a01b0316146115865760405162461bcd60e51b8152600401610704906120c6565b5050565b60008054600160a01b900460ff16156115e55760405162461bcd60e51b815260206004820181905260248201527f546865206d61726b6574696e6720636f6e7472616374206973207061757365646044820152606401610704565b6001600160a01b03821660009081526008602052604090206002810154610100900460ff166116265760405162461bcd60e51b815260040161070490612079565b6002810154600780546001600160a01b0386169260ff1690811061164c5761164c6120b0565b6000918252602090912001546001600160a01b03161461167e5760405162461bcd60e51b8152600401610704906120c6565b600281015462010000900460ff166116d85760405162461bcd60e51b815260206004820152601a60248201527f5468652063616d706169676e206973206e6f74206163746976650000000000006044820152606401610704565b604051632b24a7d560e11b815233600482015283906001600160a01b038216906356494faa90602401602060405180830381865afa15801561171e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117429190612593565b949350505050565b6000546001600160a01b031633146117745760405162461bcd60e51b815260040161070490612044565b6001600160a01b03811660009081526008602052604090206002810154610100900460ff166117b55760405162461bcd60e51b815260040161070490612079565b6002810154600780546001600160a01b0385169260ff169081106117db576117db6120b0565b6000918252602090912001546001600160a01b03161461180d5760405162461bcd60e51b8152600401610704906120c6565b611816826106da565b600780546000919061182a90600190612113565b8154811061183a5761183a6120b0565b60009182526020808320909101546001600160a01b0316808352600890915260409091206002015490915060ff610100909104166118ba5760405162461bcd60e51b815260206004820152601960248201527f496e636f73697374656e742063616d706169676e2064617461000000000000006044820152606401610704565b600280830180546001600160a01b0384166000908152600860205260409020909201805460ff191660ff938416179055546007805484939192909116908110611905576119056120b0565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506007805480611944576119446125b5565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556002938401805461ff00191690556001600160a01b0394909416815260089093525060408220828155600181019290925501805462ffffff19169055565b6000546001600160a01b031633146119d25760405162461bcd60e51b815260040161070490612044565b6001600160a01b038116611a375760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610704565b611a4081611e73565b50565b600054600160a01b900460ff1615611a905760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610704565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611acb3390565b6040516001600160a01b03909116815260200160405180910390a1565b6000546001600160a01b031690565b60005b835181101561109b576000848281518110611b1757611b176120b0565b6020026020010151905060006001600160a01b0316816001600160a01b031614611dac578351821015611cf4576000848381518110611b5857611b586120b0565b60200260200101519050600081118015611b73575086548111155b15611cf2576004805460405163a9059cbb60e01b81526001600160a01b03858116938201939093526024810184905291169063a9059cbb906044016020604051808303816000875af1925050508015611be9575060408051601f3d908101601f19168201909252611be691810190612593565b60015b611cbe57611bf5612327565b806308c379a01415611c625750611c0a612343565b80611c155750611c64565b6003546040517fa76d52006316997771fc50eef565e7d0432c0e464675710e478b3322568b510991611c54918c916001600160a01b03169085906125cb565b60405180910390a150611cf2565b505b600354604080516001600160a01b038b8116825290921660208301526060828201819052600090830152517fa76d52006316997771fc50eef565e7d0432c0e464675710e478b3322568b51099181900360800190a1611cf2565b5080876000016000828254611cd39190612113565b925050819055508060056000828254611cec9190612113565b90915550505b505b8251821015611dac576000838381518110611d1157611d116120b0565b60200260200101519050600081118015611d2f575080876001015410155b8015611d3b5750804710155b15611daa576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611d76573d6000803e3d6000fd5b5080876001016000828254611d8b9190612113565b925050819055508060066000828254611da49190612113565b90915550505b505b5080611db7816125f7565b915050611afa565b600054600160a01b900460ff16611e0f5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610704565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611acb565b6000546001600160a01b03163314611e6d5760405162461bcd60e51b815260040161070490612044565b6110f060005b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114611a4057600080fd5b600060208284031215611eea57600080fd5b8135611ef581611ec3565b9392505050565b60008060408385031215611f0f57600080fd5b8235611f1a81611ec3565b91506020830135611f2a81611ec3565b809150509250929050565b600080600060608486031215611f4a57600080fd5b8335611f5581611ec3565b95602085013595506040909401359392505050565b600080600080600060a08688031215611f8257600080fd5b853567ffffffffffffffff81168114611f9a57600080fd5b94506020860135611faa81611ec3565b93506040860135611fba81611ec3565b9250606086013563ffffffff81168114611fd357600080fd5b9150608086013560ff81168114611fe957600080fd5b809150509295509295909350565b6020808252825182820181905260009190848201906040850190845b818110156120385783516001600160a01b031683529284019291840191600101612013565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601b908201527f5468652063616d706169676e20646f6573206e6f742065786973740000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252601a908201527f496e636f6e73697374656e742063616d706169676e206c697374000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015612125576121256120fd565b500390565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156121665761216661212a565b6040525050565b600067ffffffffffffffff8211156121875761218761212a565b5060051b60200190565b600082601f8301126121a257600080fd5b815160206121af8261216d565b6040516121bc8282612140565b83815260059390931b85018201928281019150868411156121dc57600080fd5b8286015b848110156121f757805183529183019183016121e0565b509695505050505050565b60008060006060848603121561221757600080fd5b835167ffffffffffffffff8082111561222f57600080fd5b818601915086601f83011261224357600080fd5b815160206122508261216d565b60405161225d8282612140565b83815260059390931b850182019282810191508a84111561227d57600080fd5b948201945b838610156122a457855161229581611ec3565b82529482019490820190612282565b918901519197509093505050808211156122bd57600080fd5b6122c987838801612191565b935060408601519150808211156122df57600080fd5b506122ec86828701612191565b9150509250925092565b60008219821115612309576123096120fd565b500190565b60006020828403121561232057600080fd5b5051919050565b600060033d11156123405760046000803e5060005160e01c5b90565b600060443d10156123515790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561238157505050505090565b82850191508151818111156123995750505050505090565b843d87010160208285010111156123b35750505050505090565b6123c260208286010187612140565b509095945050505050565b6000815180845260005b818110156123f3576020818501810151868301820152016123d7565b81811115612405576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038416815267ffffffffffffffff8316602082015260606040820181905260009061244e908301846123cd565b95945050505050565b600063ffffffff80831681811415612471576124716120fd565b6001019392505050565b600060ff821660ff841680821015612495576124956120fd565b90039392505050565b600181815b808511156124d95781600019048211156124bf576124bf6120fd565b808516156124cc57918102915b93841c93908002906124a3565b509250929050565b6000826124f05750600161257e565b816124fd5750600061257e565b8160018114612513576002811461251d57612539565b600191505061257e565b60ff84111561252e5761252e6120fd565b50506001821b61257e565b5060208310610133831016604e8410600b841016171561255c575081810a61257e565b612566838361249e565b806000190482111561257a5761257a6120fd565b0290505b92915050565b6000611ef560ff8416836124e1565b6000602082840312156125a557600080fd5b81518015158114611ef557600080fd5b634e487b7160e01b600052603160045260246000fd5b6001600160a01b0384811682528316602082015260606040820181905260009061244e908301846123cd565b600060001982141561260b5761260b6120fd565b506001019056fea264697066735822122039cb53aa3b47ef01eaff7d8712c0d949941803e77b5f2cd54375f19a27d07ffc64736f6c634300080b0033",D=t(184),B=function(e){Object(w.a)(t,e);var n=Object(_.a)(t);function t(e){return Object(h.a)(this,t),n.call(this,U,P,e)}return Object(g.a)(t,[{key:"deploy",value:function(e){return Object(v.a)(Object(T.a)(t.prototype),"deploy",this).call(this,e||{})}},{key:"getDeployTransaction",value:function(e){return Object(v.a)(Object(T.a)(t.prototype),"getDeployTransaction",this).call(this,e||{})}},{key:"attach",value:function(e){return Object(v.a)(Object(T.a)(t.prototype),"attach",this).call(this,e)}},{key:"connect",value:function(e){return Object(v.a)(Object(T.a)(t.prototype),"connect",this).call(this,e)}}],[{key:"connect",value:function(e,n){return new C.b(e,U,n)}}]),t}(C.c),U=[{inputs:[],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"wallet",type:"address"},{indexed:!1,internalType:"uint8",name:"commisionPrc",type:"uint8"}],name:"Commision",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"wallet",type:"address"},{indexed:!1,internalType:"uint64",name:"blockNumber",type:"uint64"},{indexed:!1,internalType:"uint256",name:"balance",type:"uint256"}],name:"RegisteredBalance",type:"event"},{inputs:[],name:"BLOCKS_PER_CHALLENGE",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"BLOCKS_PER_CHALLENGE_INC",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"BLOCKS_PER_WEEK",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"CHALLENGE_DIFFICULTY_STEP",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"CHALLENGE_NULL",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"DEMO",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"LUCKY_NUMBER",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_CHALLENGE_CNT",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_CHALLENGE_DIFFICULTY",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_DONOR_BLOCKS",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"MINERS_CLAIM_MIN_RECIPIENT_BALANCE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"MIN_CHALLENGE_DIFFICULTY",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARDS_CNT_LIMIT",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_INC_INTERVAL",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNIT",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNITS_INC",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNITS_STANDARD",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNITS_START",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"TOKEN_DECIMALS",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"TOKEN_UNIT",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint64",name:"blockNumber",type:"uint64"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint32",name:"rewardUnits",type:"uint32"}],name:"_addClaim",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"wallet",type:"address"},{internalType:"uint256",name:"balance",type:"uint256"},{internalType:"bool",name:"force",type:"bool"}],name:"_registerBalance",outputs:[{internalType:"bool",name:"registered",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"wallet",type:"address"},{internalType:"uint256",name:"balance",type:"uint256"}],name:"_updateBalance",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint64",name:"firstBlockNumber_",type:"uint64"}],name:"_updateFirstBlockNumber",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"adminAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"adminAddr_",type:"address"}],name:"attachAdmin",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"tokenAddr_",type:"address"}],name:"attachToken",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"trusteeAddr_",type:"address"}],name:"attachTrustee",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"wallet",type:"address"},{internalType:"uint64",name:"blockNumber",type:"uint64"}],name:"findBalance",outputs:[{internalType:"uint256",name:"balance",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getBalances",outputs:[{internalType:"uint256[]",name:"balances",type:"uint256[]"},{internalType:"uint64[]",name:"blockNumbers",type:"uint64[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint64[]",name:"blockNumbers",type:"uint64[]"},{internalType:"address",name:"recipient",type:"address"}],name:"getClaims",outputs:[{internalType:"uint16[]",name:"claimsCnt",type:"uint16[]"},{internalType:"bool[]",name:"claimed",type:"bool[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint64",name:"blockNumber",type:"uint64"}],name:"getClaimsCnt",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"wallet",type:"address"}],name:"getCommision",outputs:[{internalType:"uint8",name:"commisionPrc",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint64",name:"blockNumber",type:"uint64"},{internalType:"address",name:"recipient",type:"address"}],name:"hasClaimed",outputs:[{internalType:"uint32",name:"rewardUnits",type:"uint32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint8",name:"commisionPrc",type:"uint8"}],name:"setCommision",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"tokenAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"trusteeAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}],P="0x608060405234801561001057600080fd5b5060008054336001600160a01b031991821681178355600280548316821790556004805490921617905560058054600160a01b600160e01b0319169055611a3b90819061005d90396000f3fe608060405234801561001057600080fd5b50600436106102265760003560e01c8063609eb1c311610130578063ad6e3318116100b8578063c6088d971161007c578063c6088d971461043d578063d045d5ae14610446578063d7a8a2b714610473578063f883fcaa146103de578063fc47e2091461049b57600080fd5b8063ad6e33181461041a578063b313bd621461042d578063b91268e81461031d578063c28bd11c146103de578063c28cedf31461043557600080fd5b806381830593116100ff57806381830593146103e6578063910eb1ce146103f75780639d941362146103d6578063a21577671461040a578063a5c9cd821461041257600080fd5b8063609eb1c3146103a2578063731fd3f7146103b557806373d6aafa146103d65780637fb01232146103de57600080fd5b80633e6e387c116101b3578063504b366211610182578063504b36621461035b578063552ba3331461036357806356656875146103765780635b7f415c146103895780635fbe4d1d1461039157600080fd5b80633e6e387c14610325578063406a6f601461032d578063479e92c814610340578063480414df1461034857600080fd5b80631df55679116101fa5780631df55679146102a457806322a0c348146102b957806330db4fa0146102da578063362b8b32146102fa5780633a3a7c531461031d57600080fd5b8062113e081461022b57806306e386321461024a5780630bf433091461026557806314270b651461027f575b600080fd5b6102336104a4565b60405161024192919061143f565b60405180910390f35b610252600581565b60405161ffff9091168152602001610241565b61026d60d081565b60405160ff9091168152602001610241565b6003546001600160a01b03165b6040516001600160a01b039091168152602001610241565b6102b76102b23660046114df565b610674565b005b6102cc6102c7366004611511565b6107a6565b604051908152602001610241565b6102e260c881565b6040516001600160401b039091168152602001610241565b61030d610308366004611544565b61090b565b6040519015158152602001610241565b6102cc610b54565b610252600281565b6102b761033b3660046114df565b610b6e565b61026d600a81565b6102b76103563660046114df565b610c8b565b61026d606481565b6102b7610371366004611589565b610da8565b61026d6103843660046114df565b610ec4565b61026d601281565b6001546001600160a01b031661028c565b6102b76103b03660046115b3565b610f47565b6103c86103c336600461160e565b61104b565b6040516102419291906116e4565b610252600a81565b61026d600281565b6005546001600160a01b031661028c565b6102b7610405366004611758565b6111cb565b61026d60ff81565b6102cc61126b565b6102b7610428366004611773565b611277565b6102e2600281565b61030d600181565b6102526103e881565b610252610454366004611758565b6001600160401b031660009081526007602052604090205461ffff1690565b610486610481366004611796565b61133c565b60405163ffffffff9091168152602001610241565b6102e2612cbe81565b33600090815260066020526040808220815160e08101835260609384939092908290810182600586835b8282101561050f5760408051808201909152600283028501805482526001908101546001600160401b031660208084019190915291835290920191016104ce565b50505090825250600a919091015460ff9081166020928301529082015191925081166001600160401b03811115610548576105486115f8565b604051908082528060200260200182016040528015610571578160200160208202803683370190505b5093508060ff166001600160401b0381111561058f5761058f6115f8565b6040519080825280602002602001820160405280156105b8578160200160208202803683370190505b50925060005b826020015160ff168160ff16101561066d57825160ff8216600581106105e6576105e66117c0565b602002015160000151858260ff1681518110610604576106046117c0565b6020908102919091010152825160ff821660058110610625576106256117c0565b602002015160200151848260ff1681518110610643576106436117c0565b6001600160401b039092166020928302919091019091015280610665816117ec565b9150506105be565b5050509091565b6002546001600160a01b031633146106f95760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79547275737465653a206f6e6c792063726561746f722063616e20617460448201527f746163682061207472757374656520636f6e747261637400000000000000000060648201526084015b60405180910390fd5b6003546001600160a01b0316156107785760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c79547275737465653a20746865207472757374656520636f6e7472616360448201527f742068617320616c7265616479206265656e206174746163686564000000000060648201526084016106f0565b600280546001600160a01b0319908116909155600380549091166001600160a01b0392909216919091179055565b6001600160a01b038216600090815260066020526040808220815160e08101835283929091908290810182600586835b828210156108175760408051808201909152600283028501805482526001908101546001600160401b031660208084019190915291835290920191016107d6565b50505090825250600a919091015460ff16602090910152905060005b816020015160ff168160ff1610156108b457815160ff82166005811061085b5761085b6117c0565b6020020151602001516001600160401b0316846001600160401b0316106108a257815160ff821660058110610892576108926117c0565b6020020151519250610905915050565b806108ac816117ec565b915050610833565b5081156109035760405162461bcd60e51b815260206004820152601d60248201527f5f62616c616e636546696e643a20636f72727570742062616c616e636500000060448201526064016106f0565b505b92915050565b6001546000906001600160a01b031633146109385760405162461bcd60e51b81526004016106f09061180c565b6001600160a01b038416600090815260066020526040902061095981611373565b6109656003601261185b565b61097090600a611962565b84101561099157600a8101546000945060ff16610991576000915050610b4d565b600a810154439060ff16158015906109a95750815485145b156109b75760019250610b4a565b600a820154600560ff90911610806109cc5750835b15610b4557600a820154600090600560ff909116106109f6576109f16001600561185b565b6109ff565b600a83015460ff165b9050805b60ff811615610a8b5783610a1860018361185b565b60ff1660058110610a2b57610a2b6117c0565b600202018460ff831660058110610a4457610a446117c0565b8254600291909102919091019081556001918201549101805467ffffffffffffffff19166001600160401b0390921691909117905580610a8381611971565b915050610a03565b5085835560018301805467ffffffffffffffff19166001600160401b038416179055600a830154600560ff9091161015610aee57600a8301805460ff16906000610ad4836117ec565b91906101000a81548160ff021916908360ff160217905550505b604080516001600160401b038416815260208101889052600195506001600160a01b038916917f0794a217cb61f365d81276ab2903aebd9d4d2c6d326af7deba31fce55ca8c48a910160405180910390a250610b4a565b600092505b50505b9392505050565b610b606003601261185b565b610b6b90600a611962565b81565b6000546001600160a01b03163314610be45760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79546f6b656e3a206f6e6c792063726561746f722063616e206174746160448201527218da0818481d1bdad95b8818dbdb9d1c9858dd606a1b60648201526084016106f0565b6001546001600160a01b031615610c5d5760405162461bcd60e51b815260206004820152603760248201527f4f6e6c79546f6b656e3a2074686520746f6b656e20636f6e74726163742068616044820152761cc8185b1c9958591e481899595b88185d1d1858da1959604a1b60648201526084016106f0565b600080546001600160a01b0319908116909155600180549091166001600160a01b0392909216919091179055565b6004546001600160a01b03163314610d015760405162461bcd60e51b815260206004820152603360248201527f4f6e6c7941646d696e3a206f6e6c792063726561746f722063616e206174746160448201527218da08184818591b5a5b8818dbdb9d1c9858dd606a1b60648201526084016106f0565b6005546001600160a01b031615610d7a5760405162461bcd60e51b815260206004820152603760248201527f4f6e6c7941646d696e3a207468652061646d696e20636f6e74726163742068616044820152761cc8185b1c9958591e481899595b88185d1d1858da1959604a1b60648201526084016106f0565b600480546001600160a01b0319908116909155600580549091166001600160a01b0392909216919091179055565b6001546001600160a01b03163314610dd25760405162461bcd60e51b81526004016106f09061180c565b6001600160a01b0382166000908152600660205260409020610df381611373565b600a810154439060ff16610e555782825560018201805467ffffffffffffffff19166001600160401b038316179055600a8201805460ff16906000610e37836117ec565b91906101000a81548160ff021916908360ff16021790555050610e71565b8154831015610e71575081815560018101546001600160401b03165b604080516001600160401b0383168152602081018590526001600160a01b038616917f0794a217cb61f365d81276ab2903aebd9d4d2c6d326af7deba31fce55ca8c48a910160405180910390a250505050565b6001600160a01b03811660009081526009602052604081205460ff168015610efd5760ff81811614610ef65780610f00565b6000610f00565b60165b915060ff82161580610f25575060ff8216600a11801590610f255750605a60ff831611155b610f415760405162461bcd60e51b81526004016106f09061198e565b50919050565b6003546001600160a01b03163314610fbd5760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79547275737465653a206f6e6c7920747275737465652063616e20657860448201527232b1baba32903a3434b990333ab731ba34b7b760691b60648201526084016106f0565b6001600160401b0383166000908152600760205260408120805461ffff1691610fe5836119e3565b825461ffff9182166101009390930a9283029190920219909116179055506001600160401b0390921660009081526008602090815260408083206001600160a01b03909416835292905220805463ffffffff90921663ffffffff19909216919091179055565b8151606090819060ff81166001600160401b0381111561106d5761106d6115f8565b604051908082528060200260200182016040528015611096578160200160208202803683370190505b5092508060ff166001600160401b038111156110b4576110b46115f8565b6040519080825280602002602001820160405280156110dd578160200160208202803683370190505b50915060005b8160ff168160ff1610156111c257611130868260ff1681518110611109576111096117c0565b60200260200101516001600160401b031660009081526007602052604090205461ffff1690565b848260ff1681518110611145576111456117c0565b602002602001019061ffff16908161ffff1681525050611181868260ff1681518110611173576111736117c0565b60200260200101518661133c565b63ffffffff1660001415838260ff16815181106111a0576111a06117c0565b91151560209283029190910190910152806111ba816117ec565b9150506110e3565b50509250929050565b6005546001600160a01b0316331461123e5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c7941646d696e3a20636f6e6c792061646d696e2063616e20657865637560448201526f3a32903a3434b990333ab731ba34b7b760811b60648201526084016106f0565b600580546001600160401b03909216600160a01b0267ffffffffffffffff60a01b19909216919091179055565b610b6b6012600a611962565b3360ff8216158061129b575060ff8216600a1180159061129b5750605a60ff831611155b6112b75760405162461bcd60e51b81526004016106f09061198e565b600060ff8316156112c857826112cb565b60ff5b6001600160a01b03831660008181526009602052604090819020805460ff851660ff1990911617905551919250907f51a5c3921364280218d7e7926208d254f2ce18260cf6f45e7bb9432b044fe20b9061132f90869060ff91909116815260200190565b60405180910390a2505050565b6001600160401b0390911660009081526008602090815260408083206001600160a01b039094168352929052205463ffffffff1690565b600a810154600160ff909116111561143c57600a81015460009061139c9060019060ff1661185b565b90505b60ff81161561143a576000826113b660018461185b565b60ff16600581106113c9576113c96117c0565b600554600160029290920292909201908101549092506001600160401b03600160a01b909204821691161161142757600a8301805460ff1690600061140d83611971565b91906101000a81548160ff021916908360ff160217905550505b508061143281611971565b91505061139f565b505b50565b604080825283519082018190526000906020906060840190828701845b828110156114785781518452928401929084019060010161145c565b5050508381038285015284518082528583019183019060005b818110156114b65783516001600160401b031683529284019291840191600101611491565b5090979650505050505050565b80356001600160a01b03811681146114da57600080fd5b919050565b6000602082840312156114f157600080fd5b610b4d826114c3565b80356001600160401b03811681146114da57600080fd5b6000806040838503121561152457600080fd5b61152d836114c3565b915061153b602084016114fa565b90509250929050565b60008060006060848603121561155957600080fd5b611562846114c3565b9250602084013591506040840135801515811461157e57600080fd5b809150509250925092565b6000806040838503121561159c57600080fd5b6115a5836114c3565b946020939093013593505050565b6000806000606084860312156115c857600080fd5b6115d1846114fa565b92506115df602085016114c3565b9150604084013563ffffffff8116811461157e57600080fd5b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561162157600080fd5b82356001600160401b038082111561163857600080fd5b818501915085601f83011261164c57600080fd5b8135602082821115611660576116606115f8565b8160051b604051601f19603f83011681018181108682111715611685576116856115f8565b6040529283528183019350848101820192898411156116a357600080fd5b948201945b838610156116c8576116b9866114fa565b855294820194938201936116a8565b96506116d790508782016114c3565b9450505050509250929050565b604080825283519082018190526000906020906060840190828701845b8281101561172157815161ffff1684529284019290840190600101611701565b5050508381038285015284518082528583019183019060005b818110156114b657835115158352928401929184019160010161173a565b60006020828403121561176a57600080fd5b610b4d826114fa565b60006020828403121561178557600080fd5b813560ff81168114610b4d57600080fd5b600080604083850312156117a957600080fd5b6117b2836114fa565b915061153b602084016114c3565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff811415611803576118036117d6565b60010192915050565b6020808252602f908201527f4f6e6c79546f6b656e3a206f6e6c7920746f6b656e2063616e2065786563757460408201526e32903a3434b990333ab731ba34b7b760891b606082015260800190565b600060ff821660ff841680821015611875576118756117d6565b90039392505050565b600181815b808511156118b957816000190482111561189f5761189f6117d6565b808516156118ac57918102915b93841c9390800290611883565b509250929050565b6000826118d057506001610905565b816118dd57506000610905565b81600181146118f357600281146118fd57611919565b6001915050610905565b60ff84111561190e5761190e6117d6565b50506001821b610905565b5060208310610133831016604e8410600b841016171561193c575081810a610905565b611946838361187e565b806000190482111561195a5761195a6117d6565b029392505050565b6000610b4d60ff8416836118c1565b600060ff821680611984576119846117d6565b6000190192915050565b60208082526035908201527f436f6d6d6973696f6e2076616c7565206973206f7574206f6620616c6c6f77656040820152740642072616e67653a205b31302d39305d206f72203605c1b606082015260800190565b600061ffff808316818114156119fb576119fb6117d6565b600101939250505056fea26469706673582212203bbd01010ac8023f3ce02a864f4765034e0c92e956db208258f345aedf78d8d864736f6c634300080b0033",H=t(185),j=function(e){Object(w.a)(t,e);var n=Object(_.a)(t);function t(e){return Object(h.a)(this,t),n.call(this,F,G,e)}return Object(g.a)(t,[{key:"deploy",value:function(e,n,a,b,i){return Object(v.a)(Object(T.a)(t.prototype),"deploy",this).call(this,e,n,a,b,i||{})}},{key:"getDeployTransaction",value:function(e,n,a,b,i){return Object(v.a)(Object(T.a)(t.prototype),"getDeployTransaction",this).call(this,e,n,a,b,i||{})}},{key:"attach",value:function(e){return Object(v.a)(Object(T.a)(t.prototype),"attach",this).call(this,e)}},{key:"connect",value:function(e){return Object(v.a)(Object(T.a)(t.prototype),"connect",this).call(this,e)}}],[{key:"connect",value:function(e,n){return new C.b(e,F,n)}}]),t}(C.c),F=[{inputs:[{internalType:"string",name:"name",type:"string"},{internalType:"string",name:"symbol",type:"string"},{internalType:"uint256",name:"initSupply",type:"uint256"},{internalType:"address",name:"recordsAddr_",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"recordsAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"registerBalance",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"}],G="0x60806040523480156200001157600080fd5b50604051620010a3380380620010a3833981016040819052620000349162000344565b8351849084906200004d906003906020850190620001d1565b50805162000063906004906020840190620001d1565b505050600062000078620000e460201b60201c565b90508060ff166012146200008b57600080fd5b620000af336200009d83600a620004ee565b620000a9908662000506565b620000e9565b50600580546001600160a01b039092166001600160a01b03199283168117909155600680549092161790555062000580915050565b601290565b6001600160a01b038216620001445760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b806002600082825462000158919062000528565b90915550506001600160a01b038216600090815260208190526040812080548392906200018790849062000528565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620001df9062000543565b90600052602060002090601f0160209004810192826200020357600085556200024e565b82601f106200021e57805160ff19168380011785556200024e565b828001600101855582156200024e579182015b828111156200024e57825182559160200191906001019062000231565b506200025c92915062000260565b5090565b5b808211156200025c576000815560010162000261565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200029f57600080fd5b81516001600160401b0380821115620002bc57620002bc62000277565b604051601f8301601f19908116603f01168101908282118183101715620002e757620002e762000277565b816040528381526020925086838588010111156200030457600080fd5b600091505b8382101562000328578582018301518183018401529082019062000309565b838211156200033a5760008385830101525b9695505050505050565b600080600080608085870312156200035b57600080fd5b84516001600160401b03808211156200037357600080fd5b62000381888389016200028d565b955060208701519150808211156200039857600080fd5b50620003a7878288016200028d565b60408701516060880151919550935090506001600160a01b0381168114620003ce57600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000430578160001904821115620004145762000414620003d9565b808516156200042257918102915b93841c9390800290620003f4565b509250929050565b6000826200044957506001620004e8565b816200045857506000620004e8565b81600181146200047157600281146200047c576200049c565b6001915050620004e8565b60ff841115620004905762000490620003d9565b50506001821b620004e8565b5060208310610133831016604e8410600b8410161715620004c1575081810a620004e8565b620004cd8383620003ef565b8060001904821115620004e457620004e4620003d9565b0290505b92915050565b6000620004ff60ff84168362000438565b9392505050565b6000816000190483118215151615620005235762000523620003d9565b500290565b600082198211156200053e576200053e620003d9565b500190565b600181811c908216806200055857607f821691505b602082108114156200057a57634e487b7160e01b600052602260045260246000fd5b50919050565b610b1380620005906000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c578063a457c2d711610066578063a457c2d7146101b8578063a9059cbb146101cb578063c2cf1cdc146101de578063dd62ed3e146101e857600080fd5b8063395093511461017457806370a082311461018757806395d89b41146101b057600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd146101155780631e7bfd601461012757806323b872dd14610152578063313ce56714610165575b600080fd5b6100dc610221565b6040516100e9919061092e565b60405180910390f35b61010561010036600461099f565b6102b3565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b60055461013a906001600160a01b031681565b6040516001600160a01b0390911681526020016100e9565b6101056101603660046109c9565b6102c9565b604051601281526020016100e9565b61010561018236600461099f565b610378565b610119610195366004610a05565b6001600160a01b031660009081526020819052604090205490565b6100dc6103b4565b6101056101c636600461099f565b6103c3565b6101056101d936600461099f565b61045c565b6101e6610469565b005b6101196101f6366004610a27565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461023090610a5a565b80601f016020809104026020016040519081016040528092919081815260200182805461025c90610a5a565b80156102a95780601f1061027e576101008083540402835291602001916102a9565b820191906000526020600020905b81548152906001019060200180831161028c57829003601f168201915b5050505050905090565b60006102c03384846104fa565b50600192915050565b60006102d684848461061e565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103605760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61036d85338584036104fa565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102c09185906103af908690610a95565b6104fa565b60606004805461023090610a5a565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104455760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610357565b61045233858584036104fa565b5060019392505050565b60006102c033848461061e565b33600090815260208190526040812054600654604051631b15c59960e11b815233600482015260248101839052600160448201529192506001600160a01b03169063362b8b32906064016020604051808303816000875af11580156104d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f69190610abb565b5050565b6001600160a01b03831661055c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610357565b6001600160a01b0382166105bd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610357565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b610629838383610760565b6006546001600160a01b031663552ba3338461065a816001600160a01b031660009081526020819052604090205490565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156106a057600080fd5b505af19250505080156106b1575060015b506006546001600160a01b031663362b8b32836106e3816001600160a01b031660009081526020819052604090205490565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152600060448201526064016020604051808303816000875af1925050508015610751575060408051601f3d908101601f1916820190925261074e91810190610abb565b60015b61075a57505050565b50505050565b6001600160a01b0383166107c45760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610357565b6001600160a01b0382166108265760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610357565b6001600160a01b0383166000908152602081905260409020548181101561089e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610357565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906108d5908490610a95565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161092191815260200190565b60405180910390a361075a565b600060208083528351808285015260005b8181101561095b5785810183015185820160400152820161093f565b8181111561096d576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461099a57600080fd5b919050565b600080604083850312156109b257600080fd5b6109bb83610983565b946020939093013593505050565b6000806000606084860312156109de57600080fd5b6109e784610983565b92506109f560208501610983565b9150604084013590509250925092565b600060208284031215610a1757600080fd5b610a2082610983565b9392505050565b60008060408385031215610a3a57600080fd5b610a4383610983565b9150610a5160208401610983565b90509250929050565b600181811c90821680610a6e57607f821691505b60208210811415610a8f57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610ab657634e487b7160e01b600052601160045260246000fd5b500190565b600060208284031215610acd57600080fd5b81518015158114610a2057600080fdfea26469706673582212209c3f96b4504cef7d73ba137cba03e598e0c6c339c9805d18e5422456a47b06cc64736f6c634300080b0033",q=t(186),z=function(e){Object(w.a)(t,e);var n=Object(_.a)(t);function t(e){return Object(h.a)(this,t),n.call(this,W,K,e)}return Object(g.a)(t,[{key:"deploy",value:function(e,n,a,b){return Object(v.a)(Object(T.a)(t.prototype),"deploy",this).call(this,e,n,a,b||{})}},{key:"getDeployTransaction",value:function(e,n,a,b){return Object(v.a)(Object(T.a)(t.prototype),"getDeployTransaction",this).call(this,e,n,a,b||{})}},{key:"attach",value:function(e){return Object(v.a)(Object(T.a)(t.prototype),"attach",this).call(this,e)}},{key:"connect",value:function(e){return Object(v.a)(Object(T.a)(t.prototype),"connect",this).call(this,e)}}],[{key:"connect",value:function(e,n){return new C.b(e,W,n)}}]),t}(C.c),W=[{inputs:[{internalType:"address",name:"tokenAddr_",type:"address"},{internalType:"address",name:"recordsAddr_",type:"address"},{internalType:"address",name:"adminAddr_",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint64",name:"blockNumber",type:"uint64"},{indexed:!0,internalType:"address",name:"recipient",type:"address"},{indexed:!0,internalType:"address",name:"miner",type:"address"},{indexed:!1,internalType:"uint256",name:"solution",type:"uint256"},{indexed:!1,internalType:"uint8",name:"commisionPrc",type:"uint8"},{indexed:!1,internalType:"uint16",name:"claimNo",type:"uint16"}],name:"Claim",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"marketingAddr",type:"address"},{indexed:!1,internalType:"uint64",name:"blockNumber",type:"uint64"},{indexed:!1,internalType:"string",name:"message",type:"string"}],name:"MarketingCallFailed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"},{inputs:[],name:"BLOCKS_PER_CHALLENGE",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"BLOCKS_PER_CHALLENGE_INC",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"BLOCKS_PER_WEEK",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"CHALLENGE_DIFFICULTY_STEP",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"CHALLENGE_NULL",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"DEMO",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"LUCKY_NUMBER",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_CHALLENGE_CNT",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_CHALLENGE_DIFFICULTY",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_DONOR_BLOCKS",outputs:[{internalType:"uint64",name:"",type:"uint64"}],stateMutability:"view",type:"function"},{inputs:[],name:"MINERS_CLAIM_MIN_RECIPIENT_BALANCE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"MIN_CHALLENGE_DIFFICULTY",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARDS_CNT_LIMIT",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_INC_INTERVAL",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNIT",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNITS_INC",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNITS_STANDARD",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"REWARD_UNITS_START",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"TOKEN_DECIMALS",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"TOKEN_UNIT",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"adminAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint64",name:"blockNumber",type:"uint64"},{internalType:"address",name:"miner",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"solution",type:"uint256"}],name:"claimReward",outputs:[{internalType:"uint32",name:"rewardUnits",type:"uint32"},{internalType:"uint8",name:"reason",type:"uint8"},{internalType:"bool",name:"premium",type:"bool"},{internalType:"uint16",name:"claimsCnt",type:"uint16"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"getClaimedTokens",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getProgress",outputs:[{internalType:"uint256",name:"progress",type:"uint256"},{internalType:"uint256",name:"progressMax",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"marketingAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"recordsAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"marketingAddr_",type:"address"}],name:"setMarketingAddr",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"tokenAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint64",name:"blockNumber",type:"uint64"},{internalType:"address",name:"miner",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"solution",type:"uint256"}],name:"verifyClaim",outputs:[{internalType:"uint32",name:"rewardUnits",type:"uint32"},{internalType:"uint8",name:"reason",type:"uint8"},{internalType:"bool",name:"premium",type:"bool"},{internalType:"uint16",name:"rewardsCnt",type:"uint16"},{internalType:"uint16",name:"claimsCnt",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint64",name:"blockNumber",type:"uint64"},{internalType:"address",name:"miner",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"solution",type:"uint256"}],name:"verifySolution",outputs:[{internalType:"uint16",name:"solvedDifficulty",type:"uint16"}],stateMutability:"view",type:"function"}],K="0x60806040523480156200001157600080fd5b506040516200277a3803806200277a83398101604081905262000034916200025d565b6200003f33620000ca565b6000805460ff60a01b19169055620000566200011a565b600180546001600160a01b039485166001600160a01b03199182168117909255600280549486169482168517905560038054939095169281168317909455600580548516909117905560068054909316909117909155600780546001600160e01b03191690911790556000600855620002a7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146200017a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6200018f6200019160201b620015e11760201c565b565b620001a5600054600160a01b900460ff1690565b15620001e75760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640162000171565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620002233390565b6040516001600160a01b03909116815260200160405180910390a1565b80516001600160a01b03811681146200025857600080fd5b919050565b6000806000606084860312156200027357600080fd5b6200027e8462000240565b92506200028e6020850162000240565b91506200029e6040850162000240565b90509250925092565b6124c380620002b76000396000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c80638183059311610125578063b91268e8116100ad578063c6088d971161007c578063c6088d9714610427578063f2fde38b14610430578063f668bee514610443578063f883fcaa1461039b578063fc47e2091461048957600080fd5b8063b91268e814610307578063b915dec214610417578063c28bd11c1461039b578063c28cedf31461041f57600080fd5b80639d941362116100f45780639d94136214610393578063a2157767146103ec578063a5c9cd82146103f4578063a7c1d590146103fc578063b313bd621461040f57600080fd5b806381830593146103a35780638456cb59146103b65780638da5cb5b146103be578063939c4456146103cf57600080fd5b80633ff42b92116101a85780635c975abb116101775780635c975abb1461035a5780635fbe4d1d14610378578063715018a61461038b57806373d6aafa146103935780637fb012321461039b57600080fd5b80633ff42b921461032f578063479e92c814610342578063504b36621461034a5780635b7f415c1461035257600080fd5b80631e7bfd60116101ef5780631e7bfd60146102bc57806330db4fa0146102e75780633a3a7c53146103075780633e6e387c1461031d5780633f4ba83a1461032557600080fd5b806306e38632146102215780630bf43309146102415780630e7d8db91461025b5780630ff8a7eb146102a9575b600080fd5b610229600581565b60405161ffff90911681526020015b60405180910390f35b61024960d081565b60405160ff9091168152602001610238565b61026e610269366004611da9565b610492565b6040805163ffffffff909616865260ff90941660208601529115159284019290925261ffff918216606084015216608082015260a001610238565b6102296102b7366004611da9565b610862565b6002546102cf906001600160a01b031681565b6040516001600160a01b039091168152602001610238565b6102ef60c881565b6040516001600160401b039091168152602001610238565b61030f610a50565b604051908152602001610238565b610229600281565b61032d610a6a565b005b6004546102cf906001600160a01b031681565b610249600a81565b610249606481565b610249601281565b600054600160a01b900460ff165b6040519015158152602001610238565b6001546102cf906001600160a01b031681565b61032d610a9e565b610229600a81565b610249600281565b6003546102cf906001600160a01b031681565b61032d610afa565b6000546001600160a01b03166102cf565b6103d7610b2c565b60408051928352602083019190915201610238565b61024960ff81565b61030f610baf565b61032d61040a366004611dfa565b610bbb565b6102ef600281565b60085461030f565b610368600181565b6102296103e881565b61032d61043e366004611dfa565b610d20565b610456610451366004611da9565b610dbb565b6040805163ffffffff909516855260ff90931660208501529015159183019190915261ffff166060820152608001610238565b6102ef612cbe81565b60008060008060006104ae60005460ff600160a01b9091041690565b156104d45760405162461bcd60e51b81526004016104cb90611e1e565b60405180910390fd5b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915260075460405163f5d4d8a160e01b81526001600160401b038c1660048201526000916001600160a01b03169063f5d4d8a19060240161012060405180830381865afa158015610560573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105849190611eed565b60808301519197509193509091506105de5760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206368616c6c656e6765207265636f7264000000000000000060448201526064016104cb565b60006105f08c8b848660000151611663565b905060006106008d8d8d8d610862565b9050600098508160ff168161ffff161061084e5760065460405163d7a8a2b760e01b81526001600160401b038f1660048201526001600160a01b038d811660248301529091169063d7a8a2b790604401602060405180830381865afa15801561066d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106919190611fb1565b63ffffffff16156106a55760039750610853565b8a6001600160a01b03168c6001600160a01b03161415801561074957506106ce60036012611fed565b6106d990600a6120f4565b6005546040516370a0823160e01b81526001600160a01b038e81166004830152909116906370a0823190602401602060405180830381865afa158015610723573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107479190612103565b105b156107575760059750610853565b60006107668560000151611843565b9097509050600261ffff8816111561077d57600296505b600660009054906101000a90046001600160a01b03166001600160a01b031663d045d5ae8f6040518263ffffffff1660e01b81526004016107cd91906001600160401b0391909116815260200190565b602060405180830381865afa1580156107ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080e919061211c565b95508661ffff168661ffff16101561084357846040015161ffff168161ffff166108389190612137565b995060009850610848565b600498505b50610853565b600297505b50505050945094509450945094565b60008054600160a01b900460ff161561088d5760405162461bcd60e51b81526004016104cb90611e1e565b60075460405163f5d4d8a160e01b81526001600160401b0387166004820152600091829182916001600160a01b03169063f5d4d8a19060240161012060405180830381865afa1580156108e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109089190611eed565b9250925092508060ff16600161091f576014610922565b600a5b60ff1611158015610937575060d060ff821611155b6109835760405162461bcd60e51b815260206004820152601a60248201527f446966666963756c7479206973206f7574206f662072616e676500000000000060448201526064016104cb565b81158061099257506001821515145b61099b57600080fd5b82516040805160208101889052908101919091526001600160a01b0380881660608301528816608082015260009060a00160405160208183030381529060405290508051608014610a265760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420736f6c7574696f6e206461746160581b60448201526064016104cb565b80516020820120610a36816118dc565b610a4290610100612163565b9a9950505050505050505050565b610a5c60036012611fed565b610a6790600a6120f4565b81565b6000546001600160a01b03163314610a945760405162461bcd60e51b81526004016104cb90612186565b610a9c61194f565b565b6000546001600160a01b03163314610ac85760405162461bcd60e51b81526004016104cb90612186565b600054600160a01b900460ff1615610af25760405162461bcd60e51b81526004016104cb90611e1e565b610a9c6119d3565b6000546001600160a01b03163314610b245760405162461bcd60e51b81526004016104cb90612186565b610a9c6115e1565b6008546005546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610b78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9c9190612103565b600854610ba991906121bb565b90509091565b610a676012600a6120f4565b6000546001600160a01b03163314610be55760405162461bcd60e51b81526004016104cb90612186565b6001600160a01b0381161580610c7857506000546001600160a01b03166001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6d91906121d3565b6001600160a01b0316145b610cfe5760405162461bcd60e51b815260206004820152604b60248201527f546865206d61726b6574696e6720636f6e74726163742061646472657373206d60448201527f75737420706f696e7420746f206120636f6e747261637420776974682074686560648201526a1039b0b6b29037bbb732b960a91b608482015260a4016104cb565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610d4a5760405162461bcd60e51b81526004016104cb90612186565b6001600160a01b038116610daf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104cb565b610db881611a03565b50565b600080600080610dd560005460ff600160a01b9091041690565b15610df25760405162461bcd60e51b81526004016104cb90611e1e565b6000610e0089898989610492565b9398509196509450909250905060ff84166115d55760008563ffffffff1611610e635760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081c995dd85c9908185b5bdd5b9d605a1b60448201526064016104cb565b610e716107d06103e8611a53565b8563ffffffff161115610ec65760405162461bcd60e51b815260206004820152601e60248201527f496e76616c6964207265776172642c20616d6f756e7420746f6f20626967000060448201526064016104cb565b6000610ef2610ed760036012611fed565b610ee290600a6120f4565b63ffffffff8089169190611a5316565b600654604051635665687560e01b81526001600160a01b038b8116600483015292935060009290911690635665687590602401602060405180830381865afa158015610f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6691906121f0565b9050886001600160a01b03168a6001600160a01b031614611113576000610f9b6064610f958560ff8616611a53565b90611a68565b90506000610fa98483611a74565b60055460405163a9059cbb60e01b81526001600160a01b038e811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af1158015610ffe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611022919061220b565b5060055460405163a9059cbb60e01b81526001600160a01b038e81166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af1158015611076573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109a919061220b565b508b6001600160a01b03168b6001600160a01b03168e6001600160401b03167f302c08954cd01f3e9a025e113b28fe1600afb14599ebd20d4447981c78fa958e8d878b6040516111049392919092835260ff91909116602083015261ffff16604082015260600190565b60405180910390a450506111eb565b60055460405163a9059cbb60e01b81526001600160a01b038b81166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af1158015611166573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118a919061220b565b50604080518981526000602082015261ffff86168183015290516001600160a01b038c811692908c16916001600160401b038f16917f302c08954cd01f3e9a025e113b28fe1600afb14599ebd20d4447981c78fa958e919081900360600190a45b6008546111f89083611a80565b600855600261ffff8516106112485760405162461bcd60e51b8152602060048201526016602482015275636c61696d20636f756e7420697320746f6f2062696760501b60448201526064016104cb565b8261ffff168461ffff16106112985760405162461bcd60e51b8152602060048201526016602482015275636c61696d20636f756e7420697320746f6f2062696760501b60448201526064016104cb565b836112a281612226565b60065460405163609eb1c360e01b81526001600160401b038f1660048201526001600160a01b038d8116602483015263ffffffff8c1660448301529297509116915063609eb1c390606401600060405180830381600087803b15801561130757600080fd5b505af115801561131b573d6000803e3d6000fd5b505050508261ffff168461ffff16106113d55760078054600160a01b90046001600160401b031690601461134e83612248565b82546101009290920a6001600160401b0381810219909316918316021790915560075460405163f7f595fb60e01b8152918e16600483015287151560248301526001600160a01b0316915063f7f595fb90604401600060405180830381600087803b1580156113bc57600080fd5b505af11580156113d0573d6000803e3d6000fd5b505050505b6004546001600160a01b0316156115d257600480546040516301389dcb60e51b81526001600160401b038e16928101929092526001600160a01b038c811660248401528b8116604484015263ffffffff8a16606484015260ff8416608484015216908190632713b9609060a401600060405180830381600087803b15801561145c57600080fd5b505af192505050801561146d575060015b6115d057611479612265565b806308c379a0141561152d575061148e612281565b80611499575061152f565b600980546001600160401b03169060006114b283612248565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550507fe4672f4d62a9c8ce07cefba7f97b1e461ca30161fc35c9095d5aab6c3b77e189600460009054906101000a90046001600160a01b03168e8360405161151f9392919061230a565b60405180910390a1506115d0565b505b600980546801000000000000000090046001600160401b031690600861155483612248565b82546101009290920a6001600160401b03818102199093169183160217909155600454604080516001600160a01b039092168252918f16602082015260609181018290526000918101919091527fe4672f4d62a9c8ce07cefba7f97b1e461ca30161fc35c9095d5aab6c3b77e189915060800160405180910390a15b505b50505b50945094509450949050565b600054600160a01b900460ff161561160b5760405162461bcd60e51b81526004016104cb90611e1e565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116463390565b6040516001600160a01b03909116815260200160405180910390a1565b600654604051630454186960e31b81526001600160a01b0385811660048301526001600160401b038716602483015260009283929116906322a0c34890604401602060405180830381865afa1580156116c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e49190612103565b905060006116f3848784611a8c565b9050600061170083611b59565b905060ff8616600a1180159061171a575060d060ff871611155b61177c5760405162461bcd60e51b815260206004820152602d60248201527f766572696679436c61696d28293a2067656e6572616c446966666963756c747960448201526c206f7574206f662072616e676560981b60648201526084016104cb565b6000611788828461237f565b90508060ff168760ff16101561179f5760006117a9565b6117a98188611fed565b9450600a60ff861610156117bc57600a94505b60ff8516600a118015906117d4575060d060ff861611155b6118375760405162461bcd60e51b815260206004820152602e60248201527f766572696679436c61696d28293a2061646a7573746564446966666963756c7460448201526d79206f7574206f662072616e676560901b60648201526084016104cb565b50505050949350505050565b600080826202222260ec82901c141561186557506101f4936107d09350915050565b61222260f082901c1415611881575060c8936101f49350915050565b61022260f482901c141561189b5750606493849350915050565b602260fe82901c14156118b5575060329360149350915050565b600260fc82901c14156118cf575060149360059350915050565b50600a9360019350915050565b6000806101005b8061ffff168261ffff161015611948576000600161190183856123a4565b61ffff16901c9050600060016119188360026123ca565b61192291906123da565b905080861161193357819250611941565b61193e8260016123a4565b93505b50506118e3565b5092915050565b600054600160a01b900460ff1661199f5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104cb565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611646565b6000546001600160a01b031633146119fd5760405162461bcd60e51b81526004016104cb90612186565b610a9c60005b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611a5f82846123f1565b90505b92915050565b6000611a5f8284612426565b6000611a5f82846123da565b6000611a5f82846121bb565b6000836001600160a01b03841680821883611aa682611cf9565b905061ffff8116611aba5750610100611ac8565b80611ac48161243a565b9150505b6000611ae0611ad96012600a6120f4565b8890611a68565b9050600060018210611b345760148361ffff1610611b005750601e611b4c565b600a8361ffff1610611b2957611b17600a84611fed565b611b2290601461237f565b9050611b4c565b611b22836002612458565b600a8361ffff161115611b495750600a611b4c565b50815b9998505050505050505050565b600080611b72611b6b6012600a6120f4565b8490611a68565b90506000611ba6611b8560036012611fed565b611b9090600a6120f4565b610f95611b9f6012600a6120f4565b8790611d73565b9050600060018310611c5c576103e88310611bc35750601e611cf1565b6101f48310611bd45750601c611cf1565b60c88310611be45750601a611cf1565b60648310611bf457506018611cf1565b60328310611c0457506016611cf1565b60148310611c1457506014611cf1565b600a8310611c2457506012611cf1565b60058310611c3457506010611cf1565b60038310611c445750600e611cf1565b60028310611c545750600c611cf1565b50600a611cf1565b6101f48210611c6d57506009611cf1565b60c88210611c7d57506008611cf1565b60648210611c8d57506007611cf1565b60328210611c9d57506006611cf1565b60148210611cad57506005611cf1565b600a8210611cbd57506004611cf1565b60058210611ccd57506003611cf1565b60028210611cdd57506002611cf1565b60018210611ced57506001611cf1565b5060005b949350505050565b600081611d0857506000919050565b60016101005b8061ffff168261ffff1610156119485760006001611d2c83856123a4565b61ffff16901c905060006001611d438360026123ca565b611d4d91906123da565b9050858116611d6857611d618260016123a4565b9350611d6c565b8192505b5050611d0e565b6000611a5f8284612479565b6001600160401b0381168114610db857600080fd5b6001600160a01b0381168114610db857600080fd5b60008060008060808587031215611dbf57600080fd5b8435611dca81611d7f565b93506020850135611dda81611d94565b92506040850135611dea81611d94565b9396929550929360600135925050565b600060208284031215611e0c57600080fd5b8135611e1781611d94565b9392505050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60e081018181106001600160401b0382111715611e7557634e487b7160e01b600052604160045260246000fd5b60405250565b601f8201601f191681016001600160401b0381118282101715611eae57634e487b7160e01b600052604160045260246000fd5b6040525050565b805161ffff81168114611ec757600080fd5b919050565b805160ff81168114611ec757600080fd5b80518015158114611ec757600080fd5b6000806000838503610120811215611f0457600080fd5b60e0811215611f1257600080fd5b50604051611f1f81611e48565b845181526020850151611f3181611d7f565b6020820152611f4260408601611eb5565b6040820152611f5360608601611ecc565b6060820152611f6460808601611edd565b6080820152611f7560a08601611ecc565b60a0820152611f8660c08601611ecc565b60c08201529250611f9960e08501611edd565b9150611fa86101008501611ecc565b90509250925092565b600060208284031215611fc357600080fd5b815163ffffffff81168114611e1757600080fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168082101561200757612007611fd7565b90039392505050565b600181815b8085111561204b57816000190482111561203157612031611fd7565b8085161561203e57918102915b93841c9390800290612015565b509250929050565b60008261206257506001611a62565b8161206f57506000611a62565b8160018114612085576002811461208f576120ab565b6001915050611a62565b60ff8411156120a0576120a0611fd7565b50506001821b611a62565b5060208310610133831016604e8410600b84101617156120ce575081810a611a62565b6120d88383612010565b80600019048211156120ec576120ec611fd7565b029392505050565b6000611a5f60ff841683612053565b60006020828403121561211557600080fd5b5051919050565b60006020828403121561212e57600080fd5b611a5f82611eb5565b600063ffffffff8083168185168183048111821515161561215a5761215a611fd7565b02949350505050565b600061ffff8381169083168181101561217e5761217e611fd7565b039392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156121ce576121ce611fd7565b500190565b6000602082840312156121e557600080fd5b8151611e1781611d94565b60006020828403121561220257600080fd5b611a5f82611ecc565b60006020828403121561221d57600080fd5b611a5f82611edd565b600061ffff8083168181141561223e5761223e611fd7565b6001019392505050565b60006001600160401b038083168181141561223e5761223e611fd7565b600060033d111561227e5760046000803e5060005160e01c5b90565b600060443d101561228f5790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156122be57505050505090565b82850191508151818111156122d65750505050505090565b843d87010160208285010111156122f05750505050505090565b6122ff60208286010187611e7b565b509095945050505050565b60018060a01b0384168152600060206001600160401b0385168184015260606040840152835180606085015260005b8181101561235557858101830151858201608001528201612339565b81811115612367576000608083870101525b50601f01601f19169290920160800195945050505050565b600060ff821660ff84168060ff0382111561239c5761239c611fd7565b019392505050565b600061ffff8083168185168083038211156123c1576123c1611fd7565b01949350505050565b6000611a5f61ffff841683612053565b6000828210156123ec576123ec611fd7565b500390565b600081600019048311821515161561240b5761240b611fd7565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261243557612435612410565b500490565b600061ffff82168061244e5761244e611fd7565b6000190192915050565b600060ff821660ff84168160ff04811182151516156120ec576120ec611fd7565b60008261248857612488612410565b50069056fea26469706673582212204d23160e1ee3f61ca80f12b85beba6576c000300845295ec4aca0f9bbf1a238d64736f6c634300080b0033",X=t(187),Y=function(e){Object(w.a)(t,e);var n=Object(_.a)(t);function t(e){return Object(h.a)(this,t),n.call(this,V,Z,e)}return Object(g.a)(t,[{key:"deploy",value:function(e,n,a){return Object(v.a)(Object(T.a)(t.prototype),"deploy",this).call(this,e,n,a||{})}},{key:"getDeployTransaction",value:function(e,n,a){return Object(v.a)(Object(T.a)(t.prototype),"getDeployTransaction",this).call(this,e,n,a||{})}},{key:"attach",value:function(e){return Object(v.a)(Object(T.a)(t.prototype),"attach",this).call(this,e)}},{key:"connect",value:function(e){return Object(v.a)(Object(T.a)(t.prototype),"connect",this).call(this,e)}}],[{key:"connect",value:function(e,n){return new C.b(e,V,n)}}]),t}(C.c),V=[{inputs:[{internalType:"address",name:"erc20Addr_",type:"address"},{internalType:"address",name:"progressingAddr_",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"availableBalanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"erc20Addr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"notAvailableBalanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"progressingAddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalLockedBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"withdrawAll",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"withdrawnBalanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}],Z="0x60806040523480156200001157600080fd5b5060405162001cee38038062001cee833981016040819052620000349162000456565b620000c76040518060400160405280600781526020016602637b1b5b2b2160cd1b815250836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000097573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000c19190810190620004a4565b62000223565b62000124604051806040016040528060018152602001601360fa1b815250846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000097573d6000803e3d6000fd5b8383838381600390805190602001906200014092919062000393565b5080516200015690600490602084019062000393565b5050600580546001600160a01b038086166001600160a01b031992831617909255600680549285169290911682179055604080516349ce222b60e11b8152815192935063939c445692600480830193928290030181865afa158015620001c0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001e6919062000580565b5050600a80546001600160a01b039788166001600160a01b0319918216179091556009805496909716951694909417909455506200064792505050565b80518251606091849184916000916200023d9190620005bb565b6001600160401b038111156200025757620002576200048e565b6040519080825280601f01601f19166020018201604052801562000282576020820181803683370190505b509050806000805b85518110156200030657858181518110620002a957620002a9620005d6565b01602001516001600160f81b0319168383620002c581620005ec565b945081518110620002da57620002da620005d6565b60200101906001600160f81b031916908160001a90535080620002fd81620005ec565b9150506200028a565b5060005b84518110156200038657848181518110620003295762000329620005d6565b01602001516001600160f81b03191683836200034581620005ec565b9450815181106200035a576200035a620005d6565b60200101906001600160f81b031916908160001a905350806200037d81620005ec565b9150506200030a565b5090979650505050505050565b828054620003a1906200060a565b90600052602060002090601f016020900481019282620003c5576000855562000410565b82601f10620003e057805160ff191683800117855562000410565b8280016001018555821562000410579182015b8281111562000410578251825591602001919060010190620003f3565b506200041e92915062000422565b5090565b5b808211156200041e576000815560010162000423565b80516001600160a01b03811681146200045157600080fd5b919050565b600080604083850312156200046a57600080fd5b620004758362000439565b9150620004856020840162000439565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215620004b857600080fd5b82516001600160401b0380821115620004d057600080fd5b818501915085601f830112620004e557600080fd5b815181811115620004fa57620004fa6200048e565b604051601f8201601f19908116603f011681019083821181831017156200052557620005256200048e565b8160405282815288868487010111156200053e57600080fd5b600093505b8284101562000562578484018601518185018701529285019262000543565b82841115620005745760008684830101525b98975050505050505050565b600080604083850312156200059457600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b60008219821115620005d157620005d1620005a5565b500190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415620006035762000603620005a5565b5060010190565b600181811c908216806200061f57607f821691505b602082108114156200064157634e487b7160e01b600052602260045260246000fd5b50919050565b61169780620006576000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806362d8908f116100ad578063a457c2d711610071578063a457c2d714610289578063a9059cbb1461029c578063b6b55f25146102af578063c20704af146102c2578063dd62ed3e146102d557600080fd5b806362d8908f1461021457806370a082311461022757806378f77ebf14610250578063853828b61461027957806395d89b411461028157600080fd5b80632d98ac5e116100f45780632d98ac5e146101aa5780632e1a7d4d146101b2578063313ce567146101c7578063317e3ce0146101d6578063395093511461020157600080fd5b806306fdde0314610131578063095ea7b31461014f57806318160ddd1461017257806323b872dd1461018457806325d998bb14610197575b600080fd5b61013961030e565b60405161014691906112fa565b60405180910390f35b61016261015d36600461136b565b6103a0565b6040519015158152602001610146565b6002545b604051908152602001610146565b610162610192366004611395565b6103b7565b6101766101a53660046113d1565b610466565b6101766105bf565b6101c56101c03660046113ec565b610630565b005b60405160128152602001610146565b600a546101e9906001600160a01b031681565b6040516001600160a01b039091168152602001610146565b61016261020f36600461136b565b6107a8565b6101766102223660046113d1565b6107e4565b6101766102353660046113d1565b6001600160a01b031660009081526020819052604090205490565b61017661025e3660046113d1565b6001600160a01b031660009081526008602052604090205490565b6101c561081c565b610139610927565b61016261029736600461136b565b610936565b6101626102aa36600461136b565b6109cf565b6101c56102bd3660046113ec565b6109dc565b6009546101e9906001600160a01b031681565b6101766102e3366004611405565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461031d90611438565b80601f016020809104026020016040519081016040528092919081815260200182805461034990611438565b80156103965780601f1061036b57610100808354040283529160200191610396565b820191906000526020600020905b81548152906001019060200180831161037957829003601f168201915b5050505050905090565b60006103ad338484610c36565b5060015b92915050565b60006103c4848484610d5b565b6001600160a01b03841660009081526001602090815260408083203384529091529020548281101561044e5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61045b8533858403610c36565b506001949350505050565b6001600160a01b0381166000908152602081905260408120548190600654604080516349ce222b60e11b8152815193945060009384936001600160a01b03169263939c445692600480820193918290030181865afa1580156104cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f09190611473565b91509150816000141561050857506000949350505050565b8082106105185750909392505050565b6001600160a01b03851660009081526007602052604081205490506000610593836040518060400160405280602081526020017f50726f67726573734c6f636b65723a207a65726f2070726f67726573734d617881525061058c87610586878b610e3090919063ffffffff16565b90610e43565b9190610e4f565b9050818111156105b2576105a78183610e89565b979650505050505050565b5060009695505050505050565b6005546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561060c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b19190611497565b33600061063c82610466565b9050808311156106b45760405162461bcd60e51b815260206004820152603760248201527f50726f67726573734c6f636b65723a205769746864726177616c20657863656560448201527f64732074686520617661696c61626c6520616d6f756e740000000000000000006064820152608401610445565b6001600160a01b0382166000908152600760205260409020546106d78185610e30565b6001600160a01b0384166000908152600760209081526040808320939093556008905220546107068186610e30565b6001600160a01b0385166000908152600860205260409020556107298486610e95565b60055460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018890529091169063a9059cbb906044016020604051808303816000875af115801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a091906114b0565b505050505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916103ad9185906107df9086906114e8565b610c36565b6001600160a01b038116600090815260208190526040812054600061080884610466565b90506108148282610e89565b949350505050565b33600061082882610466565b9050600061084b836001600160a01b031660009081526007602052604090205490565b90506108578183610e30565b6001600160a01b0384166000908152600760209081526040808320939093556008905220546108868184610e30565b6001600160a01b0385166000908152600860205260409020556108a98484610e95565b60055460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018690529091169063a9059cbb906044016020604051808303816000875af11580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092091906114b0565b5050505050565b60606004805461031d90611438565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156109b85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610445565b6109c53385858403610c36565b5060019392505050565b60006103ad338484610d5b565b6005546040516323b872dd60e01b81523360048201819052306024830181905260448301859052909290916001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5f91906114b0565b50610a6a8284610fdb565b600654604080516349ce222b60e11b8152815160009384936001600160a01b039091169263939c445692600480830193928290030181865afa158015610ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad89190611473565b600654604080516349ce222b60e11b815281519496509294506001600160a01b039091169263939c44569260048082019392918290030181865afa158015610b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b489190611473565b9092509050811561092057808210610be05760405162461bcd60e51b815260206004820152604f60248201527f50726f67726573734c6f636b65723a2070726f6772657373206973203130302560448201527f2c20697420646f6573206e6f74206d616b6520616e792073656e736520746f2060648201526e6465706f73697420616e796d6f726560881b608482015260a401610445565b6000610bef86848460126110ba565b6001600160a01b038616600090815260076020526040902054909150610c159082610e30565b6001600160a01b038616600090815260076020526040902055505050505050565b6001600160a01b038316610c985760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610445565b6001600160a01b038216610cf95760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610445565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316600090815260208190526040902054610d7f848484611120565b8115610e2a576001600160a01b03841660009081526007602052604081205490506000610def836040518060400160405280601c81526020017f50726f67726573734c6f636b65723a207a65726f2062616c616e63650000000081525061058c8786610e4390919063ffffffff16565b9050610dfb8282610e89565b6001600160a01b038088166000908152600760205260408082209390935590871681522054610c159082610e30565b50505050565b6000610e3c82846114e8565b9392505050565b6000610e3c8284611500565b60008183610e705760405162461bcd60e51b815260040161044591906112fa565b50828481610e8057610e8061151f565b04949350505050565b6000610e3c8284611535565b6001600160a01b038216610ef55760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610445565b6001600160a01b03821660009081526020819052604090205481811015610f695760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610445565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610f98908490611535565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610d4e565b6001600160a01b0382166110315760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610445565b806002600082825461104391906114e8565b90915550506001600160a01b038216600090815260208190526040812080548392906110709084906114e8565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000806110d1846110cb8888610e43565b906112ee565b905060006110e084600a611630565b905060006110f2866110cb848a610e43565b905060006111008383610e89565b90506000611112826110cb8787610e43565b9a9950505050505050505050565b6001600160a01b0383166111845760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610445565b6001600160a01b0382166111e65760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610445565b6001600160a01b0383166000908152602081905260409020548181101561125e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610445565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906112959084906114e8565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516112e191815260200190565b60405180910390a3610e2a565b6000610e3c828461163f565b600060208083528351808285015260005b818110156113275785810183015185820160400152820161130b565b81811115611339576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461136657600080fd5b919050565b6000806040838503121561137e57600080fd5b6113878361134f565b946020939093013593505050565b6000806000606084860312156113aa57600080fd5b6113b38461134f565b92506113c16020850161134f565b9150604084013590509250925092565b6000602082840312156113e357600080fd5b610e3c8261134f565b6000602082840312156113fe57600080fd5b5035919050565b6000806040838503121561141857600080fd5b6114218361134f565b915061142f6020840161134f565b90509250929050565b600181811c9082168061144c57607f821691505b6020821081141561146d57634e487b7160e01b600052602260045260246000fd5b50919050565b6000806040838503121561148657600080fd5b505080516020909101519092909150565b6000602082840312156114a957600080fd5b5051919050565b6000602082840312156114c257600080fd5b81518015158114610e3c57600080fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156114fb576114fb6114d2565b500190565b600081600019048311821515161561151a5761151a6114d2565b500290565b634e487b7160e01b600052601260045260246000fd5b600082821015611547576115476114d2565b500390565b600181815b8085111561158757816000190482111561156d5761156d6114d2565b8085161561157a57918102915b93841c9390800290611551565b509250929050565b60008261159e575060016103b1565b816115ab575060006103b1565b81600181146115c157600281146115cb576115e7565b60019150506103b1565b60ff8411156115dc576115dc6114d2565b50506001821b6103b1565b5060208310610133831016604e8410600b841016171561160a575081810a6103b1565b611614838361154c565b8060001904821115611628576116286114d2565b029392505050565b6000610e3c60ff84168361158f565b60008261165c57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220f2d8de076ac6425d79cd8add09ecf132861c731fd1bae6a1259812853c82cae164736f6c634300080b0033",J=function(e){Object(w.a)(t,e);var n=Object(_.a)(t);function t(e){return Object(h.a)(this,t),n.call(this,Q,$,e)}return Object(g.a)(t,[{key:"deploy",value:function(e){return Object(v.a)(Object(T.a)(t.prototype),"deploy",this).call(this,e||{})}},{key:"getDeployTransaction",value:function(e){return Object(v.a)(Object(T.a)(t.prototype),"getDeployTransaction",this).call(this,e||{})}},{key:"attach",value:function(e){return Object(v.a)(Object(T.a)(t.prototype),"attach",this).call(this,e)}},{key:"connect",value:function(e){return Object(v.a)(Object(T.a)(t.prototype),"connect",this).call(this,e)}}],[{key:"connect",value:function(e,n){return new C.b(e,Q,n)}}]),t}(C.c),Q=[{inputs:[{internalType:"uint256",name:"n",type:"uint256"}],name:"findHsb",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"pure",type:"function"},{inputs:[{internalType:"uint256",name:"n",type:"uint256"}],name:"findLsb",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"pure",type:"function"}],$="0x608060405234801561001057600080fd5b5061031e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636413c2781461003b578063eb19394a14610065575b600080fd5b61004e610049366004610181565b610078565b60405161ffff909116815260200160405180910390f35b61004e610073366004610181565b610089565b600061008382610094565b92915050565b600061008382610115565b6000816100a357506000919050565b60016101005b8061ffff168261ffff16101561010e57600060016100c783856101b0565b61ffff16901c9050600060016100de8360026102ba565b6100e891906102d1565b9050858116610103576100fc8260016101b0565b9350610107565b8192505b50506100a9565b5092915050565b6000806101005b8061ffff168261ffff16101561010e576000600161013a83856101b0565b61ffff16901c9050600060016101518360026102ba565b61015b91906102d1565b905080861161016c5781925061017a565b6101778260016101b0565b93505b505061011c565b60006020828403121561019357600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600061ffff8083168185168083038211156101cd576101cd61019a565b01949350505050565b600181815b808511156102115781600019048211156101f7576101f761019a565b8085161561020457918102915b93841c93908002906101db565b509250929050565b60008261022857506001610083565b8161023557506000610083565b816001811461024b576002811461025557610271565b6001915050610083565b60ff8411156102665761026661019a565b50506001821b610083565b5060208310610133831016604e8410600b8410161715610294575081810a610083565b61029e83836101d6565b80600019048211156102b2576102b261019a565b029392505050565b60006102ca61ffff841683610219565b9392505050565b6000828210156102e3576102e361019a565b50039056fea2646970667358221220ee7c96362309201c41d6d57af274e98bfb221ce9c91426339eac2f5ef7bb54cd64736f6c634300080b0033",ee=function(e){Object(w.a)(t,e);var n=Object(_.a)(t);function t(e){return Object(h.a)(this,t),n.call(this,ne,te,e)}return Object(g.a)(t,[{key:"deploy",value:function(e,n,a){return Object(v.a)(Object(T.a)(t.prototype),"deploy",this).call(this,e,n,a||{})}},{key:"getDeployTransaction",value:function(e,n,a){return Object(v.a)(Object(T.a)(t.prototype),"getDeployTransaction",this).call(this,e,n,a||{})}},{key:"attach",value:function(e){return Object(v.a)(Object(T.a)(t.prototype),"attach",this).call(this,e)}},{key:"connect",value:function(e){return Object(v.a)(Object(T.a)(t.prototype),"connect",this).call(this,e)}}],[{key:"connect",value:function(e,n){return new C.b(e,ne,n)}}]),t}(C.c),ne=[{inputs:[{internalType:"string",name:"name_",type:"string"},{internalType:"string",name:"symbol_",type:"string"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"}],te="0x60806040523480156200001157600080fd5b5060405162000b5638038062000b568339810160408190526200003491620001db565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b50505062000282565b828054620000769062000245565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013657600080fd5b81516001600160401b03808211156200015357620001536200010e565b604051601f8301601f19908116603f011681019082821181831017156200017e576200017e6200010e565b816040528381526020925086838588010111156200019b57600080fd5b600091505b83821015620001bf5785820183015181830184015290820190620001a0565b83821115620001d15760008385830101525b9695505050505050565b60008060408385031215620001ef57600080fd5b82516001600160401b03808211156200020757600080fd5b620002158683870162000124565b935060208501519150808211156200022c57600080fd5b506200023b8582860162000124565b9150509250929050565b600181811c908216806200025a57607f821691505b602082108114156200027c57634e487b7160e01b600052602260045260246000fd5b50919050565b6108c480620002926000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101c6565b6040516100c39190610701565b60405180910390f35b6100df6100da366004610772565b610258565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f36600461079c565b61026e565b604051601281526020016100c3565b6100df610131366004610772565b61031d565b6100f36101443660046107d8565b6001600160a01b031660009081526020819052604090205490565b6100b6610359565b6100df610175366004610772565b610368565b6100df610188366004610772565b610401565b6100f361019b3660046107fa565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101d59061082d565b80601f01602080910402602001604051908101604052809291908181526020018280546102019061082d565b801561024e5780601f106102235761010080835404028352916020019161024e565b820191906000526020600020905b81548152906001019060200180831161023157829003601f168201915b5050505050905090565b600061026533848461040e565b50600192915050565b600061027b848484610532565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103055760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b610312853385840361040e565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610265918590610354908690610868565b61040e565b6060600480546101d59061082d565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156103ea5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016102fc565b6103f7338585840361040e565b5060019392505050565b6000610265338484610532565b6001600160a01b0383166104705760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016102fc565b6001600160a01b0382166104d15760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016102fc565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166105965760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016102fc565b6001600160a01b0382166105f85760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016102fc565b6001600160a01b038316600090815260208190526040902054818110156106705760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016102fc565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106a7908490610868565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106f391815260200190565b60405180910390a350505050565b600060208083528351808285015260005b8181101561072e57858101830151858201604001528201610712565b81811115610740576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461076d57600080fd5b919050565b6000806040838503121561078557600080fd5b61078e83610756565b946020939093013593505050565b6000806000606084860312156107b157600080fd5b6107ba84610756565b92506107c860208501610756565b9150604084013590509250925092565b6000602082840312156107ea57600080fd5b6107f382610756565b9392505050565b6000806040838503121561080d57600080fd5b61081683610756565b915061082460208401610756565b90509250929050565b600181811c9082168061084157607f821691505b6020821081141561086257634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561088957634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220889f9738f938576d163ae004c2b4ae05a7aaa0695bc2dda1358085592049f21564736f6c634300080b0033",ae=["showLoading","autoInit"],be={instance:void 0,factory:void 0},ie=b.a.createContext([void 0,function(){}]),re=b.a.createContext(["",function(){}]),de=b.a.createContext([void 0,function(){}]),se={currentHardhatProvider:"",init:function(){throw Error("Symfoni context not initialized")},loading:!1,messages:[],providers:[]},ce=b.a.createContext(se),fe=b.a.createContext(be),oe=b.a.createContext(be),ue=b.a.createContext(be),le=b.a.createContext(be),pe=b.a.createContext(be),me=b.a.createContext(be),ye=b.a.createContext(be),he=b.a.createContext(be),ge=b.a.createContext(be),ve=function(e){var n=e.showLoading,t=void 0===n||n,i=e.autoInit,r=void 0===i||i,d=Object(u.a)(e,ae),p=Object(a.useState)(0),h=Object(o.a)(p,2),g=h[0],v=h[1],T=Object(a.useState)(""),w=Object(o.a)(T,2),_=w[0],C=w[1],k=Object(a.useState)(!1),A=Object(o.a)(k,2),I=A[0],x=A[1],O=Object(a.useState)([]),S=Object(o.a)(O,2),U=S[0],P=S[1],F=Object(a.useState)(void 0),G=Object(o.a)(F,2),W=G[0],K=G[1],V=Object(a.useState)(void 0),Z=Object(o.a)(V,2),Q=Z[0],$=Z[1],ne=Object(a.useState)(""),te=Object(o.a)(ne,2),se=te[0],ve=te[1],Te=Object(a.useState)(void 0),we=Object(o.a)(Te,1)[0],_e=Object(a.useState)(["web3modal","hardhat"]),Ce=Object(o.a)(_e,2),Ee=Ce[0],ke=Ce[1],Ae=Object(a.useState)(be),Le=Object(o.a)(Ae,2),Me=Le[0],Ie=Le[1],xe=Object(a.useState)(be),Ne=Object(o.a)(xe,2),Re=Ne[0],Oe=Ne[1],Se=Object(a.useState)(be),De=Object(o.a)(Se,2),Be=De[0],Ue=De[1],Pe=Object(a.useState)(be),He=Object(o.a)(Pe,2),je=He[0],Fe=He[1],Ge=Object(a.useState)(be),qe=Object(o.a)(Ge,2),ze=qe[0],We=qe[1],Ke=Object(a.useState)(be),Xe=Object(o.a)(Ke,2),Ye=Xe[0],Ve=Xe[1],Ze=Object(a.useState)(be),Je=Object(o.a)(Ze,2),Qe=Je[0],$e=Je[1],en=Object(a.useState)(be),nn=Object(o.a)(en,2),tn=nn[0],an=nn[1],bn=Object(a.useState)(be),rn=Object(o.a)(bn,2),dn=rn[0],sn=rn[1];Object(a.useEffect)((function(){U.length>0&&console.debug(U.pop())}),[U]);var cn=function(){var e=Object(f.a)(s.a.mark((function e(){var n,t,a;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n="Not set",t=Object(c.a)(Ee),we&&r&&0===g&&null===localStorage.getItem("WEB3_CONNECT_CACHED_PROVIDER")&&(t=t.sort((function(e,n){return e===we?-1:n===we?1:0}))),e.next=5,t.reduce(function(){var e=Object(f.a)(s.a.mark((function e(t,a){var b,i,r,d;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t;case 2:if(!(b=e.sent)){e.next=7;break}return e.abrupt("return",Promise.resolve(b));case 7:e.t0=a.toLowerCase(),e.next="web3modal"===e.t0?10:"hardhat"===e.t0?22:31;break;case 10:return e.prev=10,e.next=13,on();case 13:return i=e.sent,r=new l.a.providers.Web3Provider(i),n="web3modal",e.abrupt("return",Promise.resolve(r));case 19:return e.prev=19,e.t1=e.catch(10),e.abrupt("return",Promise.resolve(void 0));case 22:return e.prev=22,d=new l.a.providers.JsonRpcProvider({url:"http://127.0.0.1:8545"}),n="hardhat",e.abrupt("return",Promise.resolve(d));case 28:return e.prev=28,e.t2=e.catch(22),e.abrupt("return",Promise.resolve(void 0));case 31:return e.abrupt("return",Promise.resolve(void 0));case 32:case"end":return e.stop()}}),e,null,[[10,19],[22,28]])})));return function(n,t){return e.apply(this,arguments)}}(),Promise.resolve(void 0));case 5:return a=e.sent,e.abrupt("return",a?{provider:a,hardhatProviderName:n}:void 0);case 7:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),fn=function(){var e=Object(f.a)(s.a.mark((function e(n,t){var a;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:e.t0=t,e.next="web3modal"===e.t0?3:"hardhat"===e.t0?7:8;break;case 3:return a=n,e.next=6,a.getSigner();case 6:return e.abrupt("return",e.sent);case 7:return e.abrupt("return",l.a.Wallet.fromMnemonic("rapid marriage slogan catalog swift off kite differ pluck million argue cost").connect(n));case 8:return e.abrupt("return",void 0);case 9:case"end":return e.stop()}}),e)})));return function(n,t){return e.apply(this,arguments)}}(),on=function(){var e=Object(f.a)(s.a.mark((function e(){var n,t;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n={},t=new m.a({cacheProvider:!1,providerOptions:n}),e.next=4,t.connect();case 4:return e.abrupt("return",e.sent);case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();Object(a.useEffect)((function(){var e=!0;return function(){var n=Object(f.a)(s.a.mark((function n(){var t,a,b,i,d,f;return s.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(t=function(e){x(!1),P((function(n){return[].concat(Object(c.a)(n),[e])}))},a=function(e){Ie(un(i,d)),Oe(ln(i,d)),Ue(pn(i,d)),Fe(mn(i,d)),We(yn(i,d)),Ve(hn(i,d)),$e(gn(i,d)),an(vn(i,d)),sn(Tn(i,d)),t(e)},r||0!==g){n.next=4;break}return n.abrupt("return",t("Auto init turned off."));case 4:return x(!0),P((function(e){return[].concat(Object(c.a)(e),["Initiating Symfoni React"])})),n.next=8,cn();case 8:if(b=n.sent,e&&b){n.next=11;break}return n.abrupt("return",t("No provider or signer."));case 11:return i=b.provider,$(i),P((function(e){return[].concat(Object(c.a)(e),["Useing "+b.hardhatProviderName])})),C(b.hardhatProviderName),n.next=17,fn(i,b.hardhatProviderName);case 17:if(d=n.sent,e&&d){n.next=20;break}return n.abrupt("return",a("Provider, without signer."));case 20:return K(d),P((function(e){return[].concat(Object(c.a)(e),["Useing signer"])})),n.next=24,d.getAddress();case 24:if(f=n.sent,e&&f){n.next=27;break}return n.abrupt("return",a("Provider and signer, without address."));case 27:return ve(f),n.abrupt("return",a("Completed Symfoni context initialization."));case 29:case"end":return n.stop()}}),n)})));return function(){return n.apply(this,arguments)}}()(),function(){e=!1}}),[g]);var un=function(e,n){var t=y.receipt.contractAddress;return{instance:n?E.connect(t,n):E.connect(t,e),factory:n?new E(n):void 0}},ln=function(e,n){var t=L.receipt.contractAddress;return{instance:n?M.connect(t,n):M.connect(t,e),factory:n?new M(n):void 0}},pn=function(e,n){var t=N.receipt.contractAddress;return{instance:n?R.connect(t,n):R.connect(t,e),factory:n?new R(n):void 0}},mn=function(e,n){var t=D.receipt.contractAddress;return{instance:n?B.connect(t,n):B.connect(t,e),factory:n?new B(n):void 0}},yn=function(e,n){var t=H.receipt.contractAddress;return{instance:n?j.connect(t,n):j.connect(t,e),factory:n?new j(n):void 0}},hn=function(e,n){var t=q.receipt.contractAddress;return{instance:n?z.connect(t,n):z.connect(t,e),factory:n?new z(n):void 0}},gn=function(e,n){var t=X.receipt.contractAddress;return{instance:n?Y.connect(t,n):Y.connect(t,e),factory:n?new Y(n):void 0}},vn=function(e,n){return{instance:n?J.connect(l.a.constants.AddressZero,n):J.connect(l.a.constants.AddressZero,e),factory:n?new J(n):void 0}},Tn=function(e,n){return{instance:n?ee.connect(l.a.constants.AddressZero,n):ee.connect(l.a.constants.AddressZero,e),factory:n?new ee(n):void 0}};return b.a.createElement(ce.Provider,{value:{init:function(e){return function(e){e&&ke((function(n){return n.sort((function(n,t){return n===e?-1:t===e?1:0}))})),v(g+1)}(e)},providers:Ee,currentHardhatProvider:_,loading:I,messages:U}},b.a.createElement(ie.Provider,{value:[Q,$]},b.a.createElement(de.Provider,{value:[W,K]},b.a.createElement(re.Provider,{value:[se,ve]},b.a.createElement(fe.Provider,{value:Me},b.a.createElement(oe.Provider,{value:Re},b.a.createElement(ue.Provider,{value:Be},b.a.createElement(le.Provider,{value:je},b.a.createElement(pe.Provider,{value:ze},b.a.createElement(me.Provider,{value:Ye},b.a.createElement(ye.Provider,{value:Qe},b.a.createElement(he.Provider,{value:tn},b.a.createElement(ge.Provider,{value:dn},t&&I?d.loadingComponent?d.loadingComponent:b.a.createElement("div",null,U.map((function(e,n){return b.a.createElement("p",{key:n},e)}))):d.children)))))))))))))},Te=t(15),we=t(118),_e=t(34),Ce=t(27),Ee=t(66),ke=t(121);function Ae(e,n,t,a,b){var i=Te.a.from(1);if(!ke.random.isReady())throw new Error("RNG is not ready");for(var r=ke.random.randomWords(8),d="0x",s=0;s<8;s++){d+=(r[s]>>>0).toString(16)}var c=Te.a.from(d),f=a+1,o=i.shl(256-f).sub(i),u=!1,l=0,p=0;return u||setTimeout((function e(){if(!u){for(var r=Date.now(),d=0;d<1e3;d++){l++;var s=Object(Ee.a)(["uint256","uint256","uint256","uint256"],[c,Te.a.from(n),Te.a.from(t),Te.a.from(t)]),m=Te.a.from(s);if(m.lte(o)){for(a=f;m.lte(o);)a=f,f++,o=i.shl(256-f).sub(i);if(b(l,p,c,a),u)return}c=c.add(i),l%1e3===0&&b(l,p)}u||setTimeout(e,0);var y=Date.now();p+=y-r}}),0),function(){return u=!0}}function Le(e,n){var t=e.div(Te.a.from(10).pow(n)),a=e.div(Te.a.from(10).pow(n-3)).mod(1e3);return t.toNumber().toLocaleString()+(a.isZero()?"":"."+a.toString().padStart(3,"0"))}var Me=Te.a.from(0),Ie=Te.a.from(1),xe=(Te.a.from(2),Te.a.from(10));var Ne=t(190),Re=t.n(Ne),Oe=t(87);function Se(e,n,t,a){var b=Te.a.from(e),i=Te.a.from(n),r=function(e){if(e.isZero())return 0;for(var n=1,t=256;n<t;){var a=n+t>>1,b=Ie.shl(a).sub(Ie);e.and(b).isZero()?n=a+1:t=a}return n}(b.xor(i));return 0===r&&(r=256),r--,t.div(xe.pow(a)).gte(Ie)?r>=20?r=30:r>=10?r=r-10+20:r*=2:r>10&&(r=10),r}function De(e){return e<=20?"very easy":e<=30?"easy":e<=40?"medium":e<=50?"hard":e<=60?"very hard":e<=70?"extremely hard":e<=80?"almost impossible":e<=90?"impossible":"a miracle"}function Be(e){var n="";if("string"===typeof e)return e;switch(e){case 0:n="Request satisfies all criteria to claim the tokens (at this moment)";break;case 1:n="blockNumber does not exist or has no live challenge assigned right now";break;case 2:n="Invalid or weak solution";break;case 3:n="This challenge has already been claimed by this address";break;case 4:n="All available rewards have been claimed already";break;case 5:n="Insufficient balance on recipient's address, external miners can only make claims on addresses with at least 0.001 LUMI";break;case 100:n="Invalid claim string";break;case 101:n="The contract is paused";break;default:n="Unknown Reason #"+e}return n}var Ue=function(e){return e?10:20},Pe=t(191),He=t.n(Pe),je=function(e){var n;switch(e){case"very easy":n="white";break;case"easy":n="#ffff9c";break;case"medium":n="#ffcf9c";break;case"hard":n="pink";break;case"very hard":n="#ff9c9c";break;case"extremely hard":n="#E1BEE7";break;default:n="#D1C4E9"}return n},Fe=function(e){return b.a.createElement("span",{title:e.category,style:Object(Ce.a)(Object(Ce.a)({},e.style),{},{backgroundColor:je(e.cat)}),className:He.a.cat},"\xa0",e.children,"\xa0")};function Ge(e){Object.keys(e).forEach((function(n){var t=e[n];void 0!==t.stopFn&&(t.stopFn(),t.stopFn=void 0)}))}var qe={},ze=function(e){var n=e.challenges,t=e.group,i=e.address,r=e.registeredBalances,d=e.demo,c=(e.verifyClaim,e.claimReward),u=qe[i];u||(u={},qe[i]=u);var l=function(e,n){var t={};return e.blockNumbers.forEach((function(a,b){var r=a.toHexString(),s=e.challengeHashes[b];if(t[r])throw new Error("Duplicate block number in challenges: "+r);var c=function(e,n){for(var t=e.blockNumbers.length,a=0;a<t;a++){var b=e.blockNumbers[a],i=e.balances[a];if(n.gte(b))return i}return Me}(n,a),f=function(e){return e?208:218}(d)-2*(e.totalCnt-b-1),o=Se(s,i,c,18),u=function(e,n){var t=e.div(xe.pow(n)),a=e.mod(xe.pow(n)).div(xe.pow(n-3));return t.gte(Ie)?t.gte(Te.a.from(1e3))?30:t.gte(Te.a.from(500))?28:t.gte(Te.a.from(200))?26:t.gte(Te.a.from(100))?24:t.gte(Te.a.from(50))?22:t.gte(Te.a.from(20))?20:t.gte(xe)?18:t.gte(Te.a.from(5))?16:t.gte(Te.a.from(3))?14:t.gte(Te.a.from(2))?12:10:a.gte(Te.a.from(500))?9:a.gte(Te.a.from(200))?8:a.gte(Te.a.from(100))?7:a.gte(Te.a.from(50))?6:a.gte(Te.a.from(20))?5:a.gte(xe)?4:a.gte(Te.a.from(5))?3:a.gte(Te.a.from(2))?2:a.gte(Ie)?1:0}(c,18),l=f-o-u;l<Ue(d)&&(l=Ue(d));var p={blockNumberHex:r,challengeHash:s,generalDifficulty:f,addressDiscount:o,balance:c,balanceDiscount:u,adjustedDifficulty:l,claimsCnt:e.claimsCnt[b],claimed:e.claimed[b]};t[r]=p})),t}(n,r),p=Object(a.useState)(Object(Ce.a)({},u)),m=Object(o.a)(p,2),y=m[0],h=m[1],g=Object(a.useState)(""),v=Object(o.a)(g,2),T=v[0],w=v[1],_=Object(a.useState)({totalCnt:0,indexes:[],blockNumbers:[],rewardUnits:[],challengeHashes:[],nexts:[],claimsCnt:[],claimed:[]}),C=Object(o.a)(_,2),E=C[0],k=C[1],A=!0;Object(a.useEffect)((function(){return function(){var e=Object(f.a)(s.a.mark((function e(){var a,b;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:A&&(T!==i?(Ge(qe[T]),w(i),a={},Object.keys(u).forEach((function(e){var n=u[e],t=Object(Ce.a)({},n);a[e]=t})),h(a)):E!==n&&(Object.keys(u).forEach((function(e){var n=u[e];if(n.group===t){var a=l[e];a?n.targetDifficulty!==a.adjustedDifficulty&&(n.targetDifficulty=a.adjustedDifficulty,n.solvedDifficulty>=n.targetDifficulty&&(n.solved=!0,n.stopFn&&(n.stopFn(),n.stopFn=void 0))):(n.stopFn&&(n.stopFn(),n.stopFn=void 0),delete u[e])}})),k(n),b={},Object.keys(u).forEach((function(e){var n=u[e],t=Object(Ce.a)({},n);b[e]=t})),h(b)));case 1:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}()(),function(){A=!1}}));var L=function(){var e=Object(f.a)(s.a.mark((function e(n,a,b,i,r){var d,c,f,o,l,p;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n.preventDefault(),d=a.toHexString(),(c=u[d])||(c={group:t,blockNumberHex:d,challengeHash:b,trials:0,targetDifficulty:r,solutionTrials:0,solvedDifficulty:0,solved:!1,timeMs:0,stopFn:void 0},u[d]=c),!c.stopFn){e.next=6;break}throw new Error("The solver is already running on block "+d);case 6:f=c.trials,o=c.timeMs,l=function(e,n,t,a){var b=u[d];b.trials=f+e,b.timeMs=o+n,t&&void 0!==a&&a>b.solvedDifficulty&&(b.solutionTrials=b.trials,b.solution=t,b.solvedDifficulty=a,b.solvedDifficulty>=b.targetDifficulty&&(b.solved=!0,b.stopFn&&(b.stopFn(),b.stopFn=void 0)));var i=Object(Ce.a)({},u),r=Object(Ce.a)({},b);i[d]=r,h(i)},c.stopFn=Ae(0,b,i,c.solvedDifficulty,l),(p=Object(Ce.a)({},u))[d]=Object(Ce.a)({},c),h(p);case 13:case"end":return e.stop()}}),e)})));return function(n,t,a,b,i){return e.apply(this,arguments)}}(),M=function(){var e=Object(f.a)(s.a.mark((function e(n,t){var a,b,i,r;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n.preventDefault(),a=t.toHexString(),b=u[a]){e.next=5;break}throw new Error("The solver does not exist "+a);case 5:b.stopFn&&(b.stopFn(),b.stopFn=void 0),i=Object(Ce.a)({},u),r=Object(Ce.a)({},b),i[a]=r,h(i);case 10:case"end":return e.stop()}}),e)})));return function(n,t){return e.apply(this,arguments)}}(),I=function(){var e=Object(f.a)(s.a.mark((function e(n,t){var a,b,r,d;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n.preventDefault(),a=t.toHexString(),b=u[a]){e.next=5;break}throw new Error("The solver does not exist "+a);case 5:if(!b.solution){e.next=8;break}return e.next=8,c(t,i,i,b.solution);case 8:r=Object(Ce.a)({},u),d=Object(Ce.a)({},b),r[a]=d,h(r);case 12:case"end":return e.stop()}}),e)})));return function(n,t){return e.apply(this,arguments)}}();return b.a.createElement("table",null,b.a.createElement("thead",null,b.a.createElement("tr",null,b.a.createElement("th",null,"N"),b.a.createElement("th",null,"Block",b.a.createElement("br",null),"Number"),b.a.createElement("th",null,"Challenge Hash"),b.a.createElement("th",null,"YOUR",b.a.createElement("br",null),"Discount"),b.a.createElement("th",{style:{textAlign:"left"}},"YOUR",b.a.createElement("br",null),"Difficulty"),b.a.createElement("th",null,"Reward",b.a.createElement("br",null),"Tokens"),b.a.createElement("th",null,"Claims"),b.a.createElement("th",null,"Status"),b.a.createElement("th",null,"Mining",b.a.createElement("br",null),"Progress"),b.a.createElement("th",null,"Trials"),b.a.createElement("th",null,"Time"),b.a.createElement("th",null,"Mine/Verify/Claim"),b.a.createElement("th",null,"GoMiner",b.a.createElement("br",null),"Command"),b.a.createElement("th",null,"N"))),b.a.createElement("tbody",null,n.blockNumbers.map((function(e,t){var a=n.challengeHashes[t],r=a.substr(0,8)+"-"+a.substr(a.length-10,10),s=e.toHexString(),c=l[s],f=c.addressDiscount,u=c.balanceDiscount,p=c.adjustedDifficulty,m=c.claimsCnt,h=c.claimed,g=y[s],v=!h&&g&&g.solvedDifficulty>=p,T=function(e){return e.startsWith("0x22222")?[500,2e3]:e.startsWith("0x2222")?[200,500]:e.startsWith("0x222")?[100,100]:e.startsWith("0x22")?[50,20]:e.startsWith("0x2")?[20,5]:[10,1]}(a),w=Object(o.a)(T,2),_=w[0],C=w[1],E=n.rewardUnits[t];_=function(e){return e?2:500}(d);var k=h?"Claimed":g&&(g.solved?"Solved (now you need to claim)":g.stopFn?"Mining":g.trials>0?"Stopped":""),A=h?"check":g?g.solved?"check":g.stopFn?"running":g.trials>0?"stop":"":"",x=h?"green":g&&(g.solved||g.stopFn||g.trials>0)?"red":"",N=g?g.solved?""+g.solvedDifficulty:g.stopFn||g.trials>0?g.solvedDifficulty+" / "+p:"":"",R=g?g.solved?100:g.stopFn||g.trials>0?Math.floor(100*g.solvedDifficulty/p):"":"",O="./gominer -a "+i+" -b "+e.toString()+" -c "+a+" -d "+p.toString()+" -t 2";return b.a.createElement("tr",{key:t},b.a.createElement("td",null,t+1),b.a.createElement("th",null,e.toString()),b.a.createElement("td",null,b.a.createElement("code",null,r)),f>0||u>0?b.a.createElement("td",null,f+u):b.a.createElement("td",null),b.a.createElement("td",{style:{textAlign:"left"}},b.a.createElement(Fe,{cat:De(p)},p," - ",De(p))),b.a.createElement("td",null,C*E/1e3),b.a.createElement("td",null,m,"/",_),b.a.createElement("td",null,A&&b.a.createElement(_e.a,{title:k,color:x,icon:A})),b.a.createElement("td",null,""===R?"":b.a.createElement("span",{title:N},b.a.createElement(Re.a,{width:"60px",height:"18px",labelSize:"10px",labelColor:"black",bgColor:"#BBDEFB",labelAlignment:"center",animateOnRender:!1,transitionTimingFunction:"linear",transitionDuration:"500ms",completed:R}))),b.a.createElement("td",null,g&&(g.solved?g.solutionTrials.toLocaleString():g.trials>0?g.trials.toLocaleString():"")),b.a.createElement("td",null,g&&(g.timeMs>0?Math.floor(g.timeMs/1e3).toLocaleString()+" s":"")),b.a.createElement("td",null,b.a.createElement("button",{title:"Start Mining",disabled:!!(h||g&&(g.solved||g.stopFn)),onClick:function(n){return L(n,e,a,i,p)}},b.a.createElement(_e.a,{icon:"play"})),b.a.createElement("button",{title:"Stop Mining",disabled:!(g&&g.stopFn),onClick:function(n){return M(n,e)}},b.a.createElement(_e.a,{icon:"pause"})),b.a.createElement("button",{title:"Claim Your Reward",style:{color:v?"red":""},disabled:!v,onClick:function(n){return I(n,e)}},b.a.createElement(_e.a,{icon:"trophy"}))),b.a.createElement("td",null,b.a.createElement(Oe.CopyToClipboard,{text:O},b.a.createElement("button",{title:"Copy GoMiner Command",disabled:h},b.a.createElement(_e.a,{icon:["far","copy"]})))),b.a.createElement("td",null,t+1))}))))},We={white:{backgroundColor:"white"},red:{backgroundColor:"#FFCDD2"},pink:{backgroundColor:"#F8BBD0"},purple:{backgroundColor:"#E1BEE7"},deepPurple:{backgroundColor:"#D1C4E9"},indigo:{backgroundColor:"#C5CAE9"},blue:{backgroundColor:"#BBDEFB"},lightBlue:{backgroundColor:"#B3E5FC"},black:{backgroundColor:"#000000",color:"white"},cyan:{backgroundColor:"#B2EBF2"},teal:{backgroundColor:"#B2DFDB"},green:{backgroundColor:"#C8E6C9"},lightGreen:{backgroundColor:"#DCEDC8"},yellow:{backgroundColor:"#FFF9C4"},amber:{backgroundColor:"#FFECB3"},orange:{backgroundColor:"#FFE0B2"},brown:{backgroundColor:"#D7CCC8"},darkGrey:{backgroundColor:"#D8D8D8"},grey:{backgroundColor:"#E8E8E8"},lightgrey:{backgroundColor:"#F5F5F5"},blueGrey:{backgroundColor:"#CFD8DC"}},Ke=t(78),Xe=t.n(Ke),Ye=function(e){var n=e.children,t=e.chainId,i=Object(a.useState)(!1),r=Object(o.a)(i,2),d=r[0],s=r[1],c=Object(a.useState)(!1),f=Object(o.a)(c,2),u=f[0],l=f[1],p=Object(a.useState)(!1),m=Object(o.a)(p,2),y=m[0],h=m[1],g=Object(a.useState)(!1),v=Object(o.a)(g,2),T=v[0],w=v[1],_=Xe.a.button,C=Xe.a.buttonHover,E=Xe.a.buttonDown,k=u?E:d?C:_,A=T?E:y?C:_,L=80001===t?"http://mumbai.polygonscan.com/address":"http://polygonscan.com/address";return n?b.a.createElement("span",null,b.a.createElement("span",{className:Xe.a.address},b.a.createElement("code",null,n)),"\xa0",n&&b.a.createElement(Oe.CopyToClipboard,{text:n},b.a.createElement("span",{onPointerOver:function(){return s(!0)},onPointerOut:function(){return s(!1)},onPointerDown:function(){return l(!0)},onPointerUp:function(){return l(!1)}},b.a.createElement("button",{className:k},b.a.createElement(_e.a,{title:"Copy Address: "+n,icon:["far","copy"]})))),b.a.createElement("span",{onPointerOver:function(){return h(!0)},onPointerOut:function(){return h(!1)},onPointerDown:function(){return w(!0)},onPointerUp:function(){return w(!1)}},b.a.createElement("a",{title:L+"/"+n,href:L+"/"+n,target:"_blank",rel:"noopener noreferrer"},b.a.createElement("button",{className:A},b.a.createElement(_e.a,{icon:"external-link-alt"}))))):null},Ve=t(192),Ze=[{value:0,label:"0%"},{value:10,label:"10%"},{value:20,label:"20%"},{value:30,label:"30%"},{value:40,label:"40%"},{value:50,label:"50%"},{value:60,label:"60%"},{value:70,label:"70%"},{value:80,label:"80%"},{value:90,label:"90%"}],Je={};Ze.forEach((function(e){return Je[e.value.toString()]=e}));var Qe={control:function(e,n){return Object(Ce.a)(Object(Ce.a)({},e),{},{background:"#fff",borderColor:"#9e9e9e",minHeight:"20px",height:"20px",boxShadow:(n.isFocused,null)})},valueContainer:function(e,n){return Object(Ce.a)(Object(Ce.a)({},e),{},{height:"20px",padding:"0 6px"})},input:function(e,n){return Object(Ce.a)(Object(Ce.a)({},e),{},{margin:"0px"})},indicatorSeparator:function(e){return{display:"none"}},indicatorsContainer:function(e,n){return Object(Ce.a)(Object(Ce.a)({},e),{},{height:"20px"})}},$e=function(e){Object(w.a)(t,e);var n=Object(_.a)(t);function t(){var e;Object(h.a)(this,t);for(var a=arguments.length,b=new Array(a),i=0;i<a;i++)b[i]=arguments[i];return(e=n.call.apply(n,[this].concat(b))).handleChange=function(n){e.props.setCommision(n.value)},e}return Object(g.a)(t,[{key:"render",value:function(){var e=this.props.commision,n=Je[e.toString()]||null;return b.a.createElement(Ve.a,{styles:Qe,placeholder:e+"%",width:25,value:n,onChange:this.handleChange,options:Ze})}}]),t}(a.Component),en=function(){var e=Object(a.useState)(""),n=Object(o.a)(e,2),t=n[0],i=n[1],r=Object(a.useState)(0),d=Object(o.a)(r,2),c=d[0],u=d[1],l=Object(a.useState)(""),p=Object(o.a)(l,2),m=p[0],y=p[1],h=Object(a.useState)(Me),g=Object(o.a)(h,2),v=g[0],T=g[1],w=Object(a.useState)(Me),_=Object(o.a)(w,2),C=_[0],E=_[1],k=Object(a.useState)(""),A=Object(o.a)(k,2),L=A[0],M=A[1],I=Object(a.useState)(!1),x=Object(o.a)(I,2),N=x[0],R=x[1],O=Object(a.useState)(0),S=Object(o.a)(O,2),D=S[0],B=S[1],U=Object(a.useState)(0),P=Object(o.a)(U,2),H=P[0],j=P[1],F=Object(a.useState)(0),G=Object(o.a)(F,2),q=G[0],z=G[1],W=Object(a.useState)({balances:[],blockNumbers:[]}),K=Object(o.a)(W,2),X=K[0],Y=K[1],V={totalCnt:0,indexes:[],blockNumbers:[],rewardUnits:[],challengeHashes:[],nexts:[],claimsCnt:[],claimed:[]},Z=Object(a.useState)(V),J=Object(o.a)(Z,2),Q=J[0],$=J[1],ee=Object(a.useState)(V),ne=Object(o.a)(ee,2),te=ne[0],ae=ne[1],be=Object(a.useState)(Me),ie=Object(o.a)(be,2),re=ie[0],de=ie[1],se=Object(a.useState)(Me),ce=Object(o.a)(se,2),oe=ce[0],ue=ce[1],he=Object(a.useState)(Me),ge=Object(o.a)(he,2),ve=ge[0],Ce=ge[1],Ee=Object(a.useState)(Me),ke=Object(o.a)(Ee,2),Ae=ke[0],Ie=ke[1],xe=Object(a.useState)(Me),Ne=Object(o.a)(xe,2),Re=Ne[0],Oe=Ne[1],Se=Object(a.useState)({chainId:0,name:"unknown"}),De=Object(o.a)(Se,2),Ue=De[0],Pe=De[1],He=Object(a.useState)(0),je=Object(o.a)(He,2),Fe=je[0],Ge=je[1],qe=Object(a.useState)(!1),Ke=Object(o.a)(qe,2),Xe=Ke[0],Ve=Ke[1],Ze=Object(a.useState)(""),Je=Object(o.a)(Ze,2),Qe=Je[0],en=Je[1],nn=Object(a.useState)(""),tn=Object(o.a)(nn,2),an=tn[0],bn=tn[1],rn=Object(a.useState)(0),dn=Object(o.a)(rn,2),sn=dn[0],cn=dn[1],fn=Object(a.useContext)(pe).instance,on=Object(a.useContext)(le).instance,un=Object(a.useContext)(me).instance,ln=Object(a.useContext)(fe).instance,pn=Object(a.useContext)(ye).instance,mn=window.ethereum?new we.a(window.ethereum):null,yn=mn&&mn.getSigner(),hn="";function gn(){return vn.apply(this,arguments)}function vn(){return(vn=Object(f.a)(s.a.mark((function e(){return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",mn&&mn.detectNetwork());case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}window.ethereum||(hn="Please install the MetaMask plugin");var Tn=!0,wn=function(){var e=Object(f.a)(s.a.mark((function e(n,t){var a,b,r,d,c;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i(""),e.prev=1,a=fn){e.next=5;break}throw Error("Token instance not ready");case 5:return e.next=7,n(a);case 7:return b=e.sent,e.next=10,b.wait();case 10:if(!(e.sent.confirmations<=0)){e.next=13;break}throw new Error("No confirmations in contract receipt");case 13:t&&t(a),z(q+1),e.next=25;break;case 17:return e.prev=17,e.t0=e.catch(1),r=e.t0,d=r.data&&r.data.message?r.data.message:r.message?r.message:r.toString(),c="VM Exception while processing transaction: revert ",d&&d.startsWith(c)&&(d=d.substring(c.length)),window.alert(d),e.abrupt("return",!1);case 25:return e.abrupt("return",!0);case 26:case"end":return e.stop()}}),e,null,[[1,17]])})));return function(n,t){return e.apply(this,arguments)}}(),_n=function(){var e=Object(f.a)(s.a.mark((function e(n,t){var a,b,r,d,c;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i(""),e.prev=1,a=on){e.next=5;break}throw Error("Records instance not ready");case 5:return e.next=7,n(a);case 7:return b=e.sent,e.next=10,b.wait();case 10:if(!(e.sent.confirmations<=0)){e.next=13;break}throw new Error("No confirmations in contract receipt");case 13:t&&t(a),z(q+1),e.next=25;break;case 17:return e.prev=17,e.t0=e.catch(1),r=e.t0,d=r.data&&r.data.message?r.data.message:r.message?r.message:r.toString(),c="VM Exception while processing transaction: revert ",d&&d.startsWith(c)&&(d=d.substring(c.length)),window.alert(d),e.abrupt("return",!1);case 25:return e.abrupt("return",!0);case 26:case"end":return e.stop()}}),e,null,[[1,17]])})));return function(n,t){return e.apply(this,arguments)}}(),Cn=function(){var e=Object(f.a)(s.a.mark((function e(n,t){var a,b,r,d,c;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i(""),e.prev=1,a=un){e.next=5;break}throw Error("Trustee instance not ready");case 5:return e.next=7,n(a);case 7:return b=e.sent,e.next=10,b.wait();case 10:if(!(e.sent.confirmations<=0)){e.next=13;break}throw new Error("No confirmations in contract receipt");case 13:t&&t(a),z(q+1),e.next=25;break;case 17:return e.prev=17,e.t0=e.catch(1),r=e.t0,d=r.data&&r.data.message?r.data.message:r.message?r.message:r.toString(),c="VM Exception while processing transaction: revert ",d&&d.startsWith(c)&&(d=d.substring(c.length)),window.alert(d),e.abrupt("return",!1);case 25:return e.abrupt("return",!0);case 26:case"end":return e.stop()}}),e,null,[[1,17]])})));return function(n,t){return e.apply(this,arguments)}}(),En=function(){var e=Object(f.a)(s.a.mark((function e(n,t){var a,b,r,d,c;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i(""),e.prev=1,a=ln){e.next=5;break}throw Error("Admin instance not ready");case 5:return e.next=7,n(a);case 7:return b=e.sent,e.next=10,b.wait();case 10:if(!(e.sent.confirmations<=0)){e.next=13;break}throw new Error("No confirmations in contract receipt");case 13:t&&t(a),z(q+1),e.next=25;break;case 17:return e.prev=17,e.t0=e.catch(1),r=e.t0,d=r.data&&r.data.message?r.data.message:r.message?r.message:r.toString(),c="VM Exception while processing transaction: revert ",d&&d.startsWith(c)&&(d=d.substring(c.length)),window.alert(d),e.abrupt("return",!1);case 25:return e.abrupt("return",!0);case 26:case"end":return e.stop()}}),e,null,[[1,17]])})));return function(n,t){return e.apply(this,arguments)}}(),kn=function(){var e=Object(f.a)(s.a.mark((function e(n,t){var a,b,r,d,c;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i(""),e.prev=1,a=pn){e.next=5;break}throw Error("Locker instance not ready");case 5:return e.next=7,n(a);case 7:return b=e.sent,e.next=10,b.wait();case 10:if(!(e.sent.confirmations<=0)){e.next=13;break}throw new Error("No confirmations in contract receipt");case 13:t&&t(a),z(q+1),e.next=25;break;case 17:return e.prev=17,e.t0=e.catch(1),r=e.t0,d=r.data&&r.data.message?r.data.message:r.message?r.message:r.toString(),c="VM Exception while processing transaction: revert ",d&&d.startsWith(c)&&(d=d.substring(c.length)),window.alert(d),e.abrupt("return",!1);case 25:return e.abrupt("return",!0);case 26:case"end":return e.stop()}}),e,null,[[1,17]])})));return function(n,t){return e.apply(this,arguments)}}(),An=function(){var e=Object(f.a)(s.a.mark((function e(n){return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n.preventDefault(),Cn((function(e){return e.pause()}));case 2:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),Ln=function(){var e=Object(f.a)(s.a.mark((function e(n){return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n.preventDefault(),Cn((function(e){return e.unpause()}));case 2:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),Mn=function(){var e=Object(f.a)(s.a.mark((function e(){var n,t,a,b,i,r,d,c,f,o;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(ln){e.next=2;break}return e.abrupt("return");case 2:return e.next=4,ln.readChallenges(!1,25);case 4:n=e.sent,t=n.totalCnt,a=n.indexes,b=n.blockNumbers,i=n.rewardUnits,r=n.challengeHashes,d=n.nexts,c=n.claimsCnt,f=n.claimed,o=r.map((function(e){return e.toHexString()})),$({totalCnt:t,indexes:a,blockNumbers:b,rewardUnits:i,challengeHashes:o,nexts:d,claimsCnt:c,claimed:f});case 8:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),In=function(){var e=Object(f.a)(s.a.mark((function e(){var n,t,a,b,i,r,d,c,f,o;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(ln){e.next=2;break}return e.abrupt("return");case 2:return e.next=4,ln.readChallenges(!0,25);case 4:n=e.sent,t=n.totalCnt,a=n.indexes,b=n.blockNumbers,i=n.rewardUnits,r=n.challengeHashes,d=n.nexts,c=n.claimsCnt,f=n.claimed,o=r.map((function(e){return e.toHexString()})),ae({totalCnt:t,indexes:a,blockNumbers:b,rewardUnits:i,challengeHashes:o,nexts:d,claimsCnt:c,claimed:f});case 8:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),xn=function(){var e=Object(f.a)(s.a.mark((function e(){return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:Mn(),In();case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),Nn=function(e){e.preventDefault(),xn()},Rn=function(){var e=Object(f.a)(s.a.mark((function e(n){return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n.preventDefault(),e.next=3,En((function(e){return e.addChallenges(D)}));case 3:xn();case 4:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),On=function(){var e=Object(f.a)(s.a.mark((function e(n){var t;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n.preventDefault(),t=pn&&pn.address,e.next=4,wn((function(e){return e.approve(t,C)}));case 4:return e.next=6,kn((function(e){return e.deposit(C)}));case 6:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),Sn=function(){var e=Object(f.a)(s.a.mark((function e(n){return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n.preventDefault(),e.next=3,kn((function(e){return e.withdraw(ve)}));case 3:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),Dn=function(){var e=Object(f.a)(s.a.mark((function e(n){return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n.preventDefault(),e.next=3,wn((function(e){return e.registerBalance()}));case 3:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),Bn=function(){var e=Object(f.a)(s.a.mark((function e(n){return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n.preventDefault(),en(""),bn("");case 3:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),Un=function(e){var n;try{var t=JSON.parse(e),a=t.blockNumber,b=t.minerAddress,i=t.address,r=t.solution,d=/0x[a-fA-F0-9]+/;return"number"===typeof a&&"string"===typeof b&&"string"===typeof i&&"string"===typeof r&&a>=0&&42===b.length&&42===i.length&&66===r.length&&b.startsWith("0x")&&i.startsWith("0x")&&r.startsWith("0x")&&d.test(b)&&d.test(i)&&d.test(r)?(n=!0,bn("")):(n=!1,bn("Invalid GoMiner Solution String")),{valid:n,blockNumber:Te.a.from(a),miner:b,recipient:i,solution:Te.a.from(r)}}catch(s){s instanceof Error&&bn(s.message),n=!1}return{valid:n,blockNumber:Te.a.from(0),miner:"",recipient:"",solution:Te.a.from(0)}},Pn=function(){var e=Object(f.a)(s.a.mark((function e(n){var t,a,b,i,r,d,c,f,o;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n.preventDefault(),t=Un(Qe),a=t.valid,b=t.blockNumber,i=t.miner,r=t.recipient,d=t.solution,!a){e.next=11;break}return e.next=5,Fn(b,i,r,d);case 5:c=e.sent,f=c.rewardUnits,o=c.reason,Gn(b,o,f),e.next=12;break;case 11:window.alert("Invalid GoMiner Solution String");case 12:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),Hn=function(){var e=Object(f.a)(s.a.mark((function e(n){var t,a,b,i,r,d;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n.preventDefault(),t=Un(Qe),a=t.valid,b=t.blockNumber,i=t.miner,r=t.recipient,d=t.solution,!a){e.next=9;break}return e.next=5,zn(b,i,r,d);case 5:e.sent&&(en(""),xn()),e.next=10;break;case 9:window.alert("Invalid GoMiner Solution String");case 10:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),jn=function(){var e=Object(f.a)(s.a.mark((function e(n){return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n.preventDefault(),en(n.target.value.trim());case 2:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),Fn=function(){var e=Object(f.a)(s.a.mark((function e(n,t,a,b){var i,r,d,c,f;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(un){e.next=2;break}throw new Error("Couldn't call trustee contract");case 2:if(!N){e.next=4;break}return e.abrupt("return",{rewardUnits:0,reason:101,premium:!1,rewardsCnt:0});case 4:return e.prev=4,e.next=7,un.verifyClaim(n,t,a,b);case 7:return i=e.sent,r=i.rewardUnits,d=i.reason,c=i.premium,f=i.rewardsCnt,e.abrupt("return",{rewardUnits:r,reason:d,premium:c,rewardsCnt:f});case 15:return e.prev=15,e.t0=e.catch(4),e.abrupt("return",{rewardUnits:0,reason:100,premium:!1,rewardsCnt:0});case 18:case"end":return e.stop()}}),e,null,[[4,15]])})));return function(n,t,a,b){return e.apply(this,arguments)}}(),Gn=function(e,n,t){0===n?window.alert("Claim Verification on block #"+e.toString()+"\nStatus: SUCCESS\nReward Amount: "+t/1e3+" LUMI"):window.alert("Claim Verification on block #"+e.toString()+"\nStatus: FAILED\nReason: "+Be(n))},qn=function(e,n,t){0===n||window.alert("Claim on block #"+e.toString()+"\nStatus: FAILED\nReason: "+Be(n))},zn=function(){var e=Object(f.a)(s.a.mark((function e(n,t,a,b){var i,r,d;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Fn(n,t,a,b);case 2:if(i=e.sent,i.rewardUnits,r=i.reason,d=i.premium,0!==r){e.next=12;break}return e.next=9,Cn((function(e){return e.claimReward(n,t,a,b)}));case 9:return e.sent&&(d?In():Mn()),e.abrupt("return",!0);case 12:return qn(n,r),e.abrupt("return",!1);case 14:case"end":return e.stop()}}),e)})));return function(n,t,a,b){return e.apply(this,arguments)}}();function Wn(){return(Wn=Object(f.a)(s.a.mark((function e(n){return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(on){e.next=2;break}throw new Error("Couldn't call records contract");case 2:return cn(n),e.next=5,_n((function(e){return e.setCommision(n)}));case 5:e.sent?cn(n):window.alert("Could not change commision");case 7:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var Kn=m===L;Object(a.useEffect)((function(){var e=function(){var e=Object(f.a)(s.a.mark((function e(){var n,t,a,b,r,d,f,o,l,p,h,g,w,_,k,A,I,x,O,S,U;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,gn();case 2:if(e.t0=e.sent,e.t0){e.next=5;break}e.t0=Ue;case 5:if(n=e.t0,Ue.chainId!==n.chainId&&Pe({chainId:n.chainId,name:n.name}),fn){e.next=9;break}return e.abrupt("return",null);case 9:if(on){e.next=11;break}return e.abrupt("return",null);case 11:if(un){e.next=13;break}return e.abrupt("return",null);case 13:if(ln){e.next=15;break}return e.abrupt("return",null);case 15:if(pn){e.next=17;break}return e.abrupt("return",null);case 17:return t=fn,e.prev=18,e.next=21,un.paused();case 21:return a=e.sent,e.next=24,un.owner();case 24:return b=e.sent,e.next=27,on.getBalances();case 27:return r=e.sent,e.next=30,t.totalSupply();case 30:return d=e.sent,e.next=33,ln.getChallengesAllowance();case 33:if(f=e.sent,e.prev=34,!yn){e.next=41;break}return e.next=38,yn.getAddress();case 38:e.t1=e.sent.toString(),e.next=42;break;case 41:e.t1="";case 42:o=e.t1,e.next=48;break;case 45:e.prev=45,e.t2=e.catch(34),o="";case 48:if(!o){e.next=54;break}return e.next=51,on.getCommision(o);case 51:e.t3=e.sent,e.next=55;break;case 54:e.t3=0;case 55:if(l=e.t3,!o){e.next=62;break}return e.next=59,t.balanceOf(o);case 59:e.t4=e.sent,e.next=63;break;case 62:e.t4=Me;case 63:if(p=e.t4,!mn){e.next=70;break}return e.next=67,mn.getBlockNumber();case 67:e.t5=e.sent,e.next=71;break;case 70:e.t5=0;case 71:return h=e.t5,e.next=74,un.getClaimedTokens();case 74:return g=e.sent,e.next=77,t.balanceOf(un.address);case 77:if(w=e.sent,!Tn){e.next=127;break}if(0!==H){e.next=84;break}return e.next=82,un.DEMO();case 82:_=e.sent,Ve(_);case 84:if(N===a&&L===b&&m===o&&sn===l&&v.eq(d)&&f===D&&C.eq(p)&&c===h&&Ae.eq(g)&&Re.eq(w)){e.next=99;break}return R(a),M(b),Y(r),y(o),cn(l),T(d),B(f),E(p),u(h),Ie(g),Oe(w),j(H+1),e.next=99,xn();case 99:if(k=pn){e.next=102;break}return e.abrupt("return");case 102:if(!o){e.next=108;break}return e.next=105,k.balanceOf(o);case 105:e.t6=e.sent,e.next=109;break;case 108:e.t6=Me;case 109:if(A=e.t6,!o){e.next=116;break}return e.next=113,k.availableBalanceOf(o);case 113:e.t7=e.sent,e.next=117;break;case 116:e.t7=Me;case 117:if(I=e.t7,!o){e.next=124;break}return e.next=121,k.totalLockedBalance();case 121:e.t8=e.sent,e.next=125;break;case 124:e.t8=Me;case 125:x=e.t8,Tn&&(oe===A&&ve===I&&re===x||(ue(A),Ce(I),de(x)));case 127:e.next=136;break;case 129:e.prev=129,e.t9=e.catch(18),O=e.t9,S=O.toString(),U=O.data&&O.data.message?O.data.message:O.message?O.message:O.toString(),S.startsWith("Error: call revert exception ")?(U="No smart contract, please make sure MetaMask is pointing to the MATIC network",U+=" "+S):S.startsWith("Error: ")&&(U=S.substring(7)),i(U);case 136:case"end":return e.stop()}}),e,null,[[18,129],[34,45]])})));return function(){return e.apply(this,arguments)}}(),n=setTimeout((function(){Tn&&Ge(Fe+1)}),5e3);return e(),function(){Tn=!1,clearTimeout(n)}}),[Fe]);var Xn=function(){return b.a.createElement("img",{width:384,alt:"",src:"lumina-logo.png"})},Yn=function(){return b.a.createElement("img",{width:24,alt:"",src:"logo256.png"})},Vn=Ue.chainId,Zn=31337===Vn?"HARDHAT":80001===Vn?"MUMBAI":Ue.name.toUpperCase();return b.a.createElement("div",null,b.a.createElement(Xn,null),t||hn?b.a.createElement("h2",{style:We.red},"ERROR: ",t||hn):null,N?b.a.createElement("h2",{style:We.red},"The Trustee Smart Contract Is PAUSED",b.a.createElement("br",null),"Please Wait Until the Contract Owner Resumes Its Operations"):null,b.a.createElement("p",null),b.a.createElement("h2",{style:{color:137===Vn?"black":"red"}},b.a.createElement("span",{style:{fontWeight:"bold"}},"Network:")," ",Zn," (",Vn,")"),Xe?b.a.createElement("h2",{style:{color:"red"}},"DEMO MODE"):null,b.a.createElement("p",{title:"The address of the Lumina coin ERC20 contract"},b.a.createElement("span",{style:{fontWeight:"bold"}},"Contract:")," ",b.a.createElement(Ye,{chainId:Vn},fn?fn.address:"")),b.a.createElement("p",null,b.a.createElement("span",{style:{fontWeight:"bold"}},"Total Supply:")," ",Le(v,18)," ","LUMI"),b.a.createElement("p",null,b.a.createElement("span",{style:{fontWeight:"bold"}},"Locked:")," ",Le(re,18)," ","LUMI"),b.a.createElement("p",null,b.a.createElement("span",{style:{fontWeight:"bold"}},"Mined:")," ",Le(Ae,18)," ","LUMI"),b.a.createElement("p",null,b.a.createElement("span",{style:{fontWeight:"bold"}},"Available:")," ",Le(Re,18)," ","LUMI"),b.a.createElement(Yn,null),b.a.createElement("h2",null,"YOUR Wallet"),b.a.createElement("p",{title:"The adddress of your wallet, currently connected to Metamask"},b.a.createElement("span",{style:{fontWeight:"bold"}},"Address:")," ",b.a.createElement(Ye,{chainId:Vn},m)),b.a.createElement("table",{style:{marginLeft:"auto",marginRight:"auto"}},b.a.createElement("tbody",null,b.a.createElement("tr",null,b.a.createElement("th",{style:{textAlign:"right"}},"Balance:"),b.a.createElement("td",{style:{textAlign:"left"}},Le(C,18)," ","LUMI","\xa0",C.gte(Te.a.from(10).pow(23))?b.a.createElement("button",{disabled:N,onClick:function(e){return On(e)}},"Lock Balance"):null,"\xa0",C.gt(Me)?b.a.createElement("button",{title:"Register Balance",disabled:N,onClick:function(e){return Dn(e)}},b.a.createElement(_e.a,{icon:"share-square"})):null)),X.blockNumbers.length>0?b.a.createElement("tr",null,b.a.createElement("th",{style:{textAlign:"right"}},"Registered:"),b.a.createElement("td",{style:{textAlign:"left"}},Le(X.balances[0],18)," ","LUMI")):null,m?b.a.createElement("tr",{title:"Portion of reward you are willing to share with any miner,\nwho would claim mine a reward for the benefit of your wallet.\n\nAllowed values: 0% or within range [10%-90%].\n\nThe default value is 22% but you can change it at any time."},b.a.createElement("th",{style:{textAlign:"right"}},"Commision:"),b.a.createElement("td",{style:{textAlign:"left"}},b.a.createElement($e,{commision:sn,setCommision:function(e){return Wn.apply(this,arguments)}}))):null,oe.gt(0)?b.a.createElement("tr",null,b.a.createElement("th",{style:{textAlign:"right"}},"Locked:"),b.a.createElement("td",{style:{textAlign:"left"}},Le(oe,18)," ","LUMI")):null,ve.gt(0)?b.a.createElement("tr",null,b.a.createElement("th",{style:{textAlign:"right"}},"Withdrawable:"),b.a.createElement("td",{style:{textAlign:"left"}},Le(ve,18)," ","LUMI","\xa0",b.a.createElement("button",{disabled:N,onClick:function(e){return Sn(e)}},"Withdraw"))):null)),b.a.createElement("p",null),b.a.createElement(Yn,null),Xe?b.a.createElement("h2",{style:{color:"red"}},"DEMO MODE"):null,b.a.createElement("h2",null,"Premium Challenges (",te.blockNumbers.length,")"),b.a.createElement("div",null,b.a.createElement("button",{title:"Refresh",disabled:N,onClick:function(e){return Nn(e)}},b.a.createElement(_e.a,{icon:"sync-alt"})),b.a.createElement("button",{title:"Add More Challenges",disabled:N||D<=0,onClick:function(e){return Rn(e)}},b.a.createElement(_e.a,{icon:"plus"}),D)),b.a.createElement("table",{style:{marginLeft:"auto",marginRight:"auto"}},b.a.createElement("tbody",null,b.a.createElement("tr",null,b.a.createElement("td",null,b.a.createElement(ze,{challenges:te,group:"premium",address:m,registeredBalances:X,demo:Xe,verifyClaim:Fn,claimReward:zn}))))),b.a.createElement("p",null),b.a.createElement(Yn,null),Xe?b.a.createElement("h2",{style:{color:"red"}},"DEMO MODE"):null,b.a.createElement("h2",null,"Regular Challenges (",Q.blockNumbers.length,")"),b.a.createElement("div",null,b.a.createElement("button",{title:"Refresh",disabled:N,onClick:function(e){return Nn(e)}},b.a.createElement(_e.a,{icon:"sync-alt"})),b.a.createElement("button",{title:"Add More Challenges",disabled:N||D<=0,onClick:function(e){return Rn(e)}},b.a.createElement(_e.a,{icon:"plus"}),D)),b.a.createElement("table",{style:{marginLeft:"auto",marginRight:"auto"}},b.a.createElement("tbody",null,b.a.createElement("tr",null,b.a.createElement("td",null,b.a.createElement(ze,{challenges:Q,group:"basic",address:m,registeredBalances:X,demo:Xe,verifyClaim:Fn,claimReward:zn}))),b.a.createElement("tr",null,b.a.createElement("td",null,b.a.createElement("p",null))))),b.a.createElement("p",null),b.a.createElement(Yn,null),b.a.createElement("p",null),b.a.createElement("h2",null,"Lumina Coin GoMiner"),b.a.createElement("p",null,"Download GoMiner \xa0",b.a.createElement("a",{href:"/downloads/gominer-linux-amd64",download:"gominer"},"Linux"),"\xa0\u2022\xa0",b.a.createElement("a",{href:"/downloads/gominer-linux-amd64",download:"gominer"},"Linux arm64"),"\xa0\u2022\xa0",b.a.createElement("a",{href:"/downloads/gominer.exe",download:"gominer.exe"},"Windows"),"\xa0\u2022\xa0",b.a.createElement("a",{href:"/downloads/gominer-macos-amd64.exe",download:"gominer"},"Mac OS"),"\xa0\u2022\xa0",b.a.createElement("a",{href:"/downloads/gominer-macos-arm64.exe",download:"gominer"},"Mac OS M1")),b.a.createElement("form",null,b.a.createElement("input",{type:"text",size:60,value:Qe,placeholder:"paste GoMiner solution here ...",onChange:function(e){return jn(e)}}),b.a.createElement("button",{title:"Clear",disabled:!Qe,onClick:function(e){return Bn(e)}},b.a.createElement(_e.a,{icon:"recycle"})),b.a.createElement("button",{title:"Verify",disabled:!Qe,onClick:function(e){return Pn(e)}},b.a.createElement(_e.a,{icon:"check"})),b.a.createElement("button",{title:"Claim",style:{color:Qe?"red":""},disabled:!Qe,onClick:function(e){return Hn(e)}},b.a.createElement(_e.a,{icon:"trophy"}))),an?b.a.createElement("h2",{style:We.red},"ERROR: ",an):null,X.blockNumbers.length>0?b.a.createElement(b.a.Fragment,null,b.a.createElement("p",null),b.a.createElement(Yn,null),b.a.createElement("h2",null,"Registered Balances"),b.a.createElement("p",null),b.a.createElement("table",{style:{marginLeft:"auto",marginRight:"auto"}},b.a.createElement("thead",null,b.a.createElement("tr",null,b.a.createElement("th",null,"Balance"),b.a.createElement("th",null,"Since Block"))),b.a.createElement("tbody",null,X.balances.slice(0,X.blockNumbers.length).map((function(e,n){var t=X.blockNumbers[n];return b.a.createElement("tr",{key:n},b.a.createElement("td",null,Le(e,18)," ","LUMI"),b.a.createElement("td",null,t.toString()))}))))):C.gte(Te.a.from(10).pow(15))?b.a.createElement("p",null,"Please register your current balance to be eligible for additional benefits"):null,b.a.createElement("p",null),b.a.createElement(Yn,null),b.a.createElement("h2",null,"Contract Info"),b.a.createElement("p",null,b.a.createElement("span",{style:{fontWeight:"bold"}},"Token Contract Address:")," ",b.a.createElement(Ye,{chainId:Vn},fn?fn.address:"")),b.a.createElement("p",null,b.a.createElement("span",{style:{fontWeight:"bold"}},"Records Contract Address:")," ",b.a.createElement(Ye,{chainId:Vn},on?on.address:"")),b.a.createElement("p",null,b.a.createElement("span",{style:{fontWeight:"bold"}},"Trustee Contract Owner:")," ",b.a.createElement(Ye,{chainId:Vn},L)),b.a.createElement("p",null,b.a.createElement("span",{style:{fontWeight:"bold"}},"Trustee Contract Address:")," ",b.a.createElement(Ye,{chainId:Vn},un?un.address:"")),b.a.createElement("p",null,b.a.createElement("span",{style:{fontWeight:"bold"}},"Admin Contract Address:")," ",b.a.createElement(Ye,{chainId:Vn},ln?ln.address:"")),b.a.createElement("p",null,b.a.createElement("span",{style:{fontWeight:"bold"}},"Locker Contract Address:")," ",b.a.createElement(Ye,{chainId:Vn},pn?pn.address:"")),b.a.createElement("p",null),Kn?b.a.createElement("table",{style:{marginLeft:"auto",marginRight:"auto"}},b.a.createElement("thead",null,b.a.createElement("tr",null,b.a.createElement("th",null,"Paused: ",N?"YES":"NO"))),b.a.createElement("tbody",null,b.a.createElement("tr",null,b.a.createElement("td",null,b.a.createElement("button",{disabled:N,onClick:function(e){return An(e)}},"Pause"),b.a.createElement("button",{disabled:!N,onClick:function(e){return Ln(e)}},"Unpause"))))):null,b.a.createElement(Yn,null),b.a.createElement("h2",null,"Debug"),b.a.createElement("p",null,"Block Number: ",c),b.a.createElement("p",null,"Refresh Cnt: ",H))},nn=t(11),tn=t(7),an=t(88);nn.b.add(tn.fb),nn.b.add(tn.v),nn.b.add(an.b),nn.b.add(tn.w),nn.b.add(tn.n),nn.b.add(tn.W),nn.b.add(tn.y),nn.b.add(tn.U),nn.b.add(tn.g),nn.b.add(tn.T),nn.b.add(tn.z),nn.b.add(tn.B),nn.b.add(tn.bb),nn.b.add(tn.H),nn.b.add(tn.C),nn.b.add(tn.u),nn.b.add(tn.h),nn.b.add(tn.b),nn.b.add(tn.f),nn.b.add(tn.F),nn.b.add(tn.P),nn.b.add(tn.cb),nn.b.add(tn.db),nn.b.add(tn.eb),nn.b.add(tn.I),nn.b.add(tn.l),nn.b.add(tn.R),nn.b.add(tn.Y),nn.b.add(tn.X),nn.b.add(tn.Z),nn.b.add(tn.p),nn.b.add(tn.L),nn.b.add(tn.M),nn.b.add(tn.N),nn.b.add(tn.a),nn.b.add(tn.G),nn.b.add(tn.E),nn.b.add(tn.Q),nn.b.add(tn.O),nn.b.add(tn.m),nn.b.add(tn.K),nn.b.add(tn.V),nn.b.add(tn.t),nn.b.add(tn.s),nn.b.add(tn.e),nn.b.add(tn.x),nn.b.add(tn.i),nn.b.add(tn.q),nn.b.add(tn.S),nn.b.add(tn.A),nn.b.add(tn.c),nn.b.add(tn.D),nn.b.add(tn.j),nn.b.add(tn.r),nn.b.add(tn.d),nn.b.add(tn.ab),nn.b.add(tn.k),nn.b.add(an.a),nn.b.add(tn.J),nn.b.add(tn.o);var bn=function(){return b.a.createElement("div",{className:"App"},b.a.createElement("header",{className:"App-header"},b.a.createElement(ve,{autoInit:!0,showLoading:!1},b.a.createElement(en,null))))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));r.a.render(b.a.createElement(b.a.StrictMode,null,b.a.createElement(bn,null)),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()})).catch((function(e){console.error(e.message)}))},78:function(e,n,t){e.exports={address:"Address_address__16qzz",button:"Address_button__sf4GB",buttonHover:"Address_buttonHover__2V1wV",buttonDown:"Address_buttonDown__3jw_6"}}},[[200,1,2]]]);
//# sourceMappingURL=main.bbfe1fc3.chunk.js.map